
ToteNummer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008474  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080085f8  080085f8  000095f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008650  08008650  0000a1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008650  08008650  00009650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008658  08008658  0000a1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008658  08008658  00009658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800865c  0800865c  0000965c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08008660  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001450  200001d0  0800882c  0000a1d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001620  0800882c  0000a620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001588a  00000000  00000000  0000a1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce8  00000000  00000000  0001fa7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00023768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ebf  00000000  00000000  00024ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220e0  00000000  00000000  0002599f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194e1  00000000  00000000  00047a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0d4e  00000000  00000000  00060f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121cae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  00121cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00127088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001d0 	.word	0x200001d0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080085e0 	.word	0x080085e0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001d4 	.word	0x200001d4
 80001c0:	080085e0 	.word	0x080085e0

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b98c 	b.w	80004f4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	468e      	mov	lr, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14a      	bne.n	800029a <__udivmoddi4+0xa6>
 8000204:	428a      	cmp	r2, r1
 8000206:	4617      	mov	r7, r2
 8000208:	d962      	bls.n	80002d0 <__udivmoddi4+0xdc>
 800020a:	fab2 f682 	clz	r6, r2
 800020e:	b14e      	cbz	r6, 8000224 <__udivmoddi4+0x30>
 8000210:	f1c6 0320 	rsb	r3, r6, #32
 8000214:	fa01 f806 	lsl.w	r8, r1, r6
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	40b7      	lsls	r7, r6
 800021e:	ea43 0808 	orr.w	r8, r3, r8
 8000222:	40b4      	lsls	r4, r6
 8000224:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000228:	fbb8 f1fe 	udiv	r1, r8, lr
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fb0e 8811 	mls	r8, lr, r1, r8
 8000234:	fb01 f20c 	mul.w	r2, r1, ip
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	429a      	cmp	r2, r3
 8000240:	d909      	bls.n	8000256 <__udivmoddi4+0x62>
 8000242:	18fb      	adds	r3, r7, r3
 8000244:	f101 30ff 	add.w	r0, r1, #4294967295
 8000248:	f080 80eb 	bcs.w	8000422 <__udivmoddi4+0x22e>
 800024c:	429a      	cmp	r2, r3
 800024e:	f240 80e8 	bls.w	8000422 <__udivmoddi4+0x22e>
 8000252:	3902      	subs	r1, #2
 8000254:	443b      	add	r3, r7
 8000256:	1a9a      	subs	r2, r3, r2
 8000258:	fbb2 f0fe 	udiv	r0, r2, lr
 800025c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000260:	fb00 fc0c 	mul.w	ip, r0, ip
 8000264:	b2a3      	uxth	r3, r4
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	459c      	cmp	ip, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f100 32ff 	add.w	r2, r0, #4294967295
 8000274:	f080 80d7 	bcs.w	8000426 <__udivmoddi4+0x232>
 8000278:	459c      	cmp	ip, r3
 800027a:	f240 80d4 	bls.w	8000426 <__udivmoddi4+0x232>
 800027e:	443b      	add	r3, r7
 8000280:	3802      	subs	r0, #2
 8000282:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000286:	2100      	movs	r1, #0
 8000288:	eba3 030c 	sub.w	r3, r3, ip
 800028c:	b11d      	cbz	r5, 8000296 <__udivmoddi4+0xa2>
 800028e:	2200      	movs	r2, #0
 8000290:	40f3      	lsrs	r3, r6
 8000292:	e9c5 3200 	strd	r3, r2, [r5]
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d905      	bls.n	80002aa <__udivmoddi4+0xb6>
 800029e:	b10d      	cbz	r5, 80002a4 <__udivmoddi4+0xb0>
 80002a0:	e9c5 0100 	strd	r0, r1, [r5]
 80002a4:	2100      	movs	r1, #0
 80002a6:	4608      	mov	r0, r1
 80002a8:	e7f5      	b.n	8000296 <__udivmoddi4+0xa2>
 80002aa:	fab3 f183 	clz	r1, r3
 80002ae:	2900      	cmp	r1, #0
 80002b0:	d146      	bne.n	8000340 <__udivmoddi4+0x14c>
 80002b2:	4573      	cmp	r3, lr
 80002b4:	d302      	bcc.n	80002bc <__udivmoddi4+0xc8>
 80002b6:	4282      	cmp	r2, r0
 80002b8:	f200 8108 	bhi.w	80004cc <__udivmoddi4+0x2d8>
 80002bc:	1a84      	subs	r4, r0, r2
 80002be:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c2:	2001      	movs	r0, #1
 80002c4:	4690      	mov	r8, r2
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	d0e5      	beq.n	8000296 <__udivmoddi4+0xa2>
 80002ca:	e9c5 4800 	strd	r4, r8, [r5]
 80002ce:	e7e2      	b.n	8000296 <__udivmoddi4+0xa2>
 80002d0:	2a00      	cmp	r2, #0
 80002d2:	f000 8091 	beq.w	80003f8 <__udivmoddi4+0x204>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f040 80a5 	bne.w	800042a <__udivmoddi4+0x236>
 80002e0:	1a8a      	subs	r2, r1, r2
 80002e2:	2101      	movs	r1, #1
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ea:	b280      	uxth	r0, r0
 80002ec:	b2bc      	uxth	r4, r7
 80002ee:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f2:	fb0e 221c 	mls	r2, lr, ip, r2
 80002f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fa:	fb04 f20c 	mul.w	r2, r4, ip
 80002fe:	429a      	cmp	r2, r3
 8000300:	d907      	bls.n	8000312 <__udivmoddi4+0x11e>
 8000302:	18fb      	adds	r3, r7, r3
 8000304:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x11c>
 800030a:	429a      	cmp	r2, r3
 800030c:	f200 80e3 	bhi.w	80004d6 <__udivmoddi4+0x2e2>
 8000310:	46c4      	mov	ip, r8
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	fbb3 f2fe 	udiv	r2, r3, lr
 8000318:	fb0e 3312 	mls	r3, lr, r2, r3
 800031c:	fb02 f404 	mul.w	r4, r2, r4
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	429c      	cmp	r4, r3
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x144>
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	f102 30ff 	add.w	r0, r2, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x142>
 8000330:	429c      	cmp	r4, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2dc>
 8000336:	4602      	mov	r2, r0
 8000338:	1b1b      	subs	r3, r3, r4
 800033a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800033e:	e7a5      	b.n	800028c <__udivmoddi4+0x98>
 8000340:	f1c1 0620 	rsb	r6, r1, #32
 8000344:	408b      	lsls	r3, r1
 8000346:	fa22 f706 	lsr.w	r7, r2, r6
 800034a:	431f      	orrs	r7, r3
 800034c:	fa2e fa06 	lsr.w	sl, lr, r6
 8000350:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000354:	fbba f8f9 	udiv	r8, sl, r9
 8000358:	fa0e fe01 	lsl.w	lr, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fb09 aa18 	mls	sl, r9, r8, sl
 8000364:	fa1f fc87 	uxth.w	ip, r7
 8000368:	ea43 030e 	orr.w	r3, r3, lr
 800036c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000370:	fb08 f00c 	mul.w	r0, r8, ip
 8000374:	0c1c      	lsrs	r4, r3, #16
 8000376:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800037a:	42a0      	cmp	r0, r4
 800037c:	fa02 f201 	lsl.w	r2, r2, r1
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x1a4>
 8000382:	193c      	adds	r4, r7, r4
 8000384:	f108 3aff 	add.w	sl, r8, #4294967295
 8000388:	f080 809e 	bcs.w	80004c8 <__udivmoddi4+0x2d4>
 800038c:	42a0      	cmp	r0, r4
 800038e:	f240 809b 	bls.w	80004c8 <__udivmoddi4+0x2d4>
 8000392:	f1a8 0802 	sub.w	r8, r8, #2
 8000396:	443c      	add	r4, r7
 8000398:	1a24      	subs	r4, r4, r0
 800039a:	b298      	uxth	r0, r3
 800039c:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a0:	fb09 4413 	mls	r4, r9, r3, r4
 80003a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003a8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ac:	45a4      	cmp	ip, r4
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003b6:	f080 8085 	bcs.w	80004c4 <__udivmoddi4+0x2d0>
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	f240 8082 	bls.w	80004c4 <__udivmoddi4+0x2d0>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	443c      	add	r4, r7
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	eba4 040c 	sub.w	r4, r4, ip
 80003cc:	fba0 8c02 	umull	r8, ip, r0, r2
 80003d0:	4564      	cmp	r4, ip
 80003d2:	4643      	mov	r3, r8
 80003d4:	46e1      	mov	r9, ip
 80003d6:	d364      	bcc.n	80004a2 <__udivmoddi4+0x2ae>
 80003d8:	d061      	beq.n	800049e <__udivmoddi4+0x2aa>
 80003da:	b15d      	cbz	r5, 80003f4 <__udivmoddi4+0x200>
 80003dc:	ebbe 0203 	subs.w	r2, lr, r3
 80003e0:	eb64 0409 	sbc.w	r4, r4, r9
 80003e4:	fa04 f606 	lsl.w	r6, r4, r6
 80003e8:	fa22 f301 	lsr.w	r3, r2, r1
 80003ec:	431e      	orrs	r6, r3
 80003ee:	40cc      	lsrs	r4, r1
 80003f0:	e9c5 6400 	strd	r6, r4, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	e74e      	b.n	8000296 <__udivmoddi4+0xa2>
 80003f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fc:	0c01      	lsrs	r1, r0, #16
 80003fe:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000402:	b280      	uxth	r0, r0
 8000404:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000408:	463b      	mov	r3, r7
 800040a:	fbb1 f1f7 	udiv	r1, r1, r7
 800040e:	4638      	mov	r0, r7
 8000410:	463c      	mov	r4, r7
 8000412:	46b8      	mov	r8, r7
 8000414:	46be      	mov	lr, r7
 8000416:	2620      	movs	r6, #32
 8000418:	eba2 0208 	sub.w	r2, r2, r8
 800041c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000420:	e765      	b.n	80002ee <__udivmoddi4+0xfa>
 8000422:	4601      	mov	r1, r0
 8000424:	e717      	b.n	8000256 <__udivmoddi4+0x62>
 8000426:	4610      	mov	r0, r2
 8000428:	e72b      	b.n	8000282 <__udivmoddi4+0x8e>
 800042a:	f1c6 0120 	rsb	r1, r6, #32
 800042e:	fa2e fc01 	lsr.w	ip, lr, r1
 8000432:	40b7      	lsls	r7, r6
 8000434:	fa0e fe06 	lsl.w	lr, lr, r6
 8000438:	fa20 f101 	lsr.w	r1, r0, r1
 800043c:	ea41 010e 	orr.w	r1, r1, lr
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fbbc f8fe 	udiv	r8, ip, lr
 8000448:	b2bc      	uxth	r4, r7
 800044a:	fb0e cc18 	mls	ip, lr, r8, ip
 800044e:	fb08 f904 	mul.w	r9, r8, r4
 8000452:	0c0a      	lsrs	r2, r1, #16
 8000454:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000458:	40b0      	lsls	r0, r6
 800045a:	4591      	cmp	r9, r2
 800045c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000460:	b280      	uxth	r0, r0
 8000462:	d93e      	bls.n	80004e2 <__udivmoddi4+0x2ee>
 8000464:	18ba      	adds	r2, r7, r2
 8000466:	f108 3cff 	add.w	ip, r8, #4294967295
 800046a:	d201      	bcs.n	8000470 <__udivmoddi4+0x27c>
 800046c:	4591      	cmp	r9, r2
 800046e:	d81f      	bhi.n	80004b0 <__udivmoddi4+0x2bc>
 8000470:	eba2 0209 	sub.w	r2, r2, r9
 8000474:	fbb2 f9fe 	udiv	r9, r2, lr
 8000478:	fb09 f804 	mul.w	r8, r9, r4
 800047c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000480:	b28a      	uxth	r2, r1
 8000482:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000486:	4542      	cmp	r2, r8
 8000488:	d229      	bcs.n	80004de <__udivmoddi4+0x2ea>
 800048a:	18ba      	adds	r2, r7, r2
 800048c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000490:	d2c2      	bcs.n	8000418 <__udivmoddi4+0x224>
 8000492:	4542      	cmp	r2, r8
 8000494:	d2c0      	bcs.n	8000418 <__udivmoddi4+0x224>
 8000496:	f1a9 0102 	sub.w	r1, r9, #2
 800049a:	443a      	add	r2, r7
 800049c:	e7bc      	b.n	8000418 <__udivmoddi4+0x224>
 800049e:	45c6      	cmp	lr, r8
 80004a0:	d29b      	bcs.n	80003da <__udivmoddi4+0x1e6>
 80004a2:	ebb8 0302 	subs.w	r3, r8, r2
 80004a6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	46e1      	mov	r9, ip
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e6>
 80004b0:	eba7 0909 	sub.w	r9, r7, r9
 80004b4:	444a      	add	r2, r9
 80004b6:	fbb2 f9fe 	udiv	r9, r2, lr
 80004ba:	f1a8 0c02 	sub.w	ip, r8, #2
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	e7db      	b.n	800047c <__udivmoddi4+0x288>
 80004c4:	4603      	mov	r3, r0
 80004c6:	e77d      	b.n	80003c4 <__udivmoddi4+0x1d0>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e765      	b.n	8000398 <__udivmoddi4+0x1a4>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e6fa      	b.n	80002c6 <__udivmoddi4+0xd2>
 80004d0:	443b      	add	r3, r7
 80004d2:	3a02      	subs	r2, #2
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x144>
 80004d6:	f1ac 0c02 	sub.w	ip, ip, #2
 80004da:	443b      	add	r3, r7
 80004dc:	e719      	b.n	8000312 <__udivmoddi4+0x11e>
 80004de:	4649      	mov	r1, r9
 80004e0:	e79a      	b.n	8000418 <__udivmoddi4+0x224>
 80004e2:	eba2 0209 	sub.w	r2, r2, r9
 80004e6:	fbb2 f9fe 	udiv	r9, r2, lr
 80004ea:	46c4      	mov	ip, r8
 80004ec:	fb09 f804 	mul.w	r8, r9, r4
 80004f0:	e7c4      	b.n	800047c <__udivmoddi4+0x288>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fe:	463b      	mov	r3, r7
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800050a:	4b21      	ldr	r3, [pc, #132]	@ (8000590 <MX_ADC1_Init+0x98>)
 800050c:	4a21      	ldr	r2, [pc, #132]	@ (8000594 <MX_ADC1_Init+0x9c>)
 800050e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000510:	4b1f      	ldr	r3, [pc, #124]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000512:	2200      	movs	r2, #0
 8000514:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000516:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800051c:	4b1c      	ldr	r3, [pc, #112]	@ (8000590 <MX_ADC1_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000522:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000528:	4b19      	ldr	r3, [pc, #100]	@ (8000590 <MX_ADC1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000530:	4b17      	ldr	r3, [pc, #92]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000536:	4b16      	ldr	r3, [pc, #88]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000538:	4a17      	ldr	r2, [pc, #92]	@ (8000598 <MX_ADC1_Init+0xa0>)
 800053a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <MX_ADC1_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000542:	4b13      	ldr	r3, [pc, #76]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000544:	2201      	movs	r2, #1
 8000546:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000548:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <MX_ADC1_Init+0x98>)
 800054a:	2200      	movs	r2, #0
 800054c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000550:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000552:	2201      	movs	r2, #1
 8000554:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000556:	480e      	ldr	r0, [pc, #56]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000558:	f000 fdaa 	bl	80010b0 <HAL_ADC_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000562:	f000 fb41 	bl	8000be8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000566:	230a      	movs	r3, #10
 8000568:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800056a:	2301      	movs	r3, #1
 800056c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000572:	463b      	mov	r3, r7
 8000574:	4619      	mov	r1, r3
 8000576:	4806      	ldr	r0, [pc, #24]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000578:	f000 fdde 	bl	8001138 <HAL_ADC_ConfigChannel>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000582:	f000 fb31 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200001ec 	.word	0x200001ec
 8000594:	40012000 	.word	0x40012000
 8000598:	0f000001 	.word	0x0f000001

0800059c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80005ae:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005b0:	4a21      	ldr	r2, [pc, #132]	@ (8000638 <MX_ADC2_Init+0x9c>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005cc:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d4:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005da:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005dc:	4a17      	ldr	r2, [pc, #92]	@ (800063c <MX_ADC2_Init+0xa0>)
 80005de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005fa:	480e      	ldr	r0, [pc, #56]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005fc:	f000 fd58 	bl	80010b0 <HAL_ADC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000606:	f000 faef 	bl	8000be8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800060a:	230b      	movs	r3, #11
 800060c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800060e:	2301      	movs	r3, #1
 8000610:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000616:	463b      	mov	r3, r7
 8000618:	4619      	mov	r1, r3
 800061a:	4806      	ldr	r0, [pc, #24]	@ (8000634 <MX_ADC2_Init+0x98>)
 800061c:	f000 fd8c 	bl	8001138 <HAL_ADC_ConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000626:	f000 fadf 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000234 	.word	0x20000234
 8000638:	40012100 	.word	0x40012100
 800063c:	0f000001 	.word	0x0f000001

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	@ 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a2e      	ldr	r2, [pc, #184]	@ (8000718 <HAL_ADC_MspInit+0xd8>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d128      	bne.n	80006b4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
 8000666:	4b2d      	ldr	r3, [pc, #180]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066a:	4a2c      	ldr	r2, [pc, #176]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000670:	6453      	str	r3, [r2, #68]	@ 0x44
 8000672:	4b2a      	ldr	r3, [pc, #168]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800067a:	61bb      	str	r3, [r7, #24]
 800067c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	4b26      	ldr	r3, [pc, #152]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a25      	ldr	r2, [pc, #148]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b23      	ldr	r3, [pc, #140]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069a:	2301      	movs	r3, #1
 800069c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	481c      	ldr	r0, [pc, #112]	@ (8000720 <HAL_ADC_MspInit+0xe0>)
 80006ae:	f001 fc7f 	bl	8001fb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80006b2:	e02c      	b.n	800070e <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000724 <HAL_ADC_MspInit+0xe4>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d127      	bne.n	800070e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c6:	4a15      	ldr	r2, [pc, #84]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 80006c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <HAL_ADC_MspInit+0xe0>)
 800070a:	f001 fc51 	bl	8001fb0 <HAL_GPIO_Init>
}
 800070e:	bf00      	nop
 8000710:	3730      	adds	r7, #48	@ 0x30
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40012000 	.word	0x40012000
 800071c:	40023800 	.word	0x40023800
 8000720:	40020800 	.word	0x40020800
 8000724:	40012100 	.word	0x40012100

08000728 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	@ 0x30
 800072c:	af00      	add	r7, sp, #0
void MX_CAN1_Init(void)
 800072e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000732:	607b      	str	r3, [r7, #4]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000734:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <MX_CAN1_Init+0x98>)
 8000736:	4a23      	ldr	r2, [pc, #140]	@ (80007c4 <MX_CAN1_Init+0x9c>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <MX_CAN1_Init+0x98>)
 800073c:	2210      	movs	r2, #16
 800073e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <MX_CAN1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000746:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <MX_CAN1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800074c:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <MX_CAN1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000752:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <MX_CAN1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <MX_CAN1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <MX_CAN1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000764:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_CAN1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <MX_CAN1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_CAN1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_CAN1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800077c:	4810      	ldr	r0, [pc, #64]	@ (80007c0 <MX_CAN1_Init+0x98>)
 800077e:	f000 ff01 	bl	8001584 <HAL_CAN_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000788:	f000 fa2e 	bl	8000be8 <Error_Handler>
  	  FilterMode, Maskenmodus (ausgewählte Bits vergleichen) oder Listenmodus (vollständige IDs vergleichen)
  	  Filter Scale, Verwendung eines 32-Bit-Registers oder zweier 16-Bit-Register
  	  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
  */

  canfilterconfig_DIC.FilterBank = 18;  // which filter bank to use from the assigned ones
 800078c:	2312      	movs	r3, #18
 800078e:	61fb      	str	r3, [r7, #28]
  canfilterconfig_DIC.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  canfilterconfig_DIC.FilterIdHigh = 0x500<<5;
 8000794:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000798:	60bb      	str	r3, [r7, #8]
  canfilterconfig_DIC.FilterIdLow = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  canfilterconfig_DIC.FilterMode = CAN_FILTERMODE_IDLIST;	//Mask or List
 800079e:	2301      	movs	r3, #1
 80007a0:	623b      	str	r3, [r7, #32]
  canfilterconfig_DIC.FilterScale = CAN_FILTERSCALE_32BIT;
 80007a2:	2301      	movs	r3, #1
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  canfilterconfig_DIC.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80007a6:	2314      	movs	r3, #20
 80007a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig_DIC);
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	4619      	mov	r1, r3
 80007b0:	4803      	ldr	r0, [pc, #12]	@ (80007c0 <MX_CAN1_Init+0x98>)
 80007b2:	f000 ffe3 	bl	800177c <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3730      	adds	r7, #48	@ 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000027c 	.word	0x2000027c
 80007c4:	40006400 	.word	0x40006400

080007c8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_CAN2_Init+0x60>)
 80007ce:	4a17      	ldr	r2, [pc, #92]	@ (800082c <MX_CAN2_Init+0x64>)
 80007d0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_CAN2_Init+0x60>)
 80007d4:	2210      	movs	r2, #16
 80007d6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_CAN2_Init+0x60>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_CAN2_Init+0x60>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_CAN2_Init+0x60>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_CAN2_Init+0x60>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <MX_CAN2_Init+0x60>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_CAN2_Init+0x60>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_CAN2_Init+0x60>)
 80007fe:	2200      	movs	r2, #0
 8000800:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_CAN2_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_CAN2_Init+0x60>)
 800080a:	2200      	movs	r2, #0
 800080c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_CAN2_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_CAN2_Init+0x60>)
 8000816:	f000 feb5 	bl	8001584 <HAL_CAN_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000820:	f000 f9e2 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200002a4 	.word	0x200002a4
 800082c:	40006800 	.word	0x40006800

08000830 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	@ 0x30
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a53      	ldr	r2, [pc, #332]	@ (800099c <HAL_CAN_MspInit+0x16c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d146      	bne.n	80008e0 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000852:	4b53      	ldr	r3, [pc, #332]	@ (80009a0 <HAL_CAN_MspInit+0x170>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	4a51      	ldr	r2, [pc, #324]	@ (80009a0 <HAL_CAN_MspInit+0x170>)
 800085a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800085c:	4b50      	ldr	r3, [pc, #320]	@ (80009a0 <HAL_CAN_MspInit+0x170>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d10d      	bne.n	8000880 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	4b4e      	ldr	r3, [pc, #312]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	4a4d      	ldr	r2, [pc, #308]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 800086e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000872:	6413      	str	r3, [r2, #64]	@ 0x40
 8000874:	4b4b      	ldr	r3, [pc, #300]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	4b47      	ldr	r3, [pc, #284]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000888:	4a46      	ldr	r2, [pc, #280]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 800088a:	f043 0302 	orr.w	r3, r3, #2
 800088e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000890:	4b44      	ldr	r3, [pc, #272]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000894:	f003 0302 	and.w	r3, r3, #2
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800089c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008ae:	2309      	movs	r3, #9
 80008b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	483b      	ldr	r0, [pc, #236]	@ (80009a8 <HAL_CAN_MspInit+0x178>)
 80008ba:	f001 fb79 	bl	8001fb0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	2013      	movs	r0, #19
 80008c4:	f001 fb3d 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80008c8:	2013      	movs	r0, #19
 80008ca:	f001 fb56 	bl	8001f7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2014      	movs	r0, #20
 80008d4:	f001 fb35 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008d8:	2014      	movs	r0, #20
 80008da:	f001 fb4e 	bl	8001f7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80008de:	e058      	b.n	8000992 <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a31      	ldr	r2, [pc, #196]	@ (80009ac <HAL_CAN_MspInit+0x17c>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d153      	bne.n	8000992 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b2d      	ldr	r3, [pc, #180]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	4a2c      	ldr	r2, [pc, #176]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 80008f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fa:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000906:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <HAL_CAN_MspInit+0x170>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	4a24      	ldr	r2, [pc, #144]	@ (80009a0 <HAL_CAN_MspInit+0x170>)
 800090e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <HAL_CAN_MspInit+0x170>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d10d      	bne.n	8000934 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	4a20      	ldr	r2, [pc, #128]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 8000922:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000926:	6413      	str	r3, [r2, #64]	@ 0x40
 8000928:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093c:	4a19      	ldr	r2, [pc, #100]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 800093e:	f043 0302 	orr.w	r3, r3, #2
 8000942:	6313      	str	r3, [r2, #48]	@ 0x30
 8000944:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <HAL_CAN_MspInit+0x174>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000948:	f003 0302 	and.w	r3, r3, #2
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000950:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000962:	2309      	movs	r3, #9
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	480e      	ldr	r0, [pc, #56]	@ (80009a8 <HAL_CAN_MspInit+0x178>)
 800096e:	f001 fb1f 	bl	8001fb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	203f      	movs	r0, #63	@ 0x3f
 8000978:	f001 fae3 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800097c:	203f      	movs	r0, #63	@ 0x3f
 800097e:	f001 fafc 	bl	8001f7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2040      	movs	r0, #64	@ 0x40
 8000988:	f001 fadb 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800098c:	2040      	movs	r0, #64	@ 0x40
 800098e:	f001 faf4 	bl	8001f7a <HAL_NVIC_EnableIRQ>
}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	@ 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40006400 	.word	0x40006400
 80009a0:	200002cc 	.word	0x200002cc
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020400 	.word	0x40020400
 80009ac:	40006800 	.word	0x40006800

080009b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	@ 0x28
 80009b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <MX_GPIO_Init+0xb8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a26      	ldr	r2, [pc, #152]	@ (8000a68 <MX_GPIO_Init+0xb8>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <MX_GPIO_Init+0xb8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <MX_GPIO_Init+0xb8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000a68 <MX_GPIO_Init+0xb8>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <MX_GPIO_Init+0xb8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <MX_GPIO_Init+0xb8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a18      	ldr	r2, [pc, #96]	@ (8000a68 <MX_GPIO_Init+0xb8>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_GPIO_Init+0xb8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_GPIO_Init+0xb8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a11      	ldr	r2, [pc, #68]	@ (8000a68 <MX_GPIO_Init+0xb8>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_GPIO_Init+0xb8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000a3c:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <MX_GPIO_Init+0xbc>)
 8000a3e:	f001 fc55 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin;
 8000a42:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_GPIO_Init+0xbc>)
 8000a5c:	f001 faa8 	bl	8001fb0 <HAL_GPIO_Init>

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020800 	.word	0x40020800

08000a70 <gpio>:

/* USER CODE BEGIN 2 */
static uint64_t lastGN = 0;		// Zeitpunkt null
// Last GN nicht immer auf null setzen, immer auf den Wert in if-Bedingung, sondern auf now, also auf den Zeitpukt der if-Schleife , die Zeit vergangen ist

void gpio(){
 8000a70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0

	//LED grün (blinkend)
		uint64_t now = HAL_GetTick();	// Zeitpunkt jetzt
 8000a78:	f000 faec 	bl	8001054 <HAL_GetTick>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4698      	mov	r8, r3
 8000a82:	4691      	mov	r9, r2
 8000a84:	e9c7 8900 	strd	r8, r9, [r7]
		if(now - lastGN >= 2000){
 8000a88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <gpio+0x50>)
 8000a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a92:	1a84      	subs	r4, r0, r2
 8000a94:	eb61 0503 	sbc.w	r5, r1, r3
 8000a98:	f5b4 6ffa 	cmp.w	r4, #2000	@ 0x7d0
 8000a9c:	f175 0300 	sbcs.w	r3, r5, #0
 8000aa0:	d309      	bcc.n	8000ab6 <gpio+0x46>
			HAL_GPIO_TogglePin(LED_GN_GPIO_Port, LED_GN_Pin);
 8000aa2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa6:	4807      	ldr	r0, [pc, #28]	@ (8000ac4 <gpio+0x54>)
 8000aa8:	f001 fc38 	bl	800231c <HAL_GPIO_TogglePin>
			lastGN = now;				// TogglePin wieder aufrufen
 8000aac:	4904      	ldr	r1, [pc, #16]	@ (8000ac0 <gpio+0x50>)
 8000aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ab2:	e9c1 2300 	strd	r2, r3, [r1]
		}
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000ac0:	200002d0 	.word	0x200002d0
 8000ac4:	40020800 	.word	0x40020800

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000acc:	f000 fa5e 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad0:	f000 f844 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad4:	f7ff ff6c 	bl	80009b0 <MX_GPIO_Init>
  MX_TIM9_Init();
 8000ad8:	f000 f956 	bl	8000d88 <MX_TIM9_Init>
  MX_ADC1_Init();
 8000adc:	f7ff fd0c 	bl	80004f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ae0:	f7ff fd5c 	bl	800059c <MX_ADC2_Init>
  MX_CAN1_Init();
 8000ae4:	f7ff fe20 	bl	8000728 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000ae8:	f7ff fe6e 	bl	80007c8 <MX_CAN2_Init>
  MX_USB_DEVICE_Init();
 8000aec:	f006 ff66 	bl	80079bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GN_GPIO_Port, LED_GN_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af6:	4816      	ldr	r0, [pc, #88]	@ (8000b50 <main+0x88>)
 8000af8:	f001 fbf8 	bl	80022ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_YW_GPIO_Port, LED_YW_Pin, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b02:	4813      	ldr	r0, [pc, #76]	@ (8000b50 <main+0x88>)
 8000b04:	f001 fbf2 	bl	80022ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RD_GPIO_Port, LED_RD_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b0e:	4810      	ldr	r0, [pc, #64]	@ (8000b50 <main+0x88>)
 8000b10:	f001 fbec 	bl	80022ec <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  gpio();
 8000b14:	f7ff ffac 	bl	8000a70 <gpio>
	  //ErrorLed_Task(); damit wird ein Fehler angezeigt
	  TxData[0] = 0;
 8000b18:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <main+0x8c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 0;
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <main+0x8c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	705a      	strb	r2, [r3, #1]
	  TxData[2] = 0;
 8000b24:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <main+0x8c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 0;
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <main+0x8c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	70da      	strb	r2, [r3, #3]
	  TxData[4] = LED_State;
 8000b30:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <main+0x90>)
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <main+0x8c>)
 8000b36:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 0;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <main+0x8c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	715a      	strb	r2, [r3, #5]
	  TxData[6] = 0;
 8000b3e:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <main+0x8c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	719a      	strb	r2, [r3, #6]
	  TxData[7] = 0;
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <main+0x8c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	71da      	strb	r2, [r3, #7]
  {
 8000b4a:	bf00      	nop
 8000b4c:	e7e2      	b.n	8000b14 <main+0x4c>
 8000b4e:	bf00      	nop
 8000b50:	40020800 	.word	0x40020800
 8000b54:	200002dc 	.word	0x200002dc
 8000b58:	200002d8 	.word	0x200002d8

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b092      	sub	sp, #72	@ 0x48
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	2230      	movs	r2, #48	@ 0x30
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f007 fcac 	bl	80084c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b90:	2319      	movs	r3, #25
 8000b92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b94:	23c0      	movs	r3, #192	@ 0xc0
 8000b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0318 	add.w	r3, r7, #24
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 fdf3 	bl	8003790 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bb0:	f000 f81a 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bc0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2103      	movs	r1, #3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 f831 	bl	8003c38 <HAL_RCC_ClockConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bdc:	f000 f804 	bl	8000be8 <Error_Handler>
  }
}
 8000be0:	bf00      	nop
 8000be2:	3748      	adds	r7, #72	@ 0x48
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Error_Handler+0x8>

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_MspInit+0x48>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <HAL_MspInit+0x48>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <HAL_MspInit+0x48>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <HAL_MspInit+0x48>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	4a07      	ldr	r2, [pc, #28]	@ (8000c3c <HAL_MspInit+0x48>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c26:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <HAL_MspInit+0x48>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40023800 	.word	0x40023800

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f9ce 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <CAN1_TX_IRQHandler+0x10>)
 8000c9e:	f000 fe4d 	bl	800193c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000027c 	.word	0x2000027c

08000cac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <CAN1_RX0_IRQHandler+0x10>)
 8000cb2:	f000 fe43 	bl	800193c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000027c 	.word	0x2000027c

08000cc0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000cc6:	f003 fa1a 	bl	80040fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200002e8 	.word	0x200002e8

08000cd4 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <CAN2_TX_IRQHandler+0x10>)
 8000cda:	f000 fe2f 	bl	800193c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200002a4 	.word	0x200002a4

08000ce8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <CAN2_RX0_IRQHandler+0x10>)
 8000cee:	f000 fe25 	bl	800193c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200002a4 	.word	0x200002a4

08000cfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <OTG_FS_IRQHandler+0x10>)
 8000d02:	f001 fc55 	bl	80025b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000ffc 	.word	0x20000ffc

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f007 fbda 	bl	80084f8 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000c000 	.word	0x2000c000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	200002e4 	.word	0x200002e4
 8000d78:	20001620 	.word	0x20001620

08000d7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <MX_TIM9_Init>:

TIM_HandleTypeDef htim9;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	@ 0x38
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000db8:	4b35      	ldr	r3, [pc, #212]	@ (8000e90 <MX_TIM9_Init+0x108>)
 8000dba:	4a36      	ldr	r2, [pc, #216]	@ (8000e94 <MX_TIM9_Init+0x10c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000dbe:	4b34      	ldr	r3, [pc, #208]	@ (8000e90 <MX_TIM9_Init+0x108>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b32      	ldr	r3, [pc, #200]	@ (8000e90 <MX_TIM9_Init+0x108>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000dca:	4b31      	ldr	r3, [pc, #196]	@ (8000e90 <MX_TIM9_Init+0x108>)
 8000dcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dd0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e90 <MX_TIM9_Init+0x108>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e90 <MX_TIM9_Init+0x108>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000dde:	482c      	ldr	r0, [pc, #176]	@ (8000e90 <MX_TIM9_Init+0x108>)
 8000de0:	f003 f8e6 	bl	8003fb0 <HAL_TIM_Base_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM9_Init+0x66>
  {
    Error_Handler();
 8000dea:	f7ff fefd 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000df4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4825      	ldr	r0, [pc, #148]	@ (8000e90 <MX_TIM9_Init+0x108>)
 8000dfc:	f003 fb0b 	bl	8004416 <HAL_TIM_ConfigClockSource>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 8000e06:	f7ff feef 	bl	8000be8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8000e0a:	4821      	ldr	r0, [pc, #132]	@ (8000e90 <MX_TIM9_Init+0x108>)
 8000e0c:	f003 f91f 	bl	800404e <HAL_TIM_IC_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM9_Init+0x92>
  {
    Error_Handler();
 8000e16:	f7ff fee7 	bl	8000be8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000e1e:	2360      	movs	r3, #96	@ 0x60
 8000e20:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4816      	ldr	r0, [pc, #88]	@ (8000e90 <MX_TIM9_Init+0x108>)
 8000e36:	f003 fbb5 	bl	80045a4 <HAL_TIM_SlaveConfigSynchro>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM9_Init+0xbc>
  {
    Error_Handler();
 8000e40:	f7ff fed2 	bl	8000be8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <MX_TIM9_Init+0x108>)
 8000e5c:	f003 fa3f 	bl	80042de <HAL_TIM_IC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM9_Init+0xe2>
  {
    Error_Handler();
 8000e66:	f7ff febf 	bl	8000be8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2204      	movs	r2, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <MX_TIM9_Init+0x108>)
 8000e7a:	f003 fa30 	bl	80042de <HAL_TIM_IC_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM9_Init+0x100>
  {
    Error_Handler();
 8000e84:	f7ff feb0 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3738      	adds	r7, #56	@ 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200002e8 	.word	0x200002e8
 8000e94:	40014000 	.word	0x40014000

08000e98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM9)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f2c <HAL_TIM_Base_MspInit+0x94>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d133      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <HAL_TIM_Base_MspInit+0x98>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f30 <HAL_TIM_Base_MspInit+0x98>)
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <HAL_TIM_Base_MspInit+0x98>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_TIM_Base_MspInit+0x98>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <HAL_TIM_Base_MspInit+0x98>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_TIM_Base_MspInit+0x98>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000f02:	2303      	movs	r3, #3
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <HAL_TIM_Base_MspInit+0x9c>)
 8000f0e:	f001 f84f 	bl	8001fb0 <HAL_GPIO_Init>

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2018      	movs	r0, #24
 8000f18:	f001 f813 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000f1c:	2018      	movs	r0, #24
 8000f1e:	f001 f82c 	bl	8001f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	@ 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40014000 	.word	0x40014000
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000f3c:	f7ff ff1e 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	@ (8000f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f007 facd 	bl	8008504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fdad 	bl	8000ac8 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f70:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000f7c:	08008660 	.word	0x08008660
  ldr r2, =_sbss
 8000f80:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000f84:	20001620 	.word	0x20001620

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 ffb9 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	200f      	movs	r0, #15
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fe18 	bl	8000bf4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 ffd1 	bl	8001f96 <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 ff99 	bl	8001f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	@ (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000000 	.word	0x20000000
 8001028:	20000008 	.word	0x20000008
 800102c:	20000004 	.word	0x20000004

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <HAL_IncTick+0x1c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <HAL_IncTick+0x20>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a03      	ldr	r2, [pc, #12]	@ (8001050 <HAL_IncTick+0x20>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	20000008 	.word	0x20000008
 8001050:	20000330 	.word	0x20000330

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b02      	ldr	r3, [pc, #8]	@ (8001064 <HAL_GetTick+0x10>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	20000330 	.word	0x20000330

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff fff0 	bl	8001054 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <HAL_Delay+0x44>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffe0 	bl	8001054 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008

080010b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e033      	b.n	800112e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fab6 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d118      	bne.n	8001120 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010f6:	f023 0302 	bic.w	r3, r3, #2
 80010fa:	f043 0202 	orr.w	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f938 	bl	8001378 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	@ 0x40
 800111e:	e001      	b.n	8001124 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800114c:	2b01      	cmp	r3, #1
 800114e:	d101      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1c>
 8001150:	2302      	movs	r3, #2
 8001152:	e103      	b.n	800135c <HAL_ADC_ConfigChannel+0x224>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b09      	cmp	r3, #9
 8001162:	d925      	bls.n	80011b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68d9      	ldr	r1, [r3, #12]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	3b1e      	subs	r3, #30
 800117a:	2207      	movs	r2, #7
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43da      	mvns	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	400a      	ands	r2, r1
 8001188:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68d9      	ldr	r1, [r3, #12]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	4603      	mov	r3, r0
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4403      	add	r3, r0
 80011a2:	3b1e      	subs	r3, #30
 80011a4:	409a      	lsls	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	e022      	b.n	80011f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6919      	ldr	r1, [r3, #16]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	2207      	movs	r2, #7
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	400a      	ands	r2, r1
 80011d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6919      	ldr	r1, [r3, #16]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	4603      	mov	r3, r0
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4403      	add	r3, r0
 80011ec:	409a      	lsls	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d824      	bhi.n	8001248 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3b05      	subs	r3, #5
 8001210:	221f      	movs	r2, #31
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	400a      	ands	r2, r1
 800121e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3b05      	subs	r3, #5
 800123a:	fa00 f203 	lsl.w	r2, r0, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	635a      	str	r2, [r3, #52]	@ 0x34
 8001246:	e04c      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b0c      	cmp	r3, #12
 800124e:	d824      	bhi.n	800129a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3b23      	subs	r3, #35	@ 0x23
 8001262:	221f      	movs	r2, #31
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43da      	mvns	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	400a      	ands	r2, r1
 8001270:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	3b23      	subs	r3, #35	@ 0x23
 800128c:	fa00 f203 	lsl.w	r2, r0, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	631a      	str	r2, [r3, #48]	@ 0x30
 8001298:	e023      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	3b41      	subs	r3, #65	@ 0x41
 80012ac:	221f      	movs	r2, #31
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	400a      	ands	r2, r1
 80012ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	3b41      	subs	r3, #65	@ 0x41
 80012d6:	fa00 f203 	lsl.w	r2, r0, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a20      	ldr	r2, [pc, #128]	@ (8001368 <HAL_ADC_ConfigChannel+0x230>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d109      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x1c8>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b12      	cmp	r3, #18
 80012f2:	d105      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <HAL_ADC_ConfigChannel+0x234>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a1c      	ldr	r2, [pc, #112]	@ (800136c <HAL_ADC_ConfigChannel+0x234>)
 80012fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012fe:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a18      	ldr	r2, [pc, #96]	@ (8001368 <HAL_ADC_ConfigChannel+0x230>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d123      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x21a>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b10      	cmp	r3, #16
 8001310:	d003      	beq.n	800131a <HAL_ADC_ConfigChannel+0x1e2>
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b11      	cmp	r3, #17
 8001318:	d11b      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800131a:	4b14      	ldr	r3, [pc, #80]	@ (800136c <HAL_ADC_ConfigChannel+0x234>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4a13      	ldr	r2, [pc, #76]	@ (800136c <HAL_ADC_ConfigChannel+0x234>)
 8001320:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001324:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b10      	cmp	r3, #16
 800132c:	d111      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <HAL_ADC_ConfigChannel+0x238>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a10      	ldr	r2, [pc, #64]	@ (8001374 <HAL_ADC_ConfigChannel+0x23c>)
 8001334:	fba2 2303 	umull	r2, r3, r2, r3
 8001338:	0c9a      	lsrs	r2, r3, #18
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001344:	e002      	b.n	800134c <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3b01      	subs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f9      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40012000 	.word	0x40012000
 800136c:	40012300 	.word	0x40012300
 8001370:	20000000 	.word	0x20000000
 8001374:	431bde83 	.word	0x431bde83

08001378 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001380:	4b7e      	ldr	r3, [pc, #504]	@ (800157c <ADC_Init+0x204>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4a7d      	ldr	r2, [pc, #500]	@ (800157c <ADC_Init+0x204>)
 8001386:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800138a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800138c:	4b7b      	ldr	r3, [pc, #492]	@ (800157c <ADC_Init+0x204>)
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4979      	ldr	r1, [pc, #484]	@ (800157c <ADC_Init+0x204>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6859      	ldr	r1, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	021a      	lsls	r2, r3, #8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6899      	ldr	r1, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001406:	4a5e      	ldr	r2, [pc, #376]	@ (8001580 <ADC_Init+0x208>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d022      	beq.n	8001452 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800141a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6899      	ldr	r1, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800143c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6899      	ldr	r1, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	e00f      	b.n	8001472 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001470:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0202 	bic.w	r2, r2, #2
 8001480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6899      	ldr	r1, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7e1b      	ldrb	r3, [r3, #24]
 800148c:	005a      	lsls	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d027      	beq.n	80014f0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c4:	3b01      	subs	r3, #1
 80014c6:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80014ca:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	fa92 f2a2 	rbit	r2, r2
 80014d2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	fab2 f282 	clz	r2, r2
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	fa03 f102 	lsl.w	r1, r3, r2
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	e007      	b.n	8001500 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800150e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	3b01      	subs	r3, #1
 800151c:	051a      	lsls	r2, r3, #20
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6899      	ldr	r1, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001542:	025a      	lsls	r2, r3, #9
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800155a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6899      	ldr	r1, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	029a      	lsls	r2, r3, #10
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	609a      	str	r2, [r3, #8]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40012300 	.word	0x40012300
 8001580:	0f000001 	.word	0x0f000001

08001584 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e0ed      	b.n	8001772 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff f944 	bl	8000830 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b8:	f7ff fd4c 	bl	8001054 <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015be:	e012      	b.n	80015e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c0:	f7ff fd48 	bl	8001054 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b0a      	cmp	r3, #10
 80015cc:	d90b      	bls.n	80015e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2205      	movs	r2, #5
 80015de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0c5      	b.n	8001772 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0e5      	beq.n	80015c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0202 	bic.w	r2, r2, #2
 8001602:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001604:	f7ff fd26 	bl	8001054 <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800160a:	e012      	b.n	8001632 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800160c:	f7ff fd22 	bl	8001054 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b0a      	cmp	r3, #10
 8001618:	d90b      	bls.n	8001632 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2205      	movs	r2, #5
 800162a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e09f      	b.n	8001772 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1e5      	bne.n	800160c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7e1b      	ldrb	r3, [r3, #24]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d108      	bne.n	800165a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e007      	b.n	800166a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7e5b      	ldrb	r3, [r3, #25]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d108      	bne.n	8001684 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e007      	b.n	8001694 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001692:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7e9b      	ldrb	r3, [r3, #26]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d108      	bne.n	80016ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0220 	orr.w	r2, r2, #32
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e007      	b.n	80016be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0220 	bic.w	r2, r2, #32
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7edb      	ldrb	r3, [r3, #27]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d108      	bne.n	80016d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0210 	bic.w	r2, r2, #16
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e007      	b.n	80016e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0210 	orr.w	r2, r2, #16
 80016e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7f1b      	ldrb	r3, [r3, #28]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d108      	bne.n	8001702 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0208 	orr.w	r2, r2, #8
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e007      	b.n	8001712 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0208 	bic.w	r2, r2, #8
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7f5b      	ldrb	r3, [r3, #29]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d108      	bne.n	800172c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f042 0204 	orr.w	r2, r2, #4
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e007      	b.n	800173c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0204 	bic.w	r2, r2, #4
 800173a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	ea42 0103 	orr.w	r1, r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	1e5a      	subs	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001792:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001794:	7cfb      	ldrb	r3, [r7, #19]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d003      	beq.n	80017a2 <HAL_CAN_ConfigFilter+0x26>
 800179a:	7cfb      	ldrb	r3, [r7, #19]
 800179c:	2b02      	cmp	r3, #2
 800179e:	f040 80be 	bne.w	800191e <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80017a2:	4b65      	ldr	r3, [pc, #404]	@ (8001938 <HAL_CAN_ConfigFilter+0x1bc>)
 80017a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017bc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	431a      	orrs	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	2201      	movs	r2, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	401a      	ands	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d123      	bne.n	800184c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001826:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3248      	adds	r2, #72	@ 0x48
 800182c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001840:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001842:	6979      	ldr	r1, [r7, #20]
 8001844:	3348      	adds	r3, #72	@ 0x48
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d122      	bne.n	800189a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	431a      	orrs	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001874:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3248      	adds	r2, #72	@ 0x48
 800187a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800188e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001890:	6979      	ldr	r1, [r7, #20]
 8001892:	3348      	adds	r3, #72	@ 0x48
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	401a      	ands	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80018b4:	e007      	b.n	80018c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	431a      	orrs	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	401a      	ands	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80018e0:	e007      	b.n	80018f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	431a      	orrs	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001910:	f023 0201 	bic.w	r2, r3, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e006      	b.n	800192c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
  }
}
 800192c:	4618      	mov	r0, r3
 800192e:	371c      	adds	r7, #28
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40006400 	.word	0x40006400

0800193c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d07c      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d023      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f983 	bl	8001caa <HAL_CAN_TxMailbox0CompleteCallback>
 80019a4:	e016      	b.n	80019d4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b8:	e00c      	b.n	80019d4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80019cc:	e002      	b.n	80019d4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f986 	bl	8001ce0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d024      	beq.n	8001a28 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f962 	bl	8001cbc <HAL_CAN_TxMailbox1CompleteCallback>
 80019f8:	e016      	b.n	8001a28 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a0c:	e00c      	b.n	8001a28 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a20:	e002      	b.n	8001a28 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f965 	bl	8001cf2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d024      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f941 	bl	8001cce <HAL_CAN_TxMailbox2CompleteCallback>
 8001a4c:	e016      	b.n	8001a7c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a60:	e00c      	b.n	8001a7c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a74:	e002      	b.n	8001a7c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f944 	bl	8001d04 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00c      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2208      	movs	r2, #8
 8001aba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f933 	bl	8001d28 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f91b 	bl	8001d16 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00c      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d007      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2210      	movs	r2, #16
 8001b02:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f913 	bl	8001d4c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d009      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f8fb 	bl	8001d3a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f8fc 	bl	8001d5e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00b      	beq.n	8001b88 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2208      	movs	r2, #8
 8001b80:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f8f4 	bl	8001d70 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d07b      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d072      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d008      	beq.n	8001bb8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	f043 0302 	orr.w	r3, r3, #2
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d043      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d03e      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c0a:	2b60      	cmp	r3, #96	@ 0x60
 8001c0c:	d02b      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x32a>
 8001c0e:	2b60      	cmp	r3, #96	@ 0x60
 8001c10:	d82e      	bhi.n	8001c70 <HAL_CAN_IRQHandler+0x334>
 8001c12:	2b50      	cmp	r3, #80	@ 0x50
 8001c14:	d022      	beq.n	8001c5c <HAL_CAN_IRQHandler+0x320>
 8001c16:	2b50      	cmp	r3, #80	@ 0x50
 8001c18:	d82a      	bhi.n	8001c70 <HAL_CAN_IRQHandler+0x334>
 8001c1a:	2b40      	cmp	r3, #64	@ 0x40
 8001c1c:	d019      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x316>
 8001c1e:	2b40      	cmp	r3, #64	@ 0x40
 8001c20:	d826      	bhi.n	8001c70 <HAL_CAN_IRQHandler+0x334>
 8001c22:	2b30      	cmp	r3, #48	@ 0x30
 8001c24:	d010      	beq.n	8001c48 <HAL_CAN_IRQHandler+0x30c>
 8001c26:	2b30      	cmp	r3, #48	@ 0x30
 8001c28:	d822      	bhi.n	8001c70 <HAL_CAN_IRQHandler+0x334>
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d002      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x2f8>
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	d005      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c32:	e01d      	b.n	8001c70 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c3c:	e019      	b.n	8001c72 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	f043 0310 	orr.w	r3, r3, #16
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c46:	e014      	b.n	8001c72 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	f043 0320 	orr.w	r3, r3, #32
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c50:	e00f      	b.n	8001c72 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c5a:	e00a      	b.n	8001c72 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c64:	e005      	b.n	8001c72 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c6e:	e000      	b.n	8001c72 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c70:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699a      	ldr	r2, [r3, #24]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c80:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2204      	movs	r2, #4
 8001c88:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f870 	bl	8001d82 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	@ 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db0b      	blt.n	8001e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4906      	ldr	r1, [pc, #24]	@ (8001e2c <__NVIC_EnableIRQ+0x34>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	@ (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	@ (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	@ 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef8:	d301      	bcc.n	8001efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00f      	b.n	8001f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efe:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <SysTick_Config+0x40>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f06:	210f      	movs	r1, #15
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f7ff ff90 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f10:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <SysTick_Config+0x40>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f16:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <SysTick_Config+0x40>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff2d 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f54:	f7ff ff42 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff ff90 	bl	8001e84 <NVIC_EncodePriority>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff5f 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff35 	bl	8001df8 <__NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffa2 	bl	8001ee8 <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e16f      	b.n	80022a0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8161 	beq.w	800229a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_GPIO_Init+0x40>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 0201 	and.w	r2, r3, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b03      	cmp	r3, #3
 800205c:	d017      	beq.n	800208e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d123      	bne.n	80020e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	6939      	ldr	r1, [r7, #16]
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0203 	and.w	r2, r3, #3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80bb 	beq.w	800229a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	4b64      	ldr	r3, [pc, #400]	@ (80022bc <HAL_GPIO_Init+0x30c>)
 800212a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212c:	4a63      	ldr	r2, [pc, #396]	@ (80022bc <HAL_GPIO_Init+0x30c>)
 800212e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002132:	6453      	str	r3, [r2, #68]	@ 0x44
 8002134:	4b61      	ldr	r3, [pc, #388]	@ (80022bc <HAL_GPIO_Init+0x30c>)
 8002136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002140:	4a5f      	ldr	r2, [pc, #380]	@ (80022c0 <HAL_GPIO_Init+0x310>)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	3302      	adds	r3, #2
 8002148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a57      	ldr	r2, [pc, #348]	@ (80022c4 <HAL_GPIO_Init+0x314>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d031      	beq.n	80021d0 <HAL_GPIO_Init+0x220>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a56      	ldr	r2, [pc, #344]	@ (80022c8 <HAL_GPIO_Init+0x318>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d02b      	beq.n	80021cc <HAL_GPIO_Init+0x21c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a55      	ldr	r2, [pc, #340]	@ (80022cc <HAL_GPIO_Init+0x31c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d025      	beq.n	80021c8 <HAL_GPIO_Init+0x218>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a54      	ldr	r2, [pc, #336]	@ (80022d0 <HAL_GPIO_Init+0x320>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d01f      	beq.n	80021c4 <HAL_GPIO_Init+0x214>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a53      	ldr	r2, [pc, #332]	@ (80022d4 <HAL_GPIO_Init+0x324>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d019      	beq.n	80021c0 <HAL_GPIO_Init+0x210>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a52      	ldr	r2, [pc, #328]	@ (80022d8 <HAL_GPIO_Init+0x328>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d013      	beq.n	80021bc <HAL_GPIO_Init+0x20c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a51      	ldr	r2, [pc, #324]	@ (80022dc <HAL_GPIO_Init+0x32c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00d      	beq.n	80021b8 <HAL_GPIO_Init+0x208>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a50      	ldr	r2, [pc, #320]	@ (80022e0 <HAL_GPIO_Init+0x330>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d007      	beq.n	80021b4 <HAL_GPIO_Init+0x204>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a4f      	ldr	r2, [pc, #316]	@ (80022e4 <HAL_GPIO_Init+0x334>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d101      	bne.n	80021b0 <HAL_GPIO_Init+0x200>
 80021ac:	2308      	movs	r3, #8
 80021ae:	e010      	b.n	80021d2 <HAL_GPIO_Init+0x222>
 80021b0:	2309      	movs	r3, #9
 80021b2:	e00e      	b.n	80021d2 <HAL_GPIO_Init+0x222>
 80021b4:	2307      	movs	r3, #7
 80021b6:	e00c      	b.n	80021d2 <HAL_GPIO_Init+0x222>
 80021b8:	2306      	movs	r3, #6
 80021ba:	e00a      	b.n	80021d2 <HAL_GPIO_Init+0x222>
 80021bc:	2305      	movs	r3, #5
 80021be:	e008      	b.n	80021d2 <HAL_GPIO_Init+0x222>
 80021c0:	2304      	movs	r3, #4
 80021c2:	e006      	b.n	80021d2 <HAL_GPIO_Init+0x222>
 80021c4:	2303      	movs	r3, #3
 80021c6:	e004      	b.n	80021d2 <HAL_GPIO_Init+0x222>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e002      	b.n	80021d2 <HAL_GPIO_Init+0x222>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_GPIO_Init+0x222>
 80021d0:	2300      	movs	r3, #0
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	f002 0203 	and.w	r2, r2, #3
 80021d8:	0092      	lsls	r2, r2, #2
 80021da:	4093      	lsls	r3, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021e4:	4936      	ldr	r1, [pc, #216]	@ (80022c0 <HAL_GPIO_Init+0x310>)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f2:	4b3d      	ldr	r3, [pc, #244]	@ (80022e8 <HAL_GPIO_Init+0x338>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002216:	4a34      	ldr	r2, [pc, #208]	@ (80022e8 <HAL_GPIO_Init+0x338>)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800221c:	4b32      	ldr	r3, [pc, #200]	@ (80022e8 <HAL_GPIO_Init+0x338>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	43db      	mvns	r3, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002240:	4a29      	ldr	r2, [pc, #164]	@ (80022e8 <HAL_GPIO_Init+0x338>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002246:	4b28      	ldr	r3, [pc, #160]	@ (80022e8 <HAL_GPIO_Init+0x338>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800226a:	4a1f      	ldr	r2, [pc, #124]	@ (80022e8 <HAL_GPIO_Init+0x338>)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002270:	4b1d      	ldr	r3, [pc, #116]	@ (80022e8 <HAL_GPIO_Init+0x338>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002294:	4a14      	ldr	r2, [pc, #80]	@ (80022e8 <HAL_GPIO_Init+0x338>)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f47f ae88 	bne.w	8001fc0 <HAL_GPIO_Init+0x10>
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40020000 	.word	0x40020000
 80022c8:	40020400 	.word	0x40020400
 80022cc:	40020800 	.word	0x40020800
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40021400 	.word	0x40021400
 80022dc:	40021800 	.word	0x40021800
 80022e0:	40021c00 	.word	0x40021c00
 80022e4:	40022000 	.word	0x40022000
 80022e8:	40013c00 	.word	0x40013c00

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002308:	e003      	b.n	8002312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43d9      	mvns	r1, r3
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	400b      	ands	r3, r1
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af02      	add	r7, sp, #8
 8002354:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e101      	b.n	8002564 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f005 fcda 	bl	8007d34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2203      	movs	r2, #3
 8002384:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800238e:	d102      	bne.n	8002396 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f002 fd86 	bl	8004eac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7c1a      	ldrb	r2, [r3, #16]
 80023a8:	f88d 2000 	strb.w	r2, [sp]
 80023ac:	3304      	adds	r3, #4
 80023ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b0:	f002 fc71 	bl	8004c96 <USB_CoreInit>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0ce      	b.n	8002564 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f002 fd7d 	bl	8004ecc <USB_SetCurrentMode>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0bf      	b.n	8002564 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e04a      	b.n	8002480 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	3315      	adds	r3, #21
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	3314      	adds	r3, #20
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	b298      	uxth	r0, r3
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	332e      	adds	r3, #46	@ 0x2e
 8002426:	4602      	mov	r2, r0
 8002428:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	3318      	adds	r3, #24
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	331c      	adds	r3, #28
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002452:	7bfa      	ldrb	r2, [r7, #15]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	3320      	adds	r3, #32
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	3324      	adds	r3, #36	@ 0x24
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	3301      	adds	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	791b      	ldrb	r3, [r3, #4]
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	429a      	cmp	r2, r3
 8002488:	d3af      	bcc.n	80023ea <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e044      	b.n	800251a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	3301      	adds	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	791b      	ldrb	r3, [r3, #4]
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	429a      	cmp	r2, r3
 8002522:	d3b5      	bcc.n	8002490 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7c1a      	ldrb	r2, [r3, #16]
 800252c:	f88d 2000 	strb.w	r2, [sp]
 8002530:	3304      	adds	r3, #4
 8002532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002534:	f002 fd16 	bl	8004f64 <USB_DevInit>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e00c      	b.n	8002564 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f003 fd4d 	bl	8005ffc <USB_DevDisconnect>

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_PCD_Start+0x16>
 800257e:	2302      	movs	r3, #2
 8002580:	e012      	b.n	80025a8 <HAL_PCD_Start+0x3c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fc7c 	bl	8004e8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f003 fd0f 	bl	8005fbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b08d      	sub	sp, #52	@ 0x34
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fdc6 	bl	8006158 <USB_GetMode>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 847e 	bne.w	8002ed0 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fd2f 	bl	800603c <USB_ReadInterrupts>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8474 	beq.w	8002ece <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 fd1c 	bl	800603c <USB_ReadInterrupts>
 8002604:	4603      	mov	r3, r0
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b02      	cmp	r3, #2
 800260c:	d107      	bne.n	800261e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f002 0202 	and.w	r2, r2, #2
 800261c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f003 fd0a 	bl	800603c <USB_ReadInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b10      	cmp	r3, #16
 8002630:	d161      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0210 	bic.w	r2, r2, #16
 8002640:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f003 020f 	and.w	r2, r3, #15
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	3304      	adds	r3, #4
 8002660:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002668:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800266c:	d124      	bne.n	80026b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d035      	beq.n	80026e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002684:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	6a38      	ldr	r0, [r7, #32]
 800268e:	f003 fb47 	bl	8005d20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800269e:	441a      	add	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b0:	441a      	add	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	615a      	str	r2, [r3, #20]
 80026b6:	e016      	b.n	80026e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80026be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026c2:	d110      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026ca:	2208      	movs	r2, #8
 80026cc:	4619      	mov	r1, r3
 80026ce:	6a38      	ldr	r0, [r7, #32]
 80026d0:	f003 fb26 	bl	8005d20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026e0:	441a      	add	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0210 	orr.w	r2, r2, #16
 80026f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f003 fc9e 	bl	800603c <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002706:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800270a:	f040 80a7 	bne.w	800285c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fca2 	bl	8006060 <USB_ReadDevAllOutEpInterrupt>
 800271c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800271e:	e099      	b.n	8002854 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 808e 	beq.w	8002848 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f003 fcc4 	bl	80060c4 <USB_ReadDevOutEPInterrupt>
 800273c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00c      	beq.n	8002762 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002754:	461a      	mov	r2, r3
 8002756:	2301      	movs	r3, #1
 8002758:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800275a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fe93 	bl	8003488 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00c      	beq.n	8002786 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002778:	461a      	mov	r2, r3
 800277a:	2308      	movs	r3, #8
 800277c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800277e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 ff69 	bl	8003658 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	4413      	add	r3, r2
 8002798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800279c:	461a      	mov	r2, r3
 800279e:	2310      	movs	r3, #16
 80027a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d030      	beq.n	800280e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b4:	2b80      	cmp	r3, #128	@ 0x80
 80027b6:	d109      	bne.n	80027cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	3304      	adds	r3, #4
 80027e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	78db      	ldrb	r3, [r3, #3]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d108      	bne.n	80027fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	4619      	mov	r1, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f005 fbb0 	bl	8007f5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	4413      	add	r3, r2
 8002804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002808:	461a      	mov	r2, r3
 800280a:	2302      	movs	r3, #2
 800280c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	4413      	add	r3, r2
 8002820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002824:	461a      	mov	r2, r3
 8002826:	2320      	movs	r3, #32
 8002828:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d009      	beq.n	8002848 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002840:	461a      	mov	r2, r3
 8002842:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002846:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	3301      	adds	r3, #1
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800284e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002856:	2b00      	cmp	r3, #0
 8002858:	f47f af62 	bne.w	8002720 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f003 fbeb 	bl	800603c <USB_ReadInterrupts>
 8002866:	4603      	mov	r3, r0
 8002868:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800286c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002870:	f040 80db 	bne.w	8002a2a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f003 fc0a 	bl	8006092 <USB_ReadDevAllInEpInterrupt>
 800287e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002884:	e0cd      	b.n	8002a22 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80c2 	beq.w	8002a16 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f003 fc2e 	bl	80060fe <USB_ReadDevInEPInterrupt>
 80028a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d057      	beq.n	800295e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	2201      	movs	r2, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69f9      	ldr	r1, [r7, #28]
 80028ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028ce:	4013      	ands	r3, r2
 80028d0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028de:	461a      	mov	r2, r3
 80028e0:	2301      	movs	r3, #1
 80028e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	799b      	ldrb	r3, [r3, #6]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d132      	bne.n	8002952 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	3320      	adds	r3, #32
 80028fc:	6819      	ldr	r1, [r3, #0]
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4403      	add	r3, r0
 800290c:	331c      	adds	r3, #28
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4419      	add	r1, r3
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4403      	add	r3, r0
 8002920:	3320      	adds	r3, #32
 8002922:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	2b00      	cmp	r3, #0
 8002928:	d113      	bne.n	8002952 <HAL_PCD_IRQHandler+0x3a2>
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3324      	adds	r3, #36	@ 0x24
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d108      	bne.n	8002952 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800294a:	461a      	mov	r2, r3
 800294c:	2101      	movs	r1, #1
 800294e:	f003 fc33 	bl	80061b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4619      	mov	r1, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f005 fa7a 	bl	8007e52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002974:	461a      	mov	r2, r3
 8002976:	2308      	movs	r3, #8
 8002978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002990:	461a      	mov	r2, r3
 8002992:	2310      	movs	r3, #16
 8002994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029ac:	461a      	mov	r2, r3
 80029ae:	2340      	movs	r3, #64	@ 0x40
 80029b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d023      	beq.n	8002a04 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029be:	6a38      	ldr	r0, [r7, #32]
 80029c0:	f002 fc34 	bl	800522c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	3310      	adds	r3, #16
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	78db      	ldrb	r3, [r3, #3]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d108      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2200      	movs	r2, #0
 80029e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	4619      	mov	r1, r3
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f005 fac7 	bl	8007f80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029fe:	461a      	mov	r2, r3
 8002a00:	2302      	movs	r3, #2
 8002a02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fcac 	bl	800336e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	3301      	adds	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f47f af2e 	bne.w	8002886 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fb04 	bl	800603c <USB_ReadInterrupts>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a3e:	d114      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f005 fa73 	bl	8007f40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fae4 	bl	800603c <USB_ReadInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a7e:	d112      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d102      	bne.n	8002a96 <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f005 fa2f 	bl	8007ef4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002aa4:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fac6 	bl	800603c <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aba:	f040 80b7 	bne.w	8002c2c <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2110      	movs	r1, #16
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 fba7 	bl	800522c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ae2:	e046      	b.n	8002b72 <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002af0:	461a      	mov	r2, r3
 8002af2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002af6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b08:	0151      	lsls	r1, r2, #5
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	440a      	add	r2, r1
 8002b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b24:	461a      	mov	r2, r3
 8002b26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b2a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b3c:	0151      	lsls	r1, r2, #5
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	440a      	add	r2, r1
 8002b42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b5c:	0151      	lsls	r1, r2, #5
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	440a      	add	r2, r1
 8002b62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b6a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6e:	3301      	adds	r3, #1
 8002b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	791b      	ldrb	r3, [r3, #4]
 8002b76:	461a      	mov	r2, r3
 8002b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d3b2      	bcc.n	8002ae4 <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b8c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002b90:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7bdb      	ldrb	r3, [r3, #15]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_PCD_IRQHandler+0x618>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002baa:	f043 030b 	orr.w	r3, r3, #11
 8002bae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bc0:	f043 030b 	orr.w	r3, r3, #11
 8002bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bc6:	e015      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x644>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bda:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002bde:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bee:	f043 030b 	orr.w	r3, r3, #11
 8002bf2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c02:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c06:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c16:	461a      	mov	r2, r3
 8002c18:	f003 face 	bl	80061b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fa03 	bl	800603c <USB_ReadInterrupts>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c40:	d123      	bne.n	8002c8a <HAL_PCD_IRQHandler+0x6da>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 fa93 	bl	8006172 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 fb61 	bl	8005318 <USB_GetDevSpeed>
 8002c56:	4603      	mov	r3, r0
 8002c58:	461a      	mov	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681c      	ldr	r4, [r3, #0]
 8002c62:	f001 f99b 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8002c66:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f002 f86a 	bl	8004d48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f005 f914 	bl	8007ea2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 f9d4 	bl	800603c <USB_ReadInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f005 f8f1 	bl	8007e86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f002 0208 	and.w	r2, r2, #8
 8002cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 f9bf 	bl	800603c <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc4:	2b80      	cmp	r3, #128	@ 0x80
 8002cc6:	d123      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd8:	e014      	b.n	8002d04 <HAL_PCD_IRQHandler+0x754>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d105      	bne.n	8002cfe <HAL_PCD_IRQHandler+0x74e>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fb07 	bl	800330c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	3301      	adds	r3, #1
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	791b      	ldrb	r3, [r3, #4]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d3e4      	bcc.n	8002cda <HAL_PCD_IRQHandler+0x72a>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 f991 	bl	800603c <USB_ReadInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d24:	d13c      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x7f0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d26:	2301      	movs	r3, #1
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2a:	e02b      	b.n	8002d84 <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3318      	adds	r3, #24
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d115      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d52:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da12      	bge.n	8002d7e <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	3317      	adds	r3, #23
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fac7 	bl	800330c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	3301      	adds	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	791b      	ldrb	r3, [r3, #4]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d3cd      	bcc.n	8002d2c <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 f949 	bl	800603c <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002db0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002db4:	d156      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002db6:	2301      	movs	r3, #1
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dba:	e045      	b.n	8002e48 <HAL_PCD_IRQHandler+0x898>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d12e      	bne.n	8002e42 <HAL_PCD_IRQHandler+0x892>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002de4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da2b      	bge.n	8002e42 <HAL_PCD_IRQHandler+0x892>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002df6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d121      	bne.n	8002e42 <HAL_PCD_IRQHandler+0x892>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <HAL_PCD_IRQHandler+0x892>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e3e:	6053      	str	r3, [r2, #4]
            break;
 8002e40:	e008      	b.n	8002e54 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	3301      	adds	r3, #1
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	791b      	ldrb	r3, [r3, #4]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d3b3      	bcc.n	8002dbc <HAL_PCD_IRQHandler+0x80c>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 f8e7 	bl	800603c <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e78:	d10a      	bne.n	8002e90 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f005 f892 	bl	8007fa4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 f8d1 	bl	800603c <USB_ReadInterrupts>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d115      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f005 f882 	bl	8007fc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	e000      	b.n	8002ed0 <HAL_PCD_IRQHandler+0x920>
      return;
 8002ece:	bf00      	nop
    }
  }
}
 8002ed0:	3734      	adds	r7, #52	@ 0x34
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}

08002ed6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_PCD_SetAddress+0x1a>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e012      	b.n	8002f16 <HAL_PCD_SetAddress+0x40>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 f833 	bl	8005f72 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	4608      	mov	r0, r1
 8002f28:	4611      	mov	r1, r2
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	70fb      	strb	r3, [r7, #3]
 8002f30:	460b      	mov	r3, r1
 8002f32:	803b      	strh	r3, [r7, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	da0f      	bge.n	8002f64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	f003 020f 	and.w	r2, r3, #15
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	3310      	adds	r3, #16
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	3304      	adds	r3, #4
 8002f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	705a      	strb	r2, [r3, #1]
 8002f62:	e00f      	b.n	8002f84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	f003 020f 	and.w	r2, r3, #15
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f90:	883a      	ldrh	r2, [r7, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	78ba      	ldrb	r2, [r7, #2]
 8002f9a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	785b      	ldrb	r3, [r3, #1]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d004      	beq.n	8002fae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fae:	78bb      	ldrb	r3, [r7, #2]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d102      	bne.n	8002fba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_PCD_EP_Open+0xaa>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e00e      	b.n	8002fe6 <HAL_PCD_EP_Open+0xc8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68f9      	ldr	r1, [r7, #12]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 f9c2 	bl	8005360 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002fe4:	7afb      	ldrb	r3, [r7, #11]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	da0f      	bge.n	8003022 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 020f 	and.w	r2, r3, #15
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	3310      	adds	r3, #16
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	3304      	adds	r3, #4
 8003018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	705a      	strb	r2, [r3, #1]
 8003020:	e00f      	b.n	8003042 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	f003 020f 	and.w	r2, r3, #15
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	3304      	adds	r3, #4
 800303a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_PCD_EP_Close+0x6e>
 8003058:	2302      	movs	r3, #2
 800305a:	e00e      	b.n	800307a <HAL_PCD_EP_Close+0x8c>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68f9      	ldr	r1, [r7, #12]
 800306a:	4618      	mov	r0, r3
 800306c:	f002 f9fe 	bl	800546c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b086      	sub	sp, #24
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	460b      	mov	r3, r1
 8003090:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003092:	7afb      	ldrb	r3, [r7, #11]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	3304      	adds	r3, #4
 80030aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2200      	movs	r2, #0
 80030c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c4:	7afb      	ldrb	r3, [r7, #11]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	799b      	ldrb	r3, [r3, #6]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	799b      	ldrb	r3, [r3, #6]
 80030e6:	461a      	mov	r2, r3
 80030e8:	6979      	ldr	r1, [r7, #20]
 80030ea:	f002 fa9b 	bl	8005624 <USB_EPStartXfer>

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	f003 020f 	and.w	r2, r3, #15
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	460b      	mov	r3, r1
 8003134:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003136:	7afb      	ldrb	r3, [r7, #11]
 8003138:	f003 020f 	and.w	r2, r3, #15
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	3310      	adds	r3, #16
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4413      	add	r3, r2
 800314a:	3304      	adds	r3, #4
 800314c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2200      	movs	r2, #0
 800315e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2201      	movs	r2, #1
 8003164:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003166:	7afb      	ldrb	r3, [r7, #11]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	b2da      	uxtb	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	799b      	ldrb	r3, [r3, #6]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	799b      	ldrb	r3, [r3, #6]
 8003188:	461a      	mov	r2, r3
 800318a:	6979      	ldr	r1, [r7, #20]
 800318c:	f002 fa4a 	bl	8005624 <USB_EPStartXfer>

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	7912      	ldrb	r2, [r2, #4]
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e04f      	b.n	8003258 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	da0f      	bge.n	80031e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	f003 020f 	and.w	r2, r3, #15
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	3310      	adds	r3, #16
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	705a      	strb	r2, [r3, #1]
 80031de:	e00d      	b.n	80031fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_PCD_EP_SetStall+0x82>
 8003218:	2302      	movs	r3, #2
 800321a:	e01d      	b.n	8003258 <HAL_PCD_EP_SetStall+0xbe>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68f9      	ldr	r1, [r7, #12]
 800322a:	4618      	mov	r0, r3
 800322c:	f002 fdcf 	bl	8005dce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7999      	ldrb	r1, [r3, #6]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003248:	461a      	mov	r2, r3
 800324a:	f002 ffb5 	bl	80061b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	7912      	ldrb	r2, [r2, #4]
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e042      	b.n	8003304 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800327e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003282:	2b00      	cmp	r3, #0
 8003284:	da0f      	bge.n	80032a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	3310      	adds	r3, #16
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	3304      	adds	r3, #4
 800329c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	705a      	strb	r2, [r3, #1]
 80032a4:	e00f      	b.n	80032c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	f003 020f 	and.w	r2, r3, #15
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	4413      	add	r3, r2
 80032bc:	3304      	adds	r3, #4
 80032be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_PCD_EP_ClrStall+0x86>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e00e      	b.n	8003304 <HAL_PCD_EP_ClrStall+0xa4>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68f9      	ldr	r1, [r7, #12]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f002 fdd7 	bl	8005ea8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800331c:	2b00      	cmp	r3, #0
 800331e:	da0c      	bge.n	800333a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 020f 	and.w	r2, r3, #15
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	3310      	adds	r3, #16
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	3304      	adds	r3, #4
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e00c      	b.n	8003354 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	f003 020f 	and.w	r2, r3, #15
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	3304      	adds	r3, #4
 8003352:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68f9      	ldr	r1, [r7, #12]
 800335a:	4618      	mov	r0, r3
 800335c:	f002 fbfa 	bl	8005b54 <USB_EPStopXfer>
 8003360:	4603      	mov	r3, r0
 8003362:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003364:	7afb      	ldrb	r3, [r7, #11]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b08a      	sub	sp, #40	@ 0x28
 8003372:	af02      	add	r7, sp, #8
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	3310      	adds	r3, #16
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	3304      	adds	r3, #4
 8003394:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d901      	bls.n	80033a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e06b      	b.n	800347e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d902      	bls.n	80033c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3303      	adds	r3, #3
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033ca:	e02a      	b.n	8003422 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d902      	bls.n	80033e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3303      	adds	r3, #3
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	68d9      	ldr	r1, [r3, #12]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	4603      	mov	r3, r0
 8003404:	6978      	ldr	r0, [r7, #20]
 8003406:	f002 fc4e 	bl	8005ca6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	441a      	add	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	441a      	add	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	429a      	cmp	r2, r3
 8003436:	d809      	bhi.n	800344c <PCD_WriteEmptyTxFifo+0xde>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003440:	429a      	cmp	r2, r3
 8003442:	d203      	bcs.n	800344c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1bf      	bne.n	80033cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	d811      	bhi.n	800347c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	2201      	movs	r2, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800346c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	43db      	mvns	r3, r3
 8003472:	6939      	ldr	r1, [r7, #16]
 8003474:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003478:	4013      	ands	r3, r2
 800347a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	333c      	adds	r3, #60	@ 0x3c
 80034a0:	3304      	adds	r3, #4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	799b      	ldrb	r3, [r3, #6]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d17b      	bne.n	80035b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d015      	beq.n	80034f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	4a61      	ldr	r2, [pc, #388]	@ (8003650 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	f240 80b9 	bls.w	8003644 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80b3 	beq.w	8003644 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ea:	461a      	mov	r2, r3
 80034ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034f0:	6093      	str	r3, [r2, #8]
 80034f2:	e0a7      	b.n	8003644 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800350a:	461a      	mov	r2, r3
 800350c:	2320      	movs	r3, #32
 800350e:	6093      	str	r3, [r2, #8]
 8003510:	e098      	b.n	8003644 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	f040 8093 	bne.w	8003644 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	4a4b      	ldr	r2, [pc, #300]	@ (8003650 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d90f      	bls.n	8003546 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800353c:	461a      	mov	r2, r3
 800353e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003542:	6093      	str	r3, [r2, #8]
 8003544:	e07e      	b.n	8003644 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	3304      	adds	r3, #4
 800355a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1a      	ldr	r2, [r3, #32]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	0159      	lsls	r1, r3, #5
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	440b      	add	r3, r1
 8003568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003572:	1ad2      	subs	r2, r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d114      	bne.n	80035a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003590:	461a      	mov	r2, r3
 8003592:	2101      	movs	r1, #1
 8003594:	f002 fe10 	bl	80061b8 <USB_EP0_OutStart>
 8003598:	e006      	b.n	80035a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	441a      	add	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f004 fc34 	bl	8007e1c <HAL_PCD_DataOutStageCallback>
 80035b4:	e046      	b.n	8003644 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	4a26      	ldr	r2, [pc, #152]	@ (8003654 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d124      	bne.n	8003608 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d4:	461a      	mov	r2, r3
 80035d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035da:	6093      	str	r3, [r2, #8]
 80035dc:	e032      	b.n	8003644 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f4:	461a      	mov	r2, r3
 80035f6:	2320      	movs	r3, #32
 80035f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	4619      	mov	r1, r3
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f004 fc0b 	bl	8007e1c <HAL_PCD_DataOutStageCallback>
 8003606:	e01d      	b.n	8003644 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d114      	bne.n	8003638 <PCD_EP_OutXfrComplete_int+0x1b0>
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d108      	bne.n	8003638 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003630:	461a      	mov	r2, r3
 8003632:	2100      	movs	r1, #0
 8003634:	f002 fdc0 	bl	80061b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	4619      	mov	r1, r3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f004 fbec 	bl	8007e1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	4f54300a 	.word	0x4f54300a
 8003654:	4f54310a 	.word	0x4f54310a

08003658 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	333c      	adds	r3, #60	@ 0x3c
 8003670:	3304      	adds	r3, #4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4a15      	ldr	r2, [pc, #84]	@ (80036e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d90e      	bls.n	80036ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a4:	461a      	mov	r2, r3
 80036a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f004 fba3 	bl	8007df8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a0a      	ldr	r2, [pc, #40]	@ (80036e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d90c      	bls.n	80036d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	799b      	ldrb	r3, [r3, #6]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d108      	bne.n	80036d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036cc:	461a      	mov	r2, r3
 80036ce:	2101      	movs	r1, #1
 80036d0:	f002 fd72 	bl	80061b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	4f54300a 	.word	0x4f54300a

080036e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
 80036f0:	4613      	mov	r3, r2
 80036f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d107      	bne.n	8003712 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003702:	883b      	ldrh	r3, [r7, #0]
 8003704:	0419      	lsls	r1, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	430a      	orrs	r2, r1
 800370e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003710:	e028      	b.n	8003764 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	4413      	add	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e00d      	b.n	8003742 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	3340      	adds	r3, #64	@ 0x40
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	0c1b      	lsrs	r3, r3, #16
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4413      	add	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	3301      	adds	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	3b01      	subs	r3, #1
 8003748:	429a      	cmp	r2, r3
 800374a:	d3ec      	bcc.n	8003726 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800374c:	883b      	ldrh	r3, [r7, #0]
 800374e:	0418      	lsls	r0, r3, #16
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6819      	ldr	r1, [r3, #0]
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	3b01      	subs	r3, #1
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	4302      	orrs	r2, r0
 800375c:	3340      	adds	r3, #64	@ 0x40
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	887a      	ldrh	r2, [r7, #2]
 8003782:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	@ 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e23b      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d050      	beq.n	8003850 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d00c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ba:	4b9b      	ldr	r3, [pc, #620]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d112      	bne.n	80037ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c6:	4b98      	ldr	r3, [pc, #608]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037d2:	d10b      	bne.n	80037ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	4b94      	ldr	r3, [pc, #592]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d036      	beq.n	800384e <HAL_RCC_OscConfig+0xbe>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d132      	bne.n	800384e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e216      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	4b8e      	ldr	r3, [pc, #568]	@ (8003a2c <HAL_RCC_OscConfig+0x29c>)
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d013      	beq.n	8003826 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fe:	f7fd fc29 	bl	8001054 <HAL_GetTick>
 8003802:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003806:	f7fd fc25 	bl	8001054 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b64      	cmp	r3, #100	@ 0x64
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e200      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003818:	4b83      	ldr	r3, [pc, #524]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x76>
 8003824:	e014      	b.n	8003850 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003826:	f7fd fc15 	bl	8001054 <HAL_GetTick>
 800382a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800382e:	f7fd fc11 	bl	8001054 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b64      	cmp	r3, #100	@ 0x64
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e1ec      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003840:	4b79      	ldr	r3, [pc, #484]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f0      	bne.n	800382e <HAL_RCC_OscConfig+0x9e>
 800384c:	e000      	b.n	8003850 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d077      	beq.n	800394c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800385c:	4b72      	ldr	r3, [pc, #456]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003868:	4b6f      	ldr	r3, [pc, #444]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003870:	2b08      	cmp	r3, #8
 8003872:	d126      	bne.n	80038c2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003874:	4b6c      	ldr	r3, [pc, #432]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d120      	bne.n	80038c2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003880:	4b69      	ldr	r3, [pc, #420]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_OscConfig+0x108>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d001      	beq.n	8003898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e1c0      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b63      	ldr	r3, [pc, #396]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	21f8      	movs	r1, #248	@ 0xf8
 80038a6:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	68f9      	ldr	r1, [r7, #12]
 80038aa:	fa91 f1a1 	rbit	r1, r1
 80038ae:	6139      	str	r1, [r7, #16]
  return result;
 80038b0:	6939      	ldr	r1, [r7, #16]
 80038b2:	fab1 f181 	clz	r1, r1
 80038b6:	b2c9      	uxtb	r1, r1
 80038b8:	408b      	lsls	r3, r1
 80038ba:	495b      	ldr	r1, [pc, #364]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c0:	e044      	b.n	800394c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d02a      	beq.n	8003920 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ca:	4b59      	ldr	r3, [pc, #356]	@ (8003a30 <HAL_RCC_OscConfig+0x2a0>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fd fbc0 	bl	8001054 <HAL_GetTick>
 80038d4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d8:	f7fd fbbc 	bl	8001054 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e197      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	21f8      	movs	r1, #248	@ 0xf8
 8003904:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	6979      	ldr	r1, [r7, #20]
 8003908:	fa91 f1a1 	rbit	r1, r1
 800390c:	61b9      	str	r1, [r7, #24]
  return result;
 800390e:	69b9      	ldr	r1, [r7, #24]
 8003910:	fab1 f181 	clz	r1, r1
 8003914:	b2c9      	uxtb	r1, r1
 8003916:	408b      	lsls	r3, r1
 8003918:	4943      	ldr	r1, [pc, #268]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]
 800391e:	e015      	b.n	800394c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003920:	4b43      	ldr	r3, [pc, #268]	@ (8003a30 <HAL_RCC_OscConfig+0x2a0>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fd fb95 	bl	8001054 <HAL_GetTick>
 800392a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392e:	f7fd fb91 	bl	8001054 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e16c      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003940:	4b39      	ldr	r3, [pc, #228]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d030      	beq.n	80039ba <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d016      	beq.n	800398e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003960:	4b34      	ldr	r3, [pc, #208]	@ (8003a34 <HAL_RCC_OscConfig+0x2a4>)
 8003962:	2201      	movs	r2, #1
 8003964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003966:	f7fd fb75 	bl	8001054 <HAL_GetTick>
 800396a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396e:	f7fd fb71 	bl	8001054 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e14c      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003980:	4b29      	ldr	r3, [pc, #164]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 8003982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x1de>
 800398c:	e015      	b.n	80039ba <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398e:	4b29      	ldr	r3, [pc, #164]	@ (8003a34 <HAL_RCC_OscConfig+0x2a4>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003994:	f7fd fb5e 	bl	8001054 <HAL_GetTick>
 8003998:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399c:	f7fd fb5a 	bl	8001054 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e135      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 80039b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8087 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ce:	4b16      	ldr	r3, [pc, #88]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d110      	bne.n	80039fc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	4b12      	ldr	r3, [pc, #72]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a11      	ldr	r2, [pc, #68]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003a28 <HAL_RCC_OscConfig+0x298>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a38 <HAL_RCC_OscConfig+0x2a8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0d      	ldr	r2, [pc, #52]	@ (8003a38 <HAL_RCC_OscConfig+0x2a8>)
 8003a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a06:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a08:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <HAL_RCC_OscConfig+0x2a8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d122      	bne.n	8003a5a <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a14:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <HAL_RCC_OscConfig+0x2a8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a07      	ldr	r2, [pc, #28]	@ (8003a38 <HAL_RCC_OscConfig+0x2a8>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a20:	f7fd fb18 	bl	8001054 <HAL_GetTick>
 8003a24:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	e012      	b.n	8003a4e <HAL_RCC_OscConfig+0x2be>
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40023802 	.word	0x40023802
 8003a30:	42470000 	.word	0x42470000
 8003a34:	42470e80 	.word	0x42470e80
 8003a38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fd fb0a 	bl	8001054 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0e5      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4e:	4b75      	ldr	r3, [pc, #468]	@ (8003c24 <HAL_RCC_OscConfig+0x494>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	4b72      	ldr	r3, [pc, #456]	@ (8003c28 <HAL_RCC_OscConfig+0x498>)
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d015      	beq.n	8003a98 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6c:	f7fd faf2 	bl	8001054 <HAL_GetTick>
 8003a70:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fd faee 	bl	8001054 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e0c7      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8a:	4b68      	ldr	r3, [pc, #416]	@ (8003c2c <HAL_RCC_OscConfig+0x49c>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0ee      	beq.n	8003a74 <HAL_RCC_OscConfig+0x2e4>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a98:	f7fd fadc 	bl	8001054 <HAL_GetTick>
 8003a9c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fd fad8 	bl	8001054 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e0b1      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c2c <HAL_RCC_OscConfig+0x49c>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1ee      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d105      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aca:	4b58      	ldr	r3, [pc, #352]	@ (8003c2c <HAL_RCC_OscConfig+0x49c>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	4a57      	ldr	r2, [pc, #348]	@ (8003c2c <HAL_RCC_OscConfig+0x49c>)
 8003ad0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 809c 	beq.w	8003c18 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ae0:	4b52      	ldr	r3, [pc, #328]	@ (8003c2c <HAL_RCC_OscConfig+0x49c>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d061      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d146      	bne.n	8003b82 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af4:	4b4e      	ldr	r3, [pc, #312]	@ (8003c30 <HAL_RCC_OscConfig+0x4a0>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afa:	f7fd faab 	bl	8001054 <HAL_GetTick>
 8003afe:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b02:	f7fd faa7 	bl	8001054 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b64      	cmp	r3, #100	@ 0x64
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e082      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b14:	4b45      	ldr	r3, [pc, #276]	@ (8003c2c <HAL_RCC_OscConfig+0x49c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f0      	bne.n	8003b02 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b20:	4b42      	ldr	r3, [pc, #264]	@ (8003c2c <HAL_RCC_OscConfig+0x49c>)
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	4b43      	ldr	r3, [pc, #268]	@ (8003c34 <HAL_RCC_OscConfig+0x4a4>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	69d1      	ldr	r1, [r2, #28]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6a12      	ldr	r2, [r2, #32]
 8003b30:	4311      	orrs	r1, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b36:	0192      	lsls	r2, r2, #6
 8003b38:	4311      	orrs	r1, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b3e:	0612      	lsls	r2, r2, #24
 8003b40:	4311      	orrs	r1, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b46:	0852      	lsrs	r2, r2, #1
 8003b48:	3a01      	subs	r2, #1
 8003b4a:	0412      	lsls	r2, r2, #16
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	4937      	ldr	r1, [pc, #220]	@ (8003c2c <HAL_RCC_OscConfig+0x49c>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b54:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <HAL_RCC_OscConfig+0x4a0>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fd fa7b 	bl	8001054 <HAL_GetTick>
 8003b5e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fd fa77 	bl	8001054 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b64      	cmp	r3, #100	@ 0x64
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e052      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b74:	4b2d      	ldr	r3, [pc, #180]	@ (8003c2c <HAL_RCC_OscConfig+0x49c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x3d2>
 8003b80:	e04a      	b.n	8003c18 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b82:	4b2b      	ldr	r3, [pc, #172]	@ (8003c30 <HAL_RCC_OscConfig+0x4a0>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fd fa64 	bl	8001054 <HAL_GetTick>
 8003b8c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fd fa60 	bl	8001054 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	@ 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e03b      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba2:	4b22      	ldr	r3, [pc, #136]	@ (8003c2c <HAL_RCC_OscConfig+0x49c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x400>
 8003bae:	e033      	b.n	8003c18 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e02e      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c2c <HAL_RCC_OscConfig+0x49c>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d121      	bne.n	8003c14 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d11a      	bne.n	8003c14 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003be4:	4013      	ands	r3, r2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bea:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d111      	bne.n	8003c14 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d107      	bne.n	8003c14 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3728      	adds	r7, #40	@ 0x28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40007000 	.word	0x40007000
 8003c28:	40023870 	.word	0x40023870
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	42470060 	.word	0x42470060
 8003c34:	f0bc8000 	.word	0xf0bc8000

08003c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0d2      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b6b      	ldr	r3, [pc, #428]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d90c      	bls.n	8003c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b68      	ldr	r3, [pc, #416]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b66      	ldr	r3, [pc, #408]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0be      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a5b      	ldr	r2, [pc, #364]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003ca4:	4b56      	ldr	r3, [pc, #344]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a55      	ldr	r2, [pc, #340]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003caa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb0:	4b53      	ldr	r3, [pc, #332]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4950      	ldr	r1, [pc, #320]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d040      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d115      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e085      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cee:	4b44      	ldr	r3, [pc, #272]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e079      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfe:	4b40      	ldr	r3, [pc, #256]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e071      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f023 0203 	bic.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4939      	ldr	r1, [pc, #228]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d20:	f7fd f998 	bl	8001054 <HAL_GetTick>
 8003d24:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d28:	f7fd f994 	bl	8001054 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e059      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	4b30      	ldr	r3, [pc, #192]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 020c 	and.w	r2, r3, #12
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d1eb      	bne.n	8003d28 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d50:	4b2a      	ldr	r3, [pc, #168]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d20c      	bcs.n	8003d78 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b27      	ldr	r3, [pc, #156]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	4b25      	ldr	r3, [pc, #148]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e03c      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d84:	4b1e      	ldr	r3, [pc, #120]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	491b      	ldr	r1, [pc, #108]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003da2:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4913      	ldr	r1, [pc, #76]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003db6:	f000 f82b 	bl	8003e10 <HAL_RCC_GetSysClockFreq>
 8003dba:	4601      	mov	r1, r0
 8003dbc:	4b10      	ldr	r3, [pc, #64]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dc4:	22f0      	movs	r2, #240	@ 0xf0
 8003dc6:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	fa92 f2a2 	rbit	r2, r2
 8003dce:	613a      	str	r2, [r7, #16]
  return result;
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	fab2 f282 	clz	r2, r2
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	40d3      	lsrs	r3, r2
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <HAL_RCC_ClockConfig+0x1cc>)
 8003ddc:	5cd3      	ldrb	r3, [r2, r3]
 8003dde:	fa21 f303 	lsr.w	r3, r1, r3
 8003de2:	4a09      	ldr	r2, [pc, #36]	@ (8003e08 <HAL_RCC_ClockConfig+0x1d0>)
 8003de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003de6:	4b09      	ldr	r3, [pc, #36]	@ (8003e0c <HAL_RCC_ClockConfig+0x1d4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fd f8f0 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023c00 	.word	0x40023c00
 8003e00:	40023800 	.word	0x40023800
 8003e04:	08008640 	.word	0x08008640
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	20000004 	.word	0x20000004

08003e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e14:	b090      	sub	sp, #64	@ 0x40
 8003e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e20:	2300      	movs	r3, #0
 8003e22:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e28:	4b59      	ldr	r3, [pc, #356]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d00d      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x40>
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	f200 80a2 	bhi.w	8003f7e <HAL_RCC_GetSysClockFreq+0x16e>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x34>
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d003      	beq.n	8003e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e42:	e09c      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e44:	4b53      	ldr	r3, [pc, #332]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e46:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003e48:	e09c      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e4a:	4b53      	ldr	r3, [pc, #332]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e4e:	e099      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e50:	4b4f      	ldr	r3, [pc, #316]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e58:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e5a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d027      	beq.n	8003eb6 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e66:	4b4a      	ldr	r3, [pc, #296]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	099b      	lsrs	r3, r3, #6
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	623b      	str	r3, [r7, #32]
 8003e70:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4b47      	ldr	r3, [pc, #284]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e7c:	fb03 f201 	mul.w	r2, r3, r1
 8003e80:	2300      	movs	r3, #0
 8003e82:	fb00 f303 	mul.w	r3, r0, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	4a43      	ldr	r2, [pc, #268]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e8a:	fba0 2102 	umull	r2, r1, r0, r2
 8003e8e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003e90:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e94:	4413      	add	r3, r2
 8003e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	61fa      	str	r2, [r7, #28]
 8003ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ea8:	f7fc f98c 	bl	80001c4 <__aeabi_uldivmod>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eb4:	e055      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb6:	4b36      	ldr	r3, [pc, #216]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	099b      	lsrs	r3, r3, #6
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	617a      	str	r2, [r7, #20]
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ec8:	f04f 0b00 	mov.w	fp, #0
 8003ecc:	4652      	mov	r2, sl
 8003ece:	465b      	mov	r3, fp
 8003ed0:	f04f 0000 	mov.w	r0, #0
 8003ed4:	f04f 0100 	mov.w	r1, #0
 8003ed8:	0159      	lsls	r1, r3, #5
 8003eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ede:	0150      	lsls	r0, r2, #5
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	ebb2 080a 	subs.w	r8, r2, sl
 8003ee8:	eb63 090b 	sbc.w	r9, r3, fp
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ef8:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003efc:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f00:	ebb2 0408 	subs.w	r4, r2, r8
 8003f04:	eb63 0509 	sbc.w	r5, r3, r9
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	00eb      	lsls	r3, r5, #3
 8003f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f16:	00e2      	lsls	r2, r4, #3
 8003f18:	4614      	mov	r4, r2
 8003f1a:	461d      	mov	r5, r3
 8003f1c:	eb14 030a 	adds.w	r3, r4, sl
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	eb45 030b 	adc.w	r3, r5, fp
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f34:	4629      	mov	r1, r5
 8003f36:	028b      	lsls	r3, r1, #10
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	4604      	mov	r4, r0
 8003f3e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003f42:	4601      	mov	r1, r0
 8003f44:	028a      	lsls	r2, r1, #10
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	60fa      	str	r2, [r7, #12]
 8003f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f56:	f7fc f935 	bl	80001c4 <__aeabi_uldivmod>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4613      	mov	r3, r2
 8003f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f62:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	0c1b      	lsrs	r3, r3, #16
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003f72:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f7c:	e002      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f7e:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3740      	adds	r7, #64	@ 0x40
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f90:	40023800 	.word	0x40023800
 8003f94:	00f42400 	.word	0x00f42400
 8003f98:	017d7840 	.word	0x017d7840

08003f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa0:	4b02      	ldr	r3, [pc, #8]	@ (8003fac <HAL_RCC_GetHCLKFreq+0x10>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr
 8003fac:	20000000 	.word	0x20000000

08003fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e041      	b.n	8004046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fc ff5e 	bl	8000e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f000 fb48 	bl	8004684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e041      	b.n	80040e4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f839 	bl	80040ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3304      	adds	r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f000 faf9 	bl	8004684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr

080040fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d020      	beq.n	8004162 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01b      	beq.n	8004162 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f06f 0202 	mvn.w	r2, #2
 8004132:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fa7f 	bl	800464c <HAL_TIM_IC_CaptureCallback>
 800414e:	e005      	b.n	800415c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fa72 	bl	800463a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa81 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d020      	beq.n	80041ae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01b      	beq.n	80041ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f06f 0204 	mvn.w	r2, #4
 800417e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fa59 	bl	800464c <HAL_TIM_IC_CaptureCallback>
 800419a:	e005      	b.n	80041a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fa4c 	bl	800463a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fa5b 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d020      	beq.n	80041fa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01b      	beq.n	80041fa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f06f 0208 	mvn.w	r2, #8
 80041ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2204      	movs	r2, #4
 80041d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fa33 	bl	800464c <HAL_TIM_IC_CaptureCallback>
 80041e6:	e005      	b.n	80041f4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fa26 	bl	800463a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa35 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	d020      	beq.n	8004246 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01b      	beq.n	8004246 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f06f 0210 	mvn.w	r2, #16
 8004216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2208      	movs	r2, #8
 800421c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fa0d 	bl	800464c <HAL_TIM_IC_CaptureCallback>
 8004232:	e005      	b.n	8004240 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fa00 	bl	800463a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fa0f 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00c      	beq.n	800426a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f06f 0201 	mvn.w	r2, #1
 8004262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f9df 	bl	8004628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00c      	beq.n	800428e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fcfb 	bl	8004c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00c      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f9df 	bl	8004670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00c      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 0220 	mvn.w	r2, #32
 80042ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fcce 	bl	8004c72 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIM_IC_ConfigChannel+0x1e>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e088      	b.n	800440e <HAL_TIM_IC_ConfigChannel+0x130>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d11b      	bne.n	8004342 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800431a:	f000 faef 	bl	80048fc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699a      	ldr	r2, [r3, #24]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 020c 	bic.w	r2, r2, #12
 800432c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6999      	ldr	r1, [r3, #24]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	619a      	str	r2, [r3, #24]
 8004340:	e060      	b.n	8004404 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b04      	cmp	r3, #4
 8004346:	d11c      	bne.n	8004382 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004358:	f000 fb70 	bl	8004a3c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800436a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6999      	ldr	r1, [r3, #24]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	021a      	lsls	r2, r3, #8
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	619a      	str	r2, [r3, #24]
 8004380:	e040      	b.n	8004404 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b08      	cmp	r3, #8
 8004386:	d11b      	bne.n	80043c0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004398:	f000 fbbb 	bl	8004b12 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 020c 	bic.w	r2, r2, #12
 80043aa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69d9      	ldr	r1, [r3, #28]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	61da      	str	r2, [r3, #28]
 80043be:	e021      	b.n	8004404 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d11c      	bne.n	8004400 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80043d6:	f000 fbd7 	bl	8004b88 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80043e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69d9      	ldr	r1, [r3, #28]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	021a      	lsls	r2, r3, #8
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	61da      	str	r2, [r3, #28]
 80043fe:	e001      	b.n	8004404 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800440c:	7dfb      	ldrb	r3, [r7, #23]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_TIM_ConfigClockSource+0x1c>
 800442e:	2302      	movs	r3, #2
 8004430:	e0b4      	b.n	800459c <HAL_TIM_ConfigClockSource+0x186>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004450:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004458:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446a:	d03e      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0xd4>
 800446c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004470:	f200 8087 	bhi.w	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004478:	f000 8086 	beq.w	8004588 <HAL_TIM_ConfigClockSource+0x172>
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004480:	d87f      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 8004482:	2b70      	cmp	r3, #112	@ 0x70
 8004484:	d01a      	beq.n	80044bc <HAL_TIM_ConfigClockSource+0xa6>
 8004486:	2b70      	cmp	r3, #112	@ 0x70
 8004488:	d87b      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 800448a:	2b60      	cmp	r3, #96	@ 0x60
 800448c:	d050      	beq.n	8004530 <HAL_TIM_ConfigClockSource+0x11a>
 800448e:	2b60      	cmp	r3, #96	@ 0x60
 8004490:	d877      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 8004492:	2b50      	cmp	r3, #80	@ 0x50
 8004494:	d03c      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0xfa>
 8004496:	2b50      	cmp	r3, #80	@ 0x50
 8004498:	d873      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 800449a:	2b40      	cmp	r3, #64	@ 0x40
 800449c:	d058      	beq.n	8004550 <HAL_TIM_ConfigClockSource+0x13a>
 800449e:	2b40      	cmp	r3, #64	@ 0x40
 80044a0:	d86f      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 80044a2:	2b30      	cmp	r3, #48	@ 0x30
 80044a4:	d064      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x15a>
 80044a6:	2b30      	cmp	r3, #48	@ 0x30
 80044a8:	d86b      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d060      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x15a>
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d867      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d05c      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x15a>
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d05a      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x15a>
 80044ba:	e062      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044cc:	f000 fbb2 	bl	8004c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	609a      	str	r2, [r3, #8]
      break;
 80044e8:	e04f      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044fa:	f000 fb9b 	bl	8004c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800450c:	609a      	str	r2, [r3, #8]
      break;
 800450e:	e03c      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800451c:	461a      	mov	r2, r3
 800451e:	f000 fa5f 	bl	80049e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2150      	movs	r1, #80	@ 0x50
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fb69 	bl	8004c00 <TIM_ITRx_SetConfig>
      break;
 800452e:	e02c      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800453c:	461a      	mov	r2, r3
 800453e:	f000 fab9 	bl	8004ab4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2160      	movs	r1, #96	@ 0x60
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fb59 	bl	8004c00 <TIM_ITRx_SetConfig>
      break;
 800454e:	e01c      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800455c:	461a      	mov	r2, r3
 800455e:	f000 fa3f 	bl	80049e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2140      	movs	r1, #64	@ 0x40
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fb49 	bl	8004c00 <TIM_ITRx_SetConfig>
      break;
 800456e:	e00c      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f000 fb40 	bl	8004c00 <TIM_ITRx_SetConfig>
      break;
 8004580:	e003      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
      break;
 8004586:	e000      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004588:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800459a:	7bfb      	ldrb	r3, [r7, #15]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e031      	b.n	8004620 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80045cc:	6839      	ldr	r1, [r7, #0]
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f902 	bl	80047d8 <TIM_SlaveTimer_SetConfig>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e018      	b.n	8004620 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800460c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr

0800463a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr

0800464c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
	...

08004684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a45      	ldr	r2, [pc, #276]	@ (80047ac <TIM_Base_SetConfig+0x128>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d013      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a2:	d00f      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a42      	ldr	r2, [pc, #264]	@ (80047b0 <TIM_Base_SetConfig+0x12c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a41      	ldr	r2, [pc, #260]	@ (80047b4 <TIM_Base_SetConfig+0x130>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a40      	ldr	r2, [pc, #256]	@ (80047b8 <TIM_Base_SetConfig+0x134>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a3f      	ldr	r2, [pc, #252]	@ (80047bc <TIM_Base_SetConfig+0x138>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d108      	bne.n	80046d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a34      	ldr	r2, [pc, #208]	@ (80047ac <TIM_Base_SetConfig+0x128>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d02b      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e4:	d027      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a31      	ldr	r2, [pc, #196]	@ (80047b0 <TIM_Base_SetConfig+0x12c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d023      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a30      	ldr	r2, [pc, #192]	@ (80047b4 <TIM_Base_SetConfig+0x130>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01f      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2f      	ldr	r2, [pc, #188]	@ (80047b8 <TIM_Base_SetConfig+0x134>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01b      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a2e      	ldr	r2, [pc, #184]	@ (80047bc <TIM_Base_SetConfig+0x138>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d017      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a2d      	ldr	r2, [pc, #180]	@ (80047c0 <TIM_Base_SetConfig+0x13c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a2c      	ldr	r2, [pc, #176]	@ (80047c4 <TIM_Base_SetConfig+0x140>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00f      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a2b      	ldr	r2, [pc, #172]	@ (80047c8 <TIM_Base_SetConfig+0x144>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a2a      	ldr	r2, [pc, #168]	@ (80047cc <TIM_Base_SetConfig+0x148>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a29      	ldr	r2, [pc, #164]	@ (80047d0 <TIM_Base_SetConfig+0x14c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a28      	ldr	r2, [pc, #160]	@ (80047d4 <TIM_Base_SetConfig+0x150>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d108      	bne.n	8004748 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800473c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a0f      	ldr	r2, [pc, #60]	@ (80047ac <TIM_Base_SetConfig+0x128>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_Base_SetConfig+0xf8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a11      	ldr	r2, [pc, #68]	@ (80047bc <TIM_Base_SetConfig+0x138>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d103      	bne.n	8004784 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b01      	cmp	r3, #1
 8004794:	d105      	bne.n	80047a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f023 0201 	bic.w	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	611a      	str	r2, [r3, #16]
  }
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	40010000 	.word	0x40010000
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40010400 	.word	0x40010400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800
 80047cc:	40001800 	.word	0x40001800
 80047d0:	40001c00 	.word	0x40001c00
 80047d4:	40002000 	.word	0x40002000

080047d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047f4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b70      	cmp	r3, #112	@ 0x70
 8004820:	d01a      	beq.n	8004858 <TIM_SlaveTimer_SetConfig+0x80>
 8004822:	2b70      	cmp	r3, #112	@ 0x70
 8004824:	d860      	bhi.n	80048e8 <TIM_SlaveTimer_SetConfig+0x110>
 8004826:	2b60      	cmp	r3, #96	@ 0x60
 8004828:	d054      	beq.n	80048d4 <TIM_SlaveTimer_SetConfig+0xfc>
 800482a:	2b60      	cmp	r3, #96	@ 0x60
 800482c:	d85c      	bhi.n	80048e8 <TIM_SlaveTimer_SetConfig+0x110>
 800482e:	2b50      	cmp	r3, #80	@ 0x50
 8004830:	d046      	beq.n	80048c0 <TIM_SlaveTimer_SetConfig+0xe8>
 8004832:	2b50      	cmp	r3, #80	@ 0x50
 8004834:	d858      	bhi.n	80048e8 <TIM_SlaveTimer_SetConfig+0x110>
 8004836:	2b40      	cmp	r3, #64	@ 0x40
 8004838:	d019      	beq.n	800486e <TIM_SlaveTimer_SetConfig+0x96>
 800483a:	2b40      	cmp	r3, #64	@ 0x40
 800483c:	d854      	bhi.n	80048e8 <TIM_SlaveTimer_SetConfig+0x110>
 800483e:	2b30      	cmp	r3, #48	@ 0x30
 8004840:	d055      	beq.n	80048ee <TIM_SlaveTimer_SetConfig+0x116>
 8004842:	2b30      	cmp	r3, #48	@ 0x30
 8004844:	d850      	bhi.n	80048e8 <TIM_SlaveTimer_SetConfig+0x110>
 8004846:	2b20      	cmp	r3, #32
 8004848:	d051      	beq.n	80048ee <TIM_SlaveTimer_SetConfig+0x116>
 800484a:	2b20      	cmp	r3, #32
 800484c:	d84c      	bhi.n	80048e8 <TIM_SlaveTimer_SetConfig+0x110>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d04d      	beq.n	80048ee <TIM_SlaveTimer_SetConfig+0x116>
 8004852:	2b10      	cmp	r3, #16
 8004854:	d04b      	beq.n	80048ee <TIM_SlaveTimer_SetConfig+0x116>
 8004856:	e047      	b.n	80048e8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004868:	f000 f9e4 	bl	8004c34 <TIM_ETR_SetConfig>
      break;
 800486c:	e040      	b.n	80048f0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b05      	cmp	r3, #5
 8004874:	d101      	bne.n	800487a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e03b      	b.n	80048f2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0201 	bic.w	r2, r2, #1
 8004890:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048a0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	621a      	str	r2, [r3, #32]
      break;
 80048be:	e017      	b.n	80048f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048cc:	461a      	mov	r2, r3
 80048ce:	f000 f887 	bl	80049e0 <TIM_TI1_ConfigInputStage>
      break;
 80048d2:	e00d      	b.n	80048f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e0:	461a      	mov	r2, r3
 80048e2:	f000 f8e7 	bl	8004ab4 <TIM_TI2_ConfigInputStage>
      break;
 80048e6:	e003      	b.n	80048f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	75fb      	strb	r3, [r7, #23]
      break;
 80048ec:	e000      	b.n	80048f0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80048ee:	bf00      	nop
  }

  return status;
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f023 0201 	bic.w	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4a27      	ldr	r2, [pc, #156]	@ (80049c4 <TIM_TI1_SetConfig+0xc8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d01b      	beq.n	8004962 <TIM_TI1_SetConfig+0x66>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004930:	d017      	beq.n	8004962 <TIM_TI1_SetConfig+0x66>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a24      	ldr	r2, [pc, #144]	@ (80049c8 <TIM_TI1_SetConfig+0xcc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d013      	beq.n	8004962 <TIM_TI1_SetConfig+0x66>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a23      	ldr	r2, [pc, #140]	@ (80049cc <TIM_TI1_SetConfig+0xd0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00f      	beq.n	8004962 <TIM_TI1_SetConfig+0x66>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4a22      	ldr	r2, [pc, #136]	@ (80049d0 <TIM_TI1_SetConfig+0xd4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00b      	beq.n	8004962 <TIM_TI1_SetConfig+0x66>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a21      	ldr	r2, [pc, #132]	@ (80049d4 <TIM_TI1_SetConfig+0xd8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <TIM_TI1_SetConfig+0x66>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a20      	ldr	r2, [pc, #128]	@ (80049d8 <TIM_TI1_SetConfig+0xdc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <TIM_TI1_SetConfig+0x66>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a1f      	ldr	r2, [pc, #124]	@ (80049dc <TIM_TI1_SetConfig+0xe0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d101      	bne.n	8004966 <TIM_TI1_SetConfig+0x6a>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <TIM_TI1_SetConfig+0x6c>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e003      	b.n	8004986 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800498c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	b2db      	uxtb	r3, r3
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f023 030a 	bic.w	r3, r3, #10
 80049a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f003 030a 	and.w	r3, r3, #10
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40010400 	.word	0x40010400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40001800 	.word	0x40001800

080049e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f023 0201 	bic.w	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 030a 	bic.w	r3, r3, #10
 8004a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f023 0210 	bic.w	r2, r3, #16
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	031b      	lsls	r3, r3, #12
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a8e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f023 0210 	bic.w	r2, r3, #16
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	031b      	lsls	r3, r3, #12
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004af0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	621a      	str	r2, [r3, #32]
}
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b087      	sub	sp, #28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004b62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bc6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	031b      	lsls	r3, r3, #12
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004bda:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	031b      	lsls	r3, r3, #12
 8004be0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	621a      	str	r2, [r3, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f043 0307 	orr.w	r3, r3, #7
 8004c22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	609a      	str	r2, [r3, #8]
}
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	021a      	lsls	r2, r3, #8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	609a      	str	r2, [r3, #8]
}
 8004c68:	bf00      	nop
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c96:	b084      	sub	sp, #16
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	f107 001c 	add.w	r0, r7, #28
 8004ca4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ca8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d123      	bne.n	8004cf8 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cd8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d105      	bne.n	8004cec <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f001 fabf 	bl	8006270 <USB_CoreReset>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	73fb      	strb	r3, [r7, #15]
 8004cf6:	e010      	b.n	8004d1a <USB_CoreInit+0x84>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f001 fab3 	bl	8006270 <USB_CoreReset>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d12:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004d1a:	7fbb      	ldrb	r3, [r7, #30]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d10b      	bne.n	8004d38 <USB_CoreInit+0xa2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f043 0206 	orr.w	r2, r3, #6
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f043 0220 	orr.w	r2, r3, #32
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d44:	b004      	add	sp, #16
 8004d46:	4770      	bx	lr

08004d48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d165      	bne.n	8004e28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4a41      	ldr	r2, [pc, #260]	@ (8004e64 <USB_SetTurnaroundTime+0x11c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d906      	bls.n	8004d72 <USB_SetTurnaroundTime+0x2a>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4a40      	ldr	r2, [pc, #256]	@ (8004e68 <USB_SetTurnaroundTime+0x120>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d202      	bcs.n	8004d72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d6c:	230f      	movs	r3, #15
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	e062      	b.n	8004e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4a3c      	ldr	r2, [pc, #240]	@ (8004e68 <USB_SetTurnaroundTime+0x120>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d306      	bcc.n	8004d88 <USB_SetTurnaroundTime+0x40>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4a3b      	ldr	r2, [pc, #236]	@ (8004e6c <USB_SetTurnaroundTime+0x124>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d202      	bcs.n	8004d88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d82:	230e      	movs	r3, #14
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e057      	b.n	8004e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4a38      	ldr	r2, [pc, #224]	@ (8004e6c <USB_SetTurnaroundTime+0x124>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d306      	bcc.n	8004d9e <USB_SetTurnaroundTime+0x56>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a37      	ldr	r2, [pc, #220]	@ (8004e70 <USB_SetTurnaroundTime+0x128>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d202      	bcs.n	8004d9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d98:	230d      	movs	r3, #13
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	e04c      	b.n	8004e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4a33      	ldr	r2, [pc, #204]	@ (8004e70 <USB_SetTurnaroundTime+0x128>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d306      	bcc.n	8004db4 <USB_SetTurnaroundTime+0x6c>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	4a32      	ldr	r2, [pc, #200]	@ (8004e74 <USB_SetTurnaroundTime+0x12c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d802      	bhi.n	8004db4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004dae:	230c      	movs	r3, #12
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	e041      	b.n	8004e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4a2f      	ldr	r2, [pc, #188]	@ (8004e74 <USB_SetTurnaroundTime+0x12c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d906      	bls.n	8004dca <USB_SetTurnaroundTime+0x82>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4a2e      	ldr	r2, [pc, #184]	@ (8004e78 <USB_SetTurnaroundTime+0x130>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d802      	bhi.n	8004dca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004dc4:	230b      	movs	r3, #11
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	e036      	b.n	8004e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004e78 <USB_SetTurnaroundTime+0x130>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d906      	bls.n	8004de0 <USB_SetTurnaroundTime+0x98>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4a29      	ldr	r2, [pc, #164]	@ (8004e7c <USB_SetTurnaroundTime+0x134>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d802      	bhi.n	8004de0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004dda:	230a      	movs	r3, #10
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e02b      	b.n	8004e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4a26      	ldr	r2, [pc, #152]	@ (8004e7c <USB_SetTurnaroundTime+0x134>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d906      	bls.n	8004df6 <USB_SetTurnaroundTime+0xae>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4a25      	ldr	r2, [pc, #148]	@ (8004e80 <USB_SetTurnaroundTime+0x138>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d202      	bcs.n	8004df6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004df0:	2309      	movs	r3, #9
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	e020      	b.n	8004e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4a21      	ldr	r2, [pc, #132]	@ (8004e80 <USB_SetTurnaroundTime+0x138>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d306      	bcc.n	8004e0c <USB_SetTurnaroundTime+0xc4>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4a20      	ldr	r2, [pc, #128]	@ (8004e84 <USB_SetTurnaroundTime+0x13c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d802      	bhi.n	8004e0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e06:	2308      	movs	r3, #8
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e015      	b.n	8004e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004e84 <USB_SetTurnaroundTime+0x13c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d906      	bls.n	8004e22 <USB_SetTurnaroundTime+0xda>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4a1c      	ldr	r2, [pc, #112]	@ (8004e88 <USB_SetTurnaroundTime+0x140>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d202      	bcs.n	8004e22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e1c:	2307      	movs	r3, #7
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e00a      	b.n	8004e38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e22:	2306      	movs	r3, #6
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	e007      	b.n	8004e38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e2e:	2309      	movs	r3, #9
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e001      	b.n	8004e38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e34:	2309      	movs	r3, #9
 8004e36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	029b      	lsls	r3, r3, #10
 8004e4c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004e50:	431a      	orrs	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	00d8acbf 	.word	0x00d8acbf
 8004e68:	00e4e1c0 	.word	0x00e4e1c0
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	01067380 	.word	0x01067380
 8004e74:	011a499f 	.word	0x011a499f
 8004e78:	01312cff 	.word	0x01312cff
 8004e7c:	014ca43f 	.word	0x014ca43f
 8004e80:	016e3600 	.word	0x016e3600
 8004e84:	01a6ab1f 	.word	0x01a6ab1f
 8004e88:	01e84800 	.word	0x01e84800

08004e8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f043 0201 	orr.w	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr

08004eac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f023 0201 	bic.w	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d115      	bne.n	8004f1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004efa:	200a      	movs	r0, #10
 8004efc:	f7fc f8b4 	bl	8001068 <HAL_Delay>
      ms += 10U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	330a      	adds	r3, #10
 8004f04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f001 f926 	bl	8006158 <USB_GetMode>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d01e      	beq.n	8004f50 <USB_SetCurrentMode+0x84>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f16:	d9f0      	bls.n	8004efa <USB_SetCurrentMode+0x2e>
 8004f18:	e01a      	b.n	8004f50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d115      	bne.n	8004f4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f2c:	200a      	movs	r0, #10
 8004f2e:	f7fc f89b 	bl	8001068 <HAL_Delay>
      ms += 10U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	330a      	adds	r3, #10
 8004f36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f001 f90d 	bl	8006158 <USB_GetMode>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <USB_SetCurrentMode+0x84>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f48:	d9f0      	bls.n	8004f2c <USB_SetCurrentMode+0x60>
 8004f4a:	e001      	b.n	8004f50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e005      	b.n	8004f5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f54:	d101      	bne.n	8004f5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f64:	b084      	sub	sp, #16
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	e009      	b.n	8004f98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	3340      	adds	r3, #64	@ 0x40
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	3301      	adds	r3, #1
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b0e      	cmp	r3, #14
 8004f9c:	d9f2      	bls.n	8004f84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d11c      	bne.n	8004fe0 <USB_DevInit+0x7c>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fb4:	f043 0302 	orr.w	r3, r3, #2
 8004fb8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fde:	e00b      	b.n	8004ff8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ffe:	461a      	mov	r2, r3
 8005000:	2300      	movs	r3, #0
 8005002:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005004:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005008:	2b01      	cmp	r3, #1
 800500a:	d10d      	bne.n	8005028 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800500c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005014:	2100      	movs	r1, #0
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f966 	bl	80052e8 <USB_SetDevSpeed>
 800501c:	e008      	b.n	8005030 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800501e:	2101      	movs	r1, #1
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f961 	bl	80052e8 <USB_SetDevSpeed>
 8005026:	e003      	b.n	8005030 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005028:	2103      	movs	r1, #3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f95c 	bl	80052e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005030:	2110      	movs	r1, #16
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f8fa 	bl	800522c <USB_FlushTxFifo>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f923 	bl	800528e <USB_FlushRxFifo>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005058:	461a      	mov	r2, r3
 800505a:	2300      	movs	r3, #0
 800505c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005064:	461a      	mov	r2, r3
 8005066:	2300      	movs	r3, #0
 8005068:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005070:	461a      	mov	r2, r3
 8005072:	2300      	movs	r3, #0
 8005074:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005076:	2300      	movs	r3, #0
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	e043      	b.n	8005104 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800508e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005092:	d118      	bne.n	80050c6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10a      	bne.n	80050b0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a6:	461a      	mov	r2, r3
 80050a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e013      	b.n	80050d8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050bc:	461a      	mov	r2, r3
 80050be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	e008      	b.n	80050d8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d2:	461a      	mov	r2, r3
 80050d4:	2300      	movs	r3, #0
 80050d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e4:	461a      	mov	r2, r3
 80050e6:	2300      	movs	r3, #0
 80050e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f6:	461a      	mov	r2, r3
 80050f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3301      	adds	r3, #1
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005108:	461a      	mov	r2, r3
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4293      	cmp	r3, r2
 800510e:	d3b5      	bcc.n	800507c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005110:	2300      	movs	r3, #0
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	e043      	b.n	800519e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800512c:	d118      	bne.n	8005160 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005140:	461a      	mov	r2, r3
 8005142:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	e013      	b.n	8005172 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005156:	461a      	mov	r2, r3
 8005158:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e008      	b.n	8005172 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516c:	461a      	mov	r2, r3
 800516e:	2300      	movs	r3, #0
 8005170:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517e:	461a      	mov	r2, r3
 8005180:	2300      	movs	r3, #0
 8005182:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005190:	461a      	mov	r2, r3
 8005192:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005196:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	3301      	adds	r3, #1
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051a2:	461a      	mov	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d3b5      	bcc.n	8005116 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80051ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f043 0210 	orr.w	r2, r3, #16
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699a      	ldr	r2, [r3, #24]
 80051e4:	4b10      	ldr	r3, [pc, #64]	@ (8005228 <USB_DevInit+0x2c4>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d005      	beq.n	8005200 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f043 0208 	orr.w	r2, r3, #8
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005200:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005204:	2b01      	cmp	r3, #1
 8005206:	d107      	bne.n	8005218 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005210:	f043 0304 	orr.w	r3, r3, #4
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005218:	7dfb      	ldrb	r3, [r7, #23]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005224:	b004      	add	sp, #16
 8005226:	4770      	bx	lr
 8005228:	803c3800 	.word	0x803c3800

0800522c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3301      	adds	r3, #1
 800523e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005246:	d901      	bls.n	800524c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e01b      	b.n	8005284 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	daf2      	bge.n	800523a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	019b      	lsls	r3, r3, #6
 800525c:	f043 0220 	orr.w	r2, r3, #32
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005270:	d901      	bls.n	8005276 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e006      	b.n	8005284 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b20      	cmp	r3, #32
 8005280:	d0f0      	beq.n	8005264 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3301      	adds	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052a6:	d901      	bls.n	80052ac <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e018      	b.n	80052de <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	daf2      	bge.n	800529a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2210      	movs	r2, #16
 80052bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3301      	adds	r3, #1
 80052c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052ca:	d901      	bls.n	80052d0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e006      	b.n	80052de <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b10      	cmp	r3, #16
 80052da:	d0f0      	beq.n	80052be <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005308:	4313      	orrs	r3, r2
 800530a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 0306 	and.w	r3, r3, #6
 8005330:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005338:	2300      	movs	r3, #0
 800533a:	75fb      	strb	r3, [r7, #23]
 800533c:	e00a      	b.n	8005354 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d002      	beq.n	800534a <USB_GetDevSpeed+0x32>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b06      	cmp	r3, #6
 8005348:	d102      	bne.n	8005350 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800534a:	2302      	movs	r3, #2
 800534c:	75fb      	strb	r3, [r7, #23]
 800534e:	e001      	b.n	8005354 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005350:	230f      	movs	r3, #15
 8005352:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005354:	7dfb      	ldrb	r3, [r7, #23]
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d13a      	bne.n	80053f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	2101      	movs	r1, #1
 800538e:	fa01 f303 	lsl.w	r3, r1, r3
 8005392:	b29b      	uxth	r3, r3
 8005394:	68f9      	ldr	r1, [r7, #12]
 8005396:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800539a:	4313      	orrs	r3, r2
 800539c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d155      	bne.n	8005460 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	791b      	ldrb	r3, [r3, #4]
 80053ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	059b      	lsls	r3, r3, #22
 80053d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053d8:	4313      	orrs	r3, r2
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	e036      	b.n	8005460 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	2101      	movs	r1, #1
 8005404:	fa01 f303 	lsl.w	r3, r1, r3
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005410:	4313      	orrs	r3, r2
 8005412:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d11a      	bne.n	8005460 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	791b      	ldrb	r3, [r3, #4]
 8005444:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005446:	430b      	orrs	r3, r1
 8005448:	4313      	orrs	r3, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800545e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d161      	bne.n	800554c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800549a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800549e:	d11f      	bne.n	80054e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	2101      	movs	r1, #1
 80054f2:	fa01 f303 	lsl.w	r3, r1, r3
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	43db      	mvns	r3, r3
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005500:	4013      	ands	r3, r2
 8005502:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	2101      	movs	r1, #1
 8005516:	fa01 f303 	lsl.w	r3, r1, r3
 800551a:	b29b      	uxth	r3, r3
 800551c:	43db      	mvns	r3, r3
 800551e:	68f9      	ldr	r1, [r7, #12]
 8005520:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005524:	4013      	ands	r3, r2
 8005526:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	0159      	lsls	r1, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	440b      	add	r3, r1
 800553e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005542:	4619      	mov	r1, r3
 8005544:	4b35      	ldr	r3, [pc, #212]	@ (800561c <USB_DeactivateEndpoint+0x1b0>)
 8005546:	4013      	ands	r3, r2
 8005548:	600b      	str	r3, [r1, #0]
 800554a:	e060      	b.n	800560e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800555e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005562:	d11f      	bne.n	80055a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	0151      	lsls	r1, r2, #5
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	440a      	add	r2, r1
 800557a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800557e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005582:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800559e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	2101      	movs	r1, #1
 80055b6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ba:	041b      	lsls	r3, r3, #16
 80055bc:	43db      	mvns	r3, r3
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055c4:	4013      	ands	r3, r2
 80055c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	2101      	movs	r1, #1
 80055da:	fa01 f303 	lsl.w	r3, r1, r3
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	43db      	mvns	r3, r3
 80055e2:	68f9      	ldr	r1, [r7, #12]
 80055e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055e8:	4013      	ands	r3, r2
 80055ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	0159      	lsls	r1, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	440b      	add	r3, r1
 8005602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005606:	4619      	mov	r1, r3
 8005608:	4b05      	ldr	r3, [pc, #20]	@ (8005620 <USB_DeactivateEndpoint+0x1b4>)
 800560a:	4013      	ands	r3, r2
 800560c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	ec337800 	.word	0xec337800
 8005620:	eff37800 	.word	0xeff37800

08005624 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	@ 0x28
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	4613      	mov	r3, r2
 8005630:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	785b      	ldrb	r3, [r3, #1]
 8005640:	2b01      	cmp	r3, #1
 8005642:	f040 817a 	bne.w	800593a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d132      	bne.n	80056b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005668:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800566c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	440a      	add	r2, r1
 8005688:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800568c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ac:	0cdb      	lsrs	r3, r3, #19
 80056ae:	04db      	lsls	r3, r3, #19
 80056b0:	6113      	str	r3, [r2, #16]
 80056b2:	e092      	b.n	80057da <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ce:	0cdb      	lsrs	r3, r3, #19
 80056d0:	04db      	lsls	r3, r3, #19
 80056d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80056f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80056f6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d11a      	bne.n	8005734 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	429a      	cmp	r2, r3
 8005708:	d903      	bls.n	8005712 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	440a      	add	r2, r1
 8005728:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800572c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005730:	6113      	str	r3, [r2, #16]
 8005732:	e01b      	b.n	800576c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005740:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6919      	ldr	r1, [r3, #16]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	440b      	add	r3, r1
 800574c:	1e59      	subs	r1, r3, #1
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	fbb1 f3f3 	udiv	r3, r1, r3
 8005756:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005758:	4ba2      	ldr	r3, [pc, #648]	@ (80059e4 <USB_EPStartXfer+0x3c0>)
 800575a:	400b      	ands	r3, r1
 800575c:	69b9      	ldr	r1, [r7, #24]
 800575e:	0148      	lsls	r0, r1, #5
 8005760:	69f9      	ldr	r1, [r7, #28]
 8005762:	4401      	add	r1, r0
 8005764:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005768:	4313      	orrs	r3, r2
 800576a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005782:	69b9      	ldr	r1, [r7, #24]
 8005784:	0148      	lsls	r0, r1, #5
 8005786:	69f9      	ldr	r1, [r7, #28]
 8005788:	4401      	add	r1, r0
 800578a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800578e:	4313      	orrs	r3, r2
 8005790:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	791b      	ldrb	r3, [r3, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d11f      	bne.n	80057da <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057b4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80057b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d14b      	bne.n	8005878 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f4:	461a      	mov	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	791b      	ldrb	r3, [r3, #4]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d128      	bne.n	8005856 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d110      	bne.n	8005836 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	0151      	lsls	r1, r2, #5
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	440a      	add	r2, r1
 800582a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800582e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	e00f      	b.n	8005856 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005854:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005870:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e165      	b.n	8005b44 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005892:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005896:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	791b      	ldrb	r3, [r3, #4]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d015      	beq.n	80058cc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 814d 	beq.w	8005b44 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	2101      	movs	r1, #1
 80058bc:	fa01 f303 	lsl.w	r3, r1, r3
 80058c0:	69f9      	ldr	r1, [r7, #28]
 80058c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058c6:	4313      	orrs	r3, r2
 80058c8:	634b      	str	r3, [r1, #52]	@ 0x34
 80058ca:	e13b      	b.n	8005b44 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d110      	bne.n	80058fe <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	e00f      	b.n	800591e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	440a      	add	r2, r1
 8005914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800591c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	68d9      	ldr	r1, [r3, #12]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	b298      	uxth	r0, r3
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	4603      	mov	r3, r0
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f9b7 	bl	8005ca6 <USB_WritePacket>
 8005938:	e104      	b.n	8005b44 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005954:	0cdb      	lsrs	r3, r3, #19
 8005956:	04db      	lsls	r3, r3, #19
 8005958:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005974:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005978:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800597c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d131      	bne.n	80059e8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059b2:	69b9      	ldr	r1, [r7, #24]
 80059b4:	0148      	lsls	r0, r1, #5
 80059b6:	69f9      	ldr	r1, [r7, #28]
 80059b8:	4401      	add	r1, r0
 80059ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059be:	4313      	orrs	r3, r2
 80059c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059e0:	6113      	str	r3, [r2, #16]
 80059e2:	e061      	b.n	8005aa8 <USB_EPStartXfer+0x484>
 80059e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d123      	bne.n	8005a38 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a06:	69b9      	ldr	r1, [r7, #24]
 8005a08:	0148      	lsls	r0, r1, #5
 8005a0a:	69f9      	ldr	r1, [r7, #28]
 8005a0c:	4401      	add	r1, r0
 8005a0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a12:	4313      	orrs	r3, r2
 8005a14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a34:	6113      	str	r3, [r2, #16]
 8005a36:	e037      	b.n	8005aa8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	4413      	add	r3, r2
 8005a42:	1e5a      	subs	r2, r3, #1
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	8afa      	ldrh	r2, [r7, #22]
 8005a54:	fb03 f202 	mul.w	r2, r3, r2
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	8afb      	ldrh	r3, [r7, #22]
 8005a6c:	04d9      	lsls	r1, r3, #19
 8005a6e:	4b38      	ldr	r3, [pc, #224]	@ (8005b50 <USB_EPStartXfer+0x52c>)
 8005a70:	400b      	ands	r3, r1
 8005a72:	69b9      	ldr	r1, [r7, #24]
 8005a74:	0148      	lsls	r0, r1, #5
 8005a76:	69f9      	ldr	r1, [r7, #28]
 8005a78:	4401      	add	r1, r0
 8005a7a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8e:	691a      	ldr	r2, [r3, #16]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a98:	69b9      	ldr	r1, [r7, #24]
 8005a9a:	0148      	lsls	r0, r1, #5
 8005a9c:	69f9      	ldr	r1, [r7, #28]
 8005a9e:	4401      	add	r1, r0
 8005aa0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d10d      	bne.n	8005aca <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	68d9      	ldr	r1, [r3, #12]
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac6:	460a      	mov	r2, r1
 8005ac8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	791b      	ldrb	r3, [r3, #4]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d128      	bne.n	8005b24 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d110      	bne.n	8005b04 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	0151      	lsls	r1, r2, #5
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	440a      	add	r2, r1
 8005af8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005afc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	e00f      	b.n	8005b24 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b3e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3720      	adds	r7, #32
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	1ff80000 	.word	0x1ff80000

08005b54 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d14a      	bne.n	8005c08 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b8a:	f040 8086 	bne.w	8005c9a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	7812      	ldrb	r2, [r2, #0]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005bb0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	7812      	ldrb	r2, [r2, #0]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d902      	bls.n	8005bec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bea:	e056      	b.n	8005c9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c04:	d0e7      	beq.n	8005bd6 <USB_EPStopXfer+0x82>
 8005c06:	e048      	b.n	8005c9a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c20:	d13b      	bne.n	8005c9a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	7812      	ldrb	r2, [r2, #0]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c44:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d902      	bls.n	8005c80 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c7e:	e00c      	b.n	8005c9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c98:	d0e7      	beq.n	8005c6a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr

08005ca6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b089      	sub	sp, #36	@ 0x24
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	71fb      	strb	r3, [r7, #7]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005cc4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d123      	bne.n	8005d14 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ccc:	88bb      	ldrh	r3, [r7, #4]
 8005cce:	3303      	adds	r3, #3
 8005cd0:	089b      	lsrs	r3, r3, #2
 8005cd2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	e018      	b.n	8005d0c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	031a      	lsls	r2, r3, #12
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	3301      	adds	r3, #1
 8005d04:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	61bb      	str	r3, [r7, #24]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d3e2      	bcc.n	8005cda <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3724      	adds	r7, #36	@ 0x24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr

08005d20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b08b      	sub	sp, #44	@ 0x2c
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	089b      	lsrs	r3, r3, #2
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d46:	2300      	movs	r3, #0
 8005d48:	623b      	str	r3, [r7, #32]
 8005d4a:	e014      	b.n	8005d76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	3301      	adds	r3, #1
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	3301      	adds	r3, #1
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	3301      	adds	r3, #1
 8005d74:	623b      	str	r3, [r7, #32]
 8005d76:	6a3a      	ldr	r2, [r7, #32]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d3e6      	bcc.n	8005d4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d7e:	8bfb      	ldrh	r3, [r7, #30]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01e      	beq.n	8005dc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f107 0310 	add.w	r3, r7, #16
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	701a      	strb	r2, [r3, #0]
      i++;
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	3301      	adds	r3, #1
 8005dae:	623b      	str	r3, [r7, #32]
      pDest++;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	3301      	adds	r3, #1
 8005db4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005db6:	8bfb      	ldrh	r3, [r7, #30]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005dbc:	8bfb      	ldrh	r3, [r7, #30]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1ea      	bne.n	8005d98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	372c      	adds	r7, #44	@ 0x2c
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr

08005dce <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	785b      	ldrb	r3, [r3, #1]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d12c      	bne.n	8005e44 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	db12      	blt.n	8005e22 <USB_EPSetStall+0x54>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00f      	beq.n	8005e22 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e20:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e02b      	b.n	8005e9c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	db12      	blt.n	8005e7c <USB_EPSetStall+0xae>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00f      	beq.n	8005e7c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e7a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr

08005ea8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d128      	bne.n	8005f16 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ede:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ee2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	791b      	ldrb	r3, [r3, #4]
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d003      	beq.n	8005ef4 <USB_EPClearStall+0x4c>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	791b      	ldrb	r3, [r3, #4]
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d138      	bne.n	8005f66 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	e027      	b.n	8005f66 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	791b      	ldrb	r3, [r3, #4]
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d003      	beq.n	8005f46 <USB_EPClearStall+0x9e>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	791b      	ldrb	r3, [r3, #4]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d10f      	bne.n	8005f66 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f64:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr

08005f72 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b085      	sub	sp, #20
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f90:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005f94:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	78fb      	ldrb	r3, [r7, #3]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005fa6:	68f9      	ldr	r1, [r7, #12]
 8005fa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fac:	4313      	orrs	r3, r2
 8005fae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr

08005fbc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005fd6:	f023 0303 	bic.w	r3, r3, #3
 8005fda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fea:	f023 0302 	bic.w	r3, r3, #2
 8005fee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr

08005ffc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800602a:	f043 0302 	orr.w	r3, r3, #2
 800602e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	4770      	bx	lr

0800603c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4013      	ands	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006054:	68fb      	ldr	r3, [r7, #12]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr

08006060 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4013      	ands	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	0c1b      	lsrs	r3, r3, #16
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr

08006092 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	4013      	ands	r3, r2
 80060b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	b29b      	uxth	r3, r3
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	4013      	ands	r3, r2
 80060f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060f2:	68bb      	ldr	r3, [r7, #8]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr

080060fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060fe:	b480      	push	{r7}
 8006100:	b087      	sub	sp, #28
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	460b      	mov	r3, r1
 8006108:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800611e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006120:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	fa22 f303 	lsr.w	r3, r2, r3
 800612e:	01db      	lsls	r3, r3, #7
 8006130:	b2db      	uxtb	r3, r3
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4013      	ands	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800614c:	68bb      	ldr	r3, [r7, #8]
}
 800614e:	4618      	mov	r0, r3
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr

08006158 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	f003 0301 	and.w	r3, r3, #1
}
 8006168:	4618      	mov	r0, r3
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr

08006172 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006172:	b480      	push	{r7}
 8006174:	b085      	sub	sp, #20
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800618c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006190:	f023 0307 	bic.w	r3, r3, #7
 8006194:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr
	...

080061b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	460b      	mov	r3, r1
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	333c      	adds	r3, #60	@ 0x3c
 80061ce:	3304      	adds	r3, #4
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4a25      	ldr	r2, [pc, #148]	@ (800626c <USB_EP0_OutStart+0xb4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d90a      	bls.n	80061f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061ec:	d101      	bne.n	80061f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e037      	b.n	8006262 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f8:	461a      	mov	r2, r3
 80061fa:	2300      	movs	r3, #0
 80061fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800620c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006210:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006220:	f043 0318 	orr.w	r3, r3, #24
 8006224:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006234:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006238:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800623a:	7afb      	ldrb	r3, [r7, #11]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d10f      	bne.n	8006260 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800625a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800625e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr
 800626c:	4f54300a 	.word	0x4f54300a

08006270 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3301      	adds	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006288:	d901      	bls.n	800628e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e01b      	b.n	80062c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	daf2      	bge.n	800627c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f043 0201 	orr.w	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3301      	adds	r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062b2:	d901      	bls.n	80062b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e006      	b.n	80062c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d0f0      	beq.n	80062a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	7c1b      	ldrb	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d115      	bne.n	8006314 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062ec:	2202      	movs	r2, #2
 80062ee:	2181      	movs	r1, #129	@ 0x81
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fed8 	bl	80080a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006300:	2202      	movs	r2, #2
 8006302:	2101      	movs	r1, #1
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 fece 	bl	80080a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006312:	e012      	b.n	800633a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006314:	2340      	movs	r3, #64	@ 0x40
 8006316:	2202      	movs	r2, #2
 8006318:	2181      	movs	r1, #129	@ 0x81
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 fec3 	bl	80080a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006326:	2340      	movs	r3, #64	@ 0x40
 8006328:	2202      	movs	r2, #2
 800632a:	2101      	movs	r1, #1
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 feba 	bl	80080a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800633a:	2308      	movs	r3, #8
 800633c:	2203      	movs	r2, #3
 800633e:	2182      	movs	r1, #130	@ 0x82
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 feb0 	bl	80080a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800634c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006350:	f001 fffc 	bl	800834c <malloc>
 8006354:	4603      	mov	r3, r0
 8006356:	461a      	mov	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d102      	bne.n	800636e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
 800636c:	e026      	b.n	80063bc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006374:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	7c1b      	ldrb	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d109      	bne.n	80063ac <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800639e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063a2:	2101      	movs	r1, #1
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 ff6e 	bl	8008286 <USBD_LL_PrepareReceive>
 80063aa:	e007      	b.n	80063bc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80063b2:	2340      	movs	r3, #64	@ 0x40
 80063b4:	2101      	movs	r1, #1
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 ff65 	bl	8008286 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80063d6:	2181      	movs	r1, #129	@ 0x81
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 fe8a 	bl	80080f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80063e4:	2101      	movs	r1, #1
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 fe83 	bl	80080f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80063f4:	2182      	movs	r1, #130	@ 0x82
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 fe7b 	bl	80080f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00e      	beq.n	800642a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800641c:	4618      	mov	r0, r3
 800641e:	f001 ff9d 	bl	800835c <free>
    pdev->pClassData = NULL;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800642a:	7bfb      	ldrb	r3, [r7, #15]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006444:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800645a:	2b00      	cmp	r3, #0
 800645c:	d039      	beq.n	80064d2 <USBD_CDC_Setup+0x9e>
 800645e:	2b20      	cmp	r3, #32
 8006460:	d17f      	bne.n	8006562 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	88db      	ldrh	r3, [r3, #6]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d029      	beq.n	80064be <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	b25b      	sxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	da11      	bge.n	8006498 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006480:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	88d2      	ldrh	r2, [r2, #6]
 8006486:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006488:	6939      	ldr	r1, [r7, #16]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	88db      	ldrh	r3, [r3, #6]
 800648e:	461a      	mov	r2, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 fa0f 	bl	80078b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006496:	e06b      	b.n	8006570 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	785a      	ldrb	r2, [r3, #1]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	88db      	ldrh	r3, [r3, #6]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064ae:	6939      	ldr	r1, [r7, #16]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	88db      	ldrh	r3, [r3, #6]
 80064b4:	461a      	mov	r2, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f001 fa2a 	bl	8007910 <USBD_CtlPrepareRx>
      break;
 80064bc:	e058      	b.n	8006570 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	7850      	ldrb	r0, [r2, #1]
 80064ca:	2200      	movs	r2, #0
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	4798      	blx	r3
      break;
 80064d0:	e04e      	b.n	8006570 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	2b0b      	cmp	r3, #11
 80064d8:	d02e      	beq.n	8006538 <USBD_CDC_Setup+0x104>
 80064da:	2b0b      	cmp	r3, #11
 80064dc:	dc38      	bgt.n	8006550 <USBD_CDC_Setup+0x11c>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <USBD_CDC_Setup+0xb4>
 80064e2:	2b0a      	cmp	r3, #10
 80064e4:	d014      	beq.n	8006510 <USBD_CDC_Setup+0xdc>
 80064e6:	e033      	b.n	8006550 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d107      	bne.n	8006502 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80064f2:	f107 030c 	add.w	r3, r7, #12
 80064f6:	2202      	movs	r2, #2
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 f9da 	bl	80078b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006500:	e02e      	b.n	8006560 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 f96b 	bl	80077e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800650a:	2302      	movs	r3, #2
 800650c:	75fb      	strb	r3, [r7, #23]
          break;
 800650e:	e027      	b.n	8006560 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006516:	2b03      	cmp	r3, #3
 8006518:	d107      	bne.n	800652a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800651a:	f107 030f 	add.w	r3, r7, #15
 800651e:	2201      	movs	r2, #1
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 f9c6 	bl	80078b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006528:	e01a      	b.n	8006560 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 f957 	bl	80077e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006532:	2302      	movs	r3, #2
 8006534:	75fb      	strb	r3, [r7, #23]
          break;
 8006536:	e013      	b.n	8006560 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800653e:	2b03      	cmp	r3, #3
 8006540:	d00d      	beq.n	800655e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 f94b 	bl	80077e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800654a:	2302      	movs	r3, #2
 800654c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800654e:	e006      	b.n	800655e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 f944 	bl	80077e0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006558:	2302      	movs	r3, #2
 800655a:	75fb      	strb	r3, [r7, #23]
          break;
 800655c:	e000      	b.n	8006560 <USBD_CDC_Setup+0x12c>
          break;
 800655e:	bf00      	nop
      }
      break;
 8006560:	e006      	b.n	8006570 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 f93b 	bl	80077e0 <USBD_CtlError>
      ret = USBD_FAIL;
 800656a:	2302      	movs	r3, #2
 800656c:	75fb      	strb	r3, [r7, #23]
      break;
 800656e:	bf00      	nop
  }

  return ret;
 8006570:	7dfb      	ldrb	r3, [r7, #23]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	460b      	mov	r3, r1
 8006584:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800658c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006594:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800659c:	2b00      	cmp	r3, #0
 800659e:	d03a      	beq.n	8006616 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80065a0:	78fa      	ldrb	r2, [r7, #3]
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	331c      	adds	r3, #28
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d029      	beq.n	800660a <USBD_CDC_DataIn+0x90>
 80065b6:	78fa      	ldrb	r2, [r7, #3]
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	331c      	adds	r3, #28
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	78f9      	ldrb	r1, [r7, #3]
 80065ca:	68b8      	ldr	r0, [r7, #8]
 80065cc:	460b      	mov	r3, r1
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	440b      	add	r3, r1
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4403      	add	r3, r0
 80065d6:	331c      	adds	r3, #28
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	fbb2 f1f3 	udiv	r1, r2, r3
 80065de:	fb01 f303 	mul.w	r3, r1, r3
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d110      	bne.n	800660a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80065e8:	78fa      	ldrb	r2, [r7, #3]
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	440b      	add	r3, r1
 80065f6:	331c      	adds	r3, #28
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065fc:	78f9      	ldrb	r1, [r7, #3]
 80065fe:	2300      	movs	r3, #0
 8006600:	2200      	movs	r2, #0
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f001 fe1c 	bl	8008240 <USBD_LL_Transmit>
 8006608:	e003      	b.n	8006612 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	e000      	b.n	8006618 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006616:	2302      	movs	r3, #2
  }
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006632:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 fe47 	bl	80082cc <USBD_LL_GetRxDataSize>
 800663e:	4602      	mov	r2, r0
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00d      	beq.n	800666c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006664:	4611      	mov	r1, r2
 8006666:	4798      	blx	r3

    return USBD_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	e000      	b.n	800666e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800666c:	2302      	movs	r3, #2
  }
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006684:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800668c:	2b00      	cmp	r3, #0
 800668e:	d014      	beq.n	80066ba <USBD_CDC_EP0_RxReady+0x44>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006696:	2bff      	cmp	r3, #255	@ 0xff
 8006698:	d00f      	beq.n	80066ba <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80066a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	22ff      	movs	r2, #255	@ 0xff
 80066b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2243      	movs	r2, #67	@ 0x43
 80066d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80066d2:	4b03      	ldr	r3, [pc, #12]	@ (80066e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20000094 	.word	0x20000094

080066e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2243      	movs	r2, #67	@ 0x43
 80066f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80066f2:	4b03      	ldr	r3, [pc, #12]	@ (8006700 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20000050 	.word	0x20000050

08006704 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2243      	movs	r2, #67	@ 0x43
 8006710:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006712:	4b03      	ldr	r3, [pc, #12]	@ (8006720 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	200000d8 	.word	0x200000d8

08006724 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	220a      	movs	r2, #10
 8006730:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006732:	4b03      	ldr	r3, [pc, #12]	@ (8006740 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	2000000c 	.word	0x2000000c

08006744 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800674e:	2302      	movs	r3, #2
 8006750:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	4613      	mov	r3, r2
 800677c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006784:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800678e:	88fa      	ldrh	r2, [r7, #6]
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr

080067a2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067b2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bc80      	pop	{r7}
 80067c6:	4770      	bx	lr

080067c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d017      	beq.n	8006812 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	7c1b      	ldrb	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d109      	bne.n	80067fe <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067f4:	2101      	movs	r1, #1
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 fd45 	bl	8008286 <USBD_LL_PrepareReceive>
 80067fc:	e007      	b.n	800680e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006804:	2340      	movs	r3, #64	@ 0x40
 8006806:	2101      	movs	r1, #1
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 fd3c 	bl	8008286 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	e000      	b.n	8006814 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006812:	2302      	movs	r3, #2
  }
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	4613      	mov	r3, r2
 8006828:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006830:	2302      	movs	r3, #2
 8006832:	e01a      	b.n	800686a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	79fa      	ldrb	r2, [r7, #7]
 8006860:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f001 fbba 	bl	8007fdc <USBD_LL_Init>

  return USBD_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d006      	beq.n	8006894 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
 8006892:	e001      	b.n	8006898 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006894:	2302      	movs	r3, #2
 8006896:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006898:	7bfb      	ldrb	r3, [r7, #15]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	bc80      	pop	{r7}
 80068a2:	4770      	bx	lr

080068a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 fbdf 	bl	8008070 <USBD_LL_Start>

  return USBD_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr

080068d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80068dc:	2302      	movs	r3, #2
 80068de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00c      	beq.n	8006904 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	78fa      	ldrb	r2, [r7, #3]
 80068f4:	4611      	mov	r1, r2
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	4798      	blx	r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	4611      	mov	r1, r2
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3

  return USBD_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 ff11 	bl	800776e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800695a:	461a      	mov	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006968:	f003 031f 	and.w	r3, r3, #31
 800696c:	2b02      	cmp	r3, #2
 800696e:	d016      	beq.n	800699e <USBD_LL_SetupStage+0x6a>
 8006970:	2b02      	cmp	r3, #2
 8006972:	d81c      	bhi.n	80069ae <USBD_LL_SetupStage+0x7a>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <USBD_LL_SetupStage+0x4a>
 8006978:	2b01      	cmp	r3, #1
 800697a:	d008      	beq.n	800698e <USBD_LL_SetupStage+0x5a>
 800697c:	e017      	b.n	80069ae <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fa04 	bl	8006d94 <USBD_StdDevReq>
      break;
 800698c:	e01a      	b.n	80069c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fa66 	bl	8006e68 <USBD_StdItfReq>
      break;
 800699c:	e012      	b.n	80069c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 faa6 	bl	8006ef8 <USBD_StdEPReq>
      break;
 80069ac:	e00a      	b.n	80069c4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80069b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 fbb7 	bl	8008130 <USBD_LL_StallEP>
      break;
 80069c2:	bf00      	nop
  }

  return USBD_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b086      	sub	sp, #24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	460b      	mov	r3, r1
 80069d8:	607a      	str	r2, [r7, #4]
 80069da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d14b      	bne.n	8006a7a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80069e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d134      	bne.n	8006a5e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d919      	bls.n	8006a34 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d203      	bcs.n	8006a22 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	e002      	b.n	8006a28 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 ff8d 	bl	800794c <USBD_CtlContinueRx>
 8006a32:	e038      	b.n	8006aa6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d105      	bne.n	8006a56 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 ff8a 	bl	8007970 <USBD_CtlSendStatus>
 8006a5c:	e023      	b.n	8006aa6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a64:	2b05      	cmp	r3, #5
 8006a66:	d11e      	bne.n	8006aa6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006a70:	2100      	movs	r1, #0
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f001 fb5c 	bl	8008130 <USBD_LL_StallEP>
 8006a78:	e015      	b.n	8006aa6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00d      	beq.n	8006aa2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d108      	bne.n	8006aa2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	7afa      	ldrb	r2, [r7, #11]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	4798      	blx	r3
 8006aa0:	e001      	b.n	8006aa6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e000      	b.n	8006aa8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006abe:	7afb      	ldrb	r3, [r7, #11]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d17f      	bne.n	8006bc4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3314      	adds	r3, #20
 8006ac8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d15c      	bne.n	8006b8e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d915      	bls.n	8006b0c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	1ad2      	subs	r2, r2, r3
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fef7 	bl	80078ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006afe:	2300      	movs	r3, #0
 8006b00:	2200      	movs	r2, #0
 8006b02:	2100      	movs	r1, #0
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f001 fbbe 	bl	8008286 <USBD_LL_PrepareReceive>
 8006b0a:	e04e      	b.n	8006baa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	6912      	ldr	r2, [r2, #16]
 8006b14:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b18:	fb01 f202 	mul.w	r2, r1, r2
 8006b1c:	1a9b      	subs	r3, r3, r2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d11c      	bne.n	8006b5c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d316      	bcc.n	8006b5c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d20f      	bcs.n	8006b5c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2100      	movs	r1, #0
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fed3 	bl	80078ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2200      	movs	r2, #0
 8006b52:	2100      	movs	r1, #0
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f001 fb96 	bl	8008286 <USBD_LL_PrepareReceive>
 8006b5a:	e026      	b.n	8006baa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d105      	bne.n	8006b7e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b7e:	2180      	movs	r1, #128	@ 0x80
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f001 fad5 	bl	8008130 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 ff05 	bl	8007996 <USBD_CtlReceiveStatus>
 8006b8c:	e00d      	b.n	8006baa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d004      	beq.n	8006ba2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006ba2:	2180      	movs	r1, #128	@ 0x80
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f001 fac3 	bl	8008130 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d11d      	bne.n	8006bf0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7ff fe81 	bl	80068bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006bc2:	e015      	b.n	8006bf0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00d      	beq.n	8006bec <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d108      	bne.n	8006bec <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	7afa      	ldrb	r2, [r7, #11]
 8006be4:	4611      	mov	r1, r2
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	4798      	blx	r3
 8006bea:	e001      	b.n	8006bf0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006bec:	2302      	movs	r3, #2
 8006bee:	e000      	b.n	8006bf2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c02:	2340      	movs	r3, #64	@ 0x40
 8006c04:	2200      	movs	r2, #0
 8006c06:	2100      	movs	r1, #0
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 fa4c 	bl	80080a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2240      	movs	r2, #64	@ 0x40
 8006c1a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c1e:	2340      	movs	r3, #64	@ 0x40
 8006c20:	2200      	movs	r2, #0
 8006c22:	2180      	movs	r1, #128	@ 0x80
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 fa3e 	bl	80080a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2240      	movs	r2, #64	@ 0x40
 8006c34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6852      	ldr	r2, [r2, #4]
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
  }

  return USBD_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bc80      	pop	{r7}
 8006c98:	4770      	bx	lr

08006c9a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2204      	movs	r2, #4
 8006cb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bc80      	pop	{r7}
 8006cc0:	4770      	bx	lr

08006cc2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d105      	bne.n	8006ce0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr

08006cec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d10b      	bne.n	8006d16 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d005      	beq.n	8006d16 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bc80      	pop	{r7}
 8006d4e:	4770      	bx	lr

08006d50 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr

08006d64 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6852      	ldr	r2, [r2, #4]
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	4611      	mov	r1, r2
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3

  return USBD_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006daa:	2b40      	cmp	r3, #64	@ 0x40
 8006dac:	d005      	beq.n	8006dba <USBD_StdDevReq+0x26>
 8006dae:	2b40      	cmp	r3, #64	@ 0x40
 8006db0:	d84f      	bhi.n	8006e52 <USBD_StdDevReq+0xbe>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <USBD_StdDevReq+0x36>
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d14b      	bne.n	8006e52 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
      break;
 8006dc8:	e048      	b.n	8006e5c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b09      	cmp	r3, #9
 8006dd0:	d839      	bhi.n	8006e46 <USBD_StdDevReq+0xb2>
 8006dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd8 <USBD_StdDevReq+0x44>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006e29 	.word	0x08006e29
 8006ddc:	08006e3d 	.word	0x08006e3d
 8006de0:	08006e47 	.word	0x08006e47
 8006de4:	08006e33 	.word	0x08006e33
 8006de8:	08006e47 	.word	0x08006e47
 8006dec:	08006e0b 	.word	0x08006e0b
 8006df0:	08006e01 	.word	0x08006e01
 8006df4:	08006e47 	.word	0x08006e47
 8006df8:	08006e1f 	.word	0x08006e1f
 8006dfc:	08006e15 	.word	0x08006e15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f9dc 	bl	80071c0 <USBD_GetDescriptor>
          break;
 8006e08:	e022      	b.n	8006e50 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fb3f 	bl	8007490 <USBD_SetAddress>
          break;
 8006e12:	e01d      	b.n	8006e50 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fb7e 	bl	8007518 <USBD_SetConfig>
          break;
 8006e1c:	e018      	b.n	8006e50 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fc07 	bl	8007634 <USBD_GetConfig>
          break;
 8006e26:	e013      	b.n	8006e50 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fc37 	bl	800769e <USBD_GetStatus>
          break;
 8006e30:	e00e      	b.n	8006e50 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fc65 	bl	8007704 <USBD_SetFeature>
          break;
 8006e3a:	e009      	b.n	8006e50 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fc74 	bl	800772c <USBD_ClrFeature>
          break;
 8006e44:	e004      	b.n	8006e50 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fcc9 	bl	80077e0 <USBD_CtlError>
          break;
 8006e4e:	bf00      	nop
      }
      break;
 8006e50:	e004      	b.n	8006e5c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fcc3 	bl	80077e0 <USBD_CtlError>
      break;
 8006e5a:	bf00      	nop
  }

  return ret;
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop

08006e68 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e7e:	2b40      	cmp	r3, #64	@ 0x40
 8006e80:	d005      	beq.n	8006e8e <USBD_StdItfReq+0x26>
 8006e82:	2b40      	cmp	r3, #64	@ 0x40
 8006e84:	d82e      	bhi.n	8006ee4 <USBD_StdItfReq+0x7c>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <USBD_StdItfReq+0x26>
 8006e8a:	2b20      	cmp	r3, #32
 8006e8c:	d12a      	bne.n	8006ee4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e94:	3b01      	subs	r3, #1
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d81d      	bhi.n	8006ed6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	889b      	ldrh	r3, [r3, #4]
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d813      	bhi.n	8006ecc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	88db      	ldrh	r3, [r3, #6]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d110      	bne.n	8006ee0 <USBD_StdItfReq+0x78>
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10d      	bne.n	8006ee0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fd53 	bl	8007970 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006eca:	e009      	b.n	8006ee0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fc86 	bl	80077e0 <USBD_CtlError>
          break;
 8006ed4:	e004      	b.n	8006ee0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fc81 	bl	80077e0 <USBD_CtlError>
          break;
 8006ede:	e000      	b.n	8006ee2 <USBD_StdItfReq+0x7a>
          break;
 8006ee0:	bf00      	nop
      }
      break;
 8006ee2:	e004      	b.n	8006eee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fc7a 	bl	80077e0 <USBD_CtlError>
      break;
 8006eec:	bf00      	nop
  }

  return USBD_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	889b      	ldrh	r3, [r3, #4]
 8006f0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f14:	2b40      	cmp	r3, #64	@ 0x40
 8006f16:	d007      	beq.n	8006f28 <USBD_StdEPReq+0x30>
 8006f18:	2b40      	cmp	r3, #64	@ 0x40
 8006f1a:	f200 8146 	bhi.w	80071aa <USBD_StdEPReq+0x2b2>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <USBD_StdEPReq+0x40>
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	f040 8141 	bne.w	80071aa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
      break;
 8006f36:	e13d      	b.n	80071b4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d10a      	bne.n	8006f5a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	e12d      	b.n	80071b6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	785b      	ldrb	r3, [r3, #1]
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d007      	beq.n	8006f72 <USBD_StdEPReq+0x7a>
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	f300 811b 	bgt.w	800719e <USBD_StdEPReq+0x2a6>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d072      	beq.n	8007052 <USBD_StdEPReq+0x15a>
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d03a      	beq.n	8006fe6 <USBD_StdEPReq+0xee>
 8006f70:	e115      	b.n	800719e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d002      	beq.n	8006f82 <USBD_StdEPReq+0x8a>
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d015      	beq.n	8006fac <USBD_StdEPReq+0xb4>
 8006f80:	e02b      	b.n	8006fda <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00c      	beq.n	8006fa2 <USBD_StdEPReq+0xaa>
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	2b80      	cmp	r3, #128	@ 0x80
 8006f8c:	d009      	beq.n	8006fa2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 f8cc 	bl	8008130 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f98:	2180      	movs	r1, #128	@ 0x80
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 f8c8 	bl	8008130 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fa0:	e020      	b.n	8006fe4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fc1b 	bl	80077e0 <USBD_CtlError>
              break;
 8006faa:	e01b      	b.n	8006fe4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	885b      	ldrh	r3, [r3, #2]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10e      	bne.n	8006fd2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00b      	beq.n	8006fd2 <USBD_StdEPReq+0xda>
 8006fba:	7bbb      	ldrb	r3, [r7, #14]
 8006fbc:	2b80      	cmp	r3, #128	@ 0x80
 8006fbe:	d008      	beq.n	8006fd2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	88db      	ldrh	r3, [r3, #6]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 f8af 	bl	8008130 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fccc 	bl	8007970 <USBD_CtlSendStatus>

              break;
 8006fd8:	e004      	b.n	8006fe4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fbff 	bl	80077e0 <USBD_CtlError>
              break;
 8006fe2:	bf00      	nop
          }
          break;
 8006fe4:	e0e0      	b.n	80071a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d002      	beq.n	8006ff6 <USBD_StdEPReq+0xfe>
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d015      	beq.n	8007020 <USBD_StdEPReq+0x128>
 8006ff4:	e026      	b.n	8007044 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00c      	beq.n	8007016 <USBD_StdEPReq+0x11e>
 8006ffc:	7bbb      	ldrb	r3, [r7, #14]
 8006ffe:	2b80      	cmp	r3, #128	@ 0x80
 8007000:	d009      	beq.n	8007016 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007002:	7bbb      	ldrb	r3, [r7, #14]
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 f892 	bl	8008130 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800700c:	2180      	movs	r1, #128	@ 0x80
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 f88e 	bl	8008130 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007014:	e01c      	b.n	8007050 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fbe1 	bl	80077e0 <USBD_CtlError>
              break;
 800701e:	e017      	b.n	8007050 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	885b      	ldrh	r3, [r3, #2]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d112      	bne.n	800704e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 f899 	bl	800816e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fc97 	bl	8007970 <USBD_CtlSendStatus>
              }
              break;
 8007042:	e004      	b.n	800704e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fbca 	bl	80077e0 <USBD_CtlError>
              break;
 800704c:	e000      	b.n	8007050 <USBD_StdEPReq+0x158>
              break;
 800704e:	bf00      	nop
          }
          break;
 8007050:	e0aa      	b.n	80071a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007058:	2b02      	cmp	r3, #2
 800705a:	d002      	beq.n	8007062 <USBD_StdEPReq+0x16a>
 800705c:	2b03      	cmp	r3, #3
 800705e:	d032      	beq.n	80070c6 <USBD_StdEPReq+0x1ce>
 8007060:	e097      	b.n	8007192 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d007      	beq.n	8007078 <USBD_StdEPReq+0x180>
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	2b80      	cmp	r3, #128	@ 0x80
 800706c:	d004      	beq.n	8007078 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fbb5 	bl	80077e0 <USBD_CtlError>
                break;
 8007076:	e091      	b.n	800719c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800707c:	2b00      	cmp	r3, #0
 800707e:	da0b      	bge.n	8007098 <USBD_StdEPReq+0x1a0>
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	3310      	adds	r3, #16
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4413      	add	r3, r2
 8007094:	3304      	adds	r3, #4
 8007096:	e00b      	b.n	80070b0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	4413      	add	r3, r2
 80070ae:	3304      	adds	r3, #4
 80070b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2202      	movs	r2, #2
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fbf8 	bl	80078b4 <USBD_CtlSendData>
              break;
 80070c4:	e06a      	b.n	800719c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80070c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da11      	bge.n	80070f2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070ce:	7bbb      	ldrb	r3, [r7, #14]
 80070d0:	f003 020f 	and.w	r2, r3, #15
 80070d4:	6879      	ldr	r1, [r7, #4]
 80070d6:	4613      	mov	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	440b      	add	r3, r1
 80070e0:	3318      	adds	r3, #24
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d117      	bne.n	8007118 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fb78 	bl	80077e0 <USBD_CtlError>
                  break;
 80070f0:	e054      	b.n	800719c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	f003 020f 	and.w	r2, r3, #15
 80070f8:	6879      	ldr	r1, [r7, #4]
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	440b      	add	r3, r1
 8007104:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fb65 	bl	80077e0 <USBD_CtlError>
                  break;
 8007116:	e041      	b.n	800719c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800711c:	2b00      	cmp	r3, #0
 800711e:	da0b      	bge.n	8007138 <USBD_StdEPReq+0x240>
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007126:	4613      	mov	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	3310      	adds	r3, #16
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	4413      	add	r3, r2
 8007134:	3304      	adds	r3, #4
 8007136:	e00b      	b.n	8007150 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	4413      	add	r3, r2
 800714e:	3304      	adds	r3, #4
 8007150:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <USBD_StdEPReq+0x266>
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	2b80      	cmp	r3, #128	@ 0x80
 800715c:	d103      	bne.n	8007166 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	e00e      	b.n	8007184 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f001 f81e 	bl	80081ac <USBD_LL_IsStallEP>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2201      	movs	r2, #1
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	e002      	b.n	8007184 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2202      	movs	r2, #2
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fb92 	bl	80078b4 <USBD_CtlSendData>
              break;
 8007190:	e004      	b.n	800719c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fb23 	bl	80077e0 <USBD_CtlError>
              break;
 800719a:	bf00      	nop
          }
          break;
 800719c:	e004      	b.n	80071a8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fb1d 	bl	80077e0 <USBD_CtlError>
          break;
 80071a6:	bf00      	nop
      }
      break;
 80071a8:	e004      	b.n	80071b4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fb17 	bl	80077e0 <USBD_CtlError>
      break;
 80071b2:	bf00      	nop
  }

  return ret;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	885b      	ldrh	r3, [r3, #2]
 80071da:	0a1b      	lsrs	r3, r3, #8
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	2b06      	cmp	r3, #6
 80071e2:	f200 8128 	bhi.w	8007436 <USBD_GetDescriptor+0x276>
 80071e6:	a201      	add	r2, pc, #4	@ (adr r2, 80071ec <USBD_GetDescriptor+0x2c>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	08007209 	.word	0x08007209
 80071f0:	08007221 	.word	0x08007221
 80071f4:	08007261 	.word	0x08007261
 80071f8:	08007437 	.word	0x08007437
 80071fc:	08007437 	.word	0x08007437
 8007200:	080073d7 	.word	0x080073d7
 8007204:	08007403 	.word	0x08007403
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	7c12      	ldrb	r2, [r2, #16]
 8007214:	f107 0108 	add.w	r1, r7, #8
 8007218:	4610      	mov	r0, r2
 800721a:	4798      	blx	r3
 800721c:	60f8      	str	r0, [r7, #12]
      break;
 800721e:	e112      	b.n	8007446 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	7c1b      	ldrb	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10d      	bne.n	8007244 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800722e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007230:	f107 0208 	add.w	r2, r7, #8
 8007234:	4610      	mov	r0, r2
 8007236:	4798      	blx	r3
 8007238:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3301      	adds	r3, #1
 800723e:	2202      	movs	r2, #2
 8007240:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007242:	e100      	b.n	8007446 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800724a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724c:	f107 0208 	add.w	r2, r7, #8
 8007250:	4610      	mov	r0, r2
 8007252:	4798      	blx	r3
 8007254:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3301      	adds	r3, #1
 800725a:	2202      	movs	r2, #2
 800725c:	701a      	strb	r2, [r3, #0]
      break;
 800725e:	e0f2      	b.n	8007446 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	885b      	ldrh	r3, [r3, #2]
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b05      	cmp	r3, #5
 8007268:	f200 80ac 	bhi.w	80073c4 <USBD_GetDescriptor+0x204>
 800726c:	a201      	add	r2, pc, #4	@ (adr r2, 8007274 <USBD_GetDescriptor+0xb4>)
 800726e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007272:	bf00      	nop
 8007274:	0800728d 	.word	0x0800728d
 8007278:	080072c1 	.word	0x080072c1
 800727c:	080072f5 	.word	0x080072f5
 8007280:	08007329 	.word	0x08007329
 8007284:	0800735d 	.word	0x0800735d
 8007288:	08007391 	.word	0x08007391
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00b      	beq.n	80072b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	7c12      	ldrb	r2, [r2, #16]
 80072a4:	f107 0108 	add.w	r1, r7, #8
 80072a8:	4610      	mov	r0, r2
 80072aa:	4798      	blx	r3
 80072ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ae:	e091      	b.n	80073d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fa94 	bl	80077e0 <USBD_CtlError>
            err++;
 80072b8:	7afb      	ldrb	r3, [r7, #11]
 80072ba:	3301      	adds	r3, #1
 80072bc:	72fb      	strb	r3, [r7, #11]
          break;
 80072be:	e089      	b.n	80073d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	7c12      	ldrb	r2, [r2, #16]
 80072d8:	f107 0108 	add.w	r1, r7, #8
 80072dc:	4610      	mov	r0, r2
 80072de:	4798      	blx	r3
 80072e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072e2:	e077      	b.n	80073d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fa7a 	bl	80077e0 <USBD_CtlError>
            err++;
 80072ec:	7afb      	ldrb	r3, [r7, #11]
 80072ee:	3301      	adds	r3, #1
 80072f0:	72fb      	strb	r3, [r7, #11]
          break;
 80072f2:	e06f      	b.n	80073d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00b      	beq.n	8007318 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	7c12      	ldrb	r2, [r2, #16]
 800730c:	f107 0108 	add.w	r1, r7, #8
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
 8007314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007316:	e05d      	b.n	80073d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa60 	bl	80077e0 <USBD_CtlError>
            err++;
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	3301      	adds	r3, #1
 8007324:	72fb      	strb	r3, [r7, #11]
          break;
 8007326:	e055      	b.n	80073d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00b      	beq.n	800734c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	7c12      	ldrb	r2, [r2, #16]
 8007340:	f107 0108 	add.w	r1, r7, #8
 8007344:	4610      	mov	r0, r2
 8007346:	4798      	blx	r3
 8007348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800734a:	e043      	b.n	80073d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa46 	bl	80077e0 <USBD_CtlError>
            err++;
 8007354:	7afb      	ldrb	r3, [r7, #11]
 8007356:	3301      	adds	r3, #1
 8007358:	72fb      	strb	r3, [r7, #11]
          break;
 800735a:	e03b      	b.n	80073d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	7c12      	ldrb	r2, [r2, #16]
 8007374:	f107 0108 	add.w	r1, r7, #8
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
 800737c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800737e:	e029      	b.n	80073d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa2c 	bl	80077e0 <USBD_CtlError>
            err++;
 8007388:	7afb      	ldrb	r3, [r7, #11]
 800738a:	3301      	adds	r3, #1
 800738c:	72fb      	strb	r3, [r7, #11]
          break;
 800738e:	e021      	b.n	80073d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	7c12      	ldrb	r2, [r2, #16]
 80073a8:	f107 0108 	add.w	r1, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b2:	e00f      	b.n	80073d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa12 	bl	80077e0 <USBD_CtlError>
            err++;
 80073bc:	7afb      	ldrb	r3, [r7, #11]
 80073be:	3301      	adds	r3, #1
 80073c0:	72fb      	strb	r3, [r7, #11]
          break;
 80073c2:	e007      	b.n	80073d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fa0a 	bl	80077e0 <USBD_CtlError>
          err++;
 80073cc:	7afb      	ldrb	r3, [r7, #11]
 80073ce:	3301      	adds	r3, #1
 80073d0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80073d2:	e038      	b.n	8007446 <USBD_GetDescriptor+0x286>
 80073d4:	e037      	b.n	8007446 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	7c1b      	ldrb	r3, [r3, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d109      	bne.n	80073f2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e6:	f107 0208 	add.w	r2, r7, #8
 80073ea:	4610      	mov	r0, r2
 80073ec:	4798      	blx	r3
 80073ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073f0:	e029      	b.n	8007446 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f9f3 	bl	80077e0 <USBD_CtlError>
        err++;
 80073fa:	7afb      	ldrb	r3, [r7, #11]
 80073fc:	3301      	adds	r3, #1
 80073fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007400:	e021      	b.n	8007446 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	7c1b      	ldrb	r3, [r3, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10d      	bne.n	8007426 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007412:	f107 0208 	add.w	r2, r7, #8
 8007416:	4610      	mov	r0, r2
 8007418:	4798      	blx	r3
 800741a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3301      	adds	r3, #1
 8007420:	2207      	movs	r2, #7
 8007422:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007424:	e00f      	b.n	8007446 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f9d9 	bl	80077e0 <USBD_CtlError>
        err++;
 800742e:	7afb      	ldrb	r3, [r7, #11]
 8007430:	3301      	adds	r3, #1
 8007432:	72fb      	strb	r3, [r7, #11]
      break;
 8007434:	e007      	b.n	8007446 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f9d1 	bl	80077e0 <USBD_CtlError>
      err++;
 800743e:	7afb      	ldrb	r3, [r7, #11]
 8007440:	3301      	adds	r3, #1
 8007442:	72fb      	strb	r3, [r7, #11]
      break;
 8007444:	bf00      	nop
  }

  if (err != 0U)
 8007446:	7afb      	ldrb	r3, [r7, #11]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d11c      	bne.n	8007486 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800744c:	893b      	ldrh	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d011      	beq.n	8007476 <USBD_GetDescriptor+0x2b6>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	88db      	ldrh	r3, [r3, #6]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00d      	beq.n	8007476 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	88da      	ldrh	r2, [r3, #6]
 800745e:	893b      	ldrh	r3, [r7, #8]
 8007460:	4293      	cmp	r3, r2
 8007462:	bf28      	it	cs
 8007464:	4613      	movcs	r3, r2
 8007466:	b29b      	uxth	r3, r3
 8007468:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800746a:	893b      	ldrh	r3, [r7, #8]
 800746c:	461a      	mov	r2, r3
 800746e:	68f9      	ldr	r1, [r7, #12]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fa1f 	bl	80078b4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	88db      	ldrh	r3, [r3, #6]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d104      	bne.n	8007488 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa76 	bl	8007970 <USBD_CtlSendStatus>
 8007484:	e000      	b.n	8007488 <USBD_GetDescriptor+0x2c8>
    return;
 8007486:	bf00      	nop
    }
  }
}
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop

08007490 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	889b      	ldrh	r3, [r3, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d130      	bne.n	8007504 <USBD_SetAddress+0x74>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	88db      	ldrh	r3, [r3, #6]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d12c      	bne.n	8007504 <USBD_SetAddress+0x74>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	885b      	ldrh	r3, [r3, #2]
 80074ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80074b0:	d828      	bhi.n	8007504 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	885b      	ldrh	r3, [r3, #2]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d104      	bne.n	80074d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f988 	bl	80077e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074d0:	e01d      	b.n	800750e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	7bfa      	ldrb	r2, [r7, #15]
 80074d6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fe8f 	bl	8008202 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fa43 	bl	8007970 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d004      	beq.n	80074fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f8:	e009      	b.n	800750e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007502:	e004      	b.n	800750e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f96a 	bl	80077e0 <USBD_CtlError>
  }
}
 800750c:	bf00      	nop
 800750e:	bf00      	nop
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	885b      	ldrh	r3, [r3, #2]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	4b41      	ldr	r3, [pc, #260]	@ (8007630 <USBD_SetConfig+0x118>)
 800752a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800752c:	4b40      	ldr	r3, [pc, #256]	@ (8007630 <USBD_SetConfig+0x118>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d904      	bls.n	800753e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f952 	bl	80077e0 <USBD_CtlError>
 800753c:	e075      	b.n	800762a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007544:	2b02      	cmp	r3, #2
 8007546:	d002      	beq.n	800754e <USBD_SetConfig+0x36>
 8007548:	2b03      	cmp	r3, #3
 800754a:	d023      	beq.n	8007594 <USBD_SetConfig+0x7c>
 800754c:	e062      	b.n	8007614 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800754e:	4b38      	ldr	r3, [pc, #224]	@ (8007630 <USBD_SetConfig+0x118>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d01a      	beq.n	800758c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007556:	4b36      	ldr	r3, [pc, #216]	@ (8007630 <USBD_SetConfig+0x118>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2203      	movs	r2, #3
 8007564:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007568:	4b31      	ldr	r3, [pc, #196]	@ (8007630 <USBD_SetConfig+0x118>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff f9ae 	bl	80068d0 <USBD_SetClassConfig>
 8007574:	4603      	mov	r3, r0
 8007576:	2b02      	cmp	r3, #2
 8007578:	d104      	bne.n	8007584 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f92f 	bl	80077e0 <USBD_CtlError>
            return;
 8007582:	e052      	b.n	800762a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f9f3 	bl	8007970 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800758a:	e04e      	b.n	800762a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f9ef 	bl	8007970 <USBD_CtlSendStatus>
        break;
 8007592:	e04a      	b.n	800762a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007594:	4b26      	ldr	r3, [pc, #152]	@ (8007630 <USBD_SetConfig+0x118>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d112      	bne.n	80075c2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80075a4:	4b22      	ldr	r3, [pc, #136]	@ (8007630 <USBD_SetConfig+0x118>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80075ae:	4b20      	ldr	r3, [pc, #128]	@ (8007630 <USBD_SetConfig+0x118>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff f9aa 	bl	800690e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f9d8 	bl	8007970 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075c0:	e033      	b.n	800762a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80075c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007630 <USBD_SetConfig+0x118>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d01d      	beq.n	800760c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff f998 	bl	800690e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80075de:	4b14      	ldr	r3, [pc, #80]	@ (8007630 <USBD_SetConfig+0x118>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075e8:	4b11      	ldr	r3, [pc, #68]	@ (8007630 <USBD_SetConfig+0x118>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7ff f96e 	bl	80068d0 <USBD_SetClassConfig>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d104      	bne.n	8007604 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f8ef 	bl	80077e0 <USBD_CtlError>
            return;
 8007602:	e012      	b.n	800762a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f9b3 	bl	8007970 <USBD_CtlSendStatus>
        break;
 800760a:	e00e      	b.n	800762a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f9af 	bl	8007970 <USBD_CtlSendStatus>
        break;
 8007612:	e00a      	b.n	800762a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f8e2 	bl	80077e0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800761c:	4b04      	ldr	r3, [pc, #16]	@ (8007630 <USBD_SetConfig+0x118>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff f973 	bl	800690e <USBD_ClrClassConfig>
        break;
 8007628:	bf00      	nop
    }
  }
}
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20000334 	.word	0x20000334

08007634 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	88db      	ldrh	r3, [r3, #6]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d004      	beq.n	8007650 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f8c9 	bl	80077e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800764e:	e022      	b.n	8007696 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007656:	2b02      	cmp	r3, #2
 8007658:	dc02      	bgt.n	8007660 <USBD_GetConfig+0x2c>
 800765a:	2b00      	cmp	r3, #0
 800765c:	dc03      	bgt.n	8007666 <USBD_GetConfig+0x32>
 800765e:	e015      	b.n	800768c <USBD_GetConfig+0x58>
 8007660:	2b03      	cmp	r3, #3
 8007662:	d00b      	beq.n	800767c <USBD_GetConfig+0x48>
 8007664:	e012      	b.n	800768c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3308      	adds	r3, #8
 8007670:	2201      	movs	r2, #1
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f91d 	bl	80078b4 <USBD_CtlSendData>
        break;
 800767a:	e00c      	b.n	8007696 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3304      	adds	r3, #4
 8007680:	2201      	movs	r2, #1
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f915 	bl	80078b4 <USBD_CtlSendData>
        break;
 800768a:	e004      	b.n	8007696 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f8a6 	bl	80077e0 <USBD_CtlError>
        break;
 8007694:	bf00      	nop
}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076ae:	3b01      	subs	r3, #1
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d81e      	bhi.n	80076f2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	88db      	ldrh	r3, [r3, #6]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d004      	beq.n	80076c6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f88e 	bl	80077e0 <USBD_CtlError>
        break;
 80076c4:	e01a      	b.n	80076fc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d005      	beq.n	80076e2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f043 0202 	orr.w	r2, r3, #2
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	330c      	adds	r3, #12
 80076e6:	2202      	movs	r2, #2
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f8e2 	bl	80078b4 <USBD_CtlSendData>
      break;
 80076f0:	e004      	b.n	80076fc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f873 	bl	80077e0 <USBD_CtlError>
      break;
 80076fa:	bf00      	nop
  }
}
 80076fc:	bf00      	nop
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	885b      	ldrh	r3, [r3, #2]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d106      	bne.n	8007724 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f926 	bl	8007970 <USBD_CtlSendStatus>
  }
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800773c:	3b01      	subs	r3, #1
 800773e:	2b02      	cmp	r3, #2
 8007740:	d80b      	bhi.n	800775a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	885b      	ldrh	r3, [r3, #2]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d10c      	bne.n	8007764 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f90c 	bl	8007970 <USBD_CtlSendStatus>
      }
      break;
 8007758:	e004      	b.n	8007764 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f83f 	bl	80077e0 <USBD_CtlError>
      break;
 8007762:	e000      	b.n	8007766 <USBD_ClrFeature+0x3a>
      break;
 8007764:	bf00      	nop
  }
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781a      	ldrb	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	785a      	ldrb	r2, [r3, #1]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	3302      	adds	r3, #2
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	3303      	adds	r3, #3
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	b29b      	uxth	r3, r3
 800779a:	4413      	add	r3, r2
 800779c:	b29a      	uxth	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	3304      	adds	r3, #4
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	3305      	adds	r3, #5
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	4413      	add	r3, r2
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	3306      	adds	r3, #6
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	3307      	adds	r3, #7
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	021b      	lsls	r3, r3, #8
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	4413      	add	r3, r2
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	80da      	strh	r2, [r3, #6]

}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80077ea:	2180      	movs	r1, #128	@ 0x80
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fc9f 	bl	8008130 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80077f2:	2100      	movs	r1, #0
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fc9b 	bl	8008130 <USBD_LL_StallEP>
}
 80077fa:	bf00      	nop
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d032      	beq.n	800787e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f834 	bl	8007886 <USBD_GetLen>
 800781e:	4603      	mov	r3, r0
 8007820:	3301      	adds	r3, #1
 8007822:	b29b      	uxth	r3, r3
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	75fa      	strb	r2, [r7, #23]
 8007832:	461a      	mov	r2, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4413      	add	r3, r2
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	7812      	ldrb	r2, [r2, #0]
 800783c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	75fa      	strb	r2, [r7, #23]
 8007844:	461a      	mov	r2, r3
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	4413      	add	r3, r2
 800784a:	2203      	movs	r2, #3
 800784c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800784e:	e012      	b.n	8007876 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	60fa      	str	r2, [r7, #12]
 8007856:	7dfa      	ldrb	r2, [r7, #23]
 8007858:	1c51      	adds	r1, r2, #1
 800785a:	75f9      	strb	r1, [r7, #23]
 800785c:	4611      	mov	r1, r2
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	440a      	add	r2, r1
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	75fa      	strb	r2, [r7, #23]
 800786c:	461a      	mov	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4413      	add	r3, r2
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e8      	bne.n	8007850 <USBD_GetString+0x4e>
    }
  }
}
 800787e:	bf00      	nop
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007886:	b480      	push	{r7}
 8007888:	b085      	sub	sp, #20
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007892:	e005      	b.n	80078a0 <USBD_GetLen+0x1a>
  {
    len++;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	3301      	adds	r3, #1
 8007898:	73fb      	strb	r3, [r7, #15]
    buf++;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3301      	adds	r3, #1
 800789e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1f5      	bne.n	8007894 <USBD_GetLen+0xe>
  }

  return len;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bc80      	pop	{r7}
 80078b2:	4770      	bx	lr

080078b4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	4613      	mov	r3, r2
 80078c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2202      	movs	r2, #2
 80078c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80078d0:	88fa      	ldrh	r2, [r7, #6]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	2100      	movs	r1, #0
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 fcaf 	bl	8008240 <USBD_LL_Transmit>

  return USBD_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4613      	mov	r3, r2
 80078f8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078fa:	88fb      	ldrh	r3, [r7, #6]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	2100      	movs	r1, #0
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 fc9d 	bl	8008240 <USBD_LL_Transmit>

  return USBD_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	4613      	mov	r3, r2
 800791c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2203      	movs	r2, #3
 8007922:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800792e:	88fa      	ldrh	r2, [r7, #6]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007936:	88fb      	ldrh	r3, [r7, #6]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	2100      	movs	r1, #0
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fca2 	bl	8008286 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	4613      	mov	r3, r2
 8007958:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800795a:	88fb      	ldrh	r3, [r7, #6]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	2100      	movs	r1, #0
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fc90 	bl	8008286 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2204      	movs	r2, #4
 800797c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007980:	2300      	movs	r3, #0
 8007982:	2200      	movs	r2, #0
 8007984:	2100      	movs	r1, #0
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fc5a 	bl	8008240 <USBD_LL_Transmit>

  return USBD_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2205      	movs	r2, #5
 80079a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079a6:	2300      	movs	r3, #0
 80079a8:	2200      	movs	r2, #0
 80079aa:	2100      	movs	r1, #0
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fc6a 	bl	8008286 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079c0:	2200      	movs	r2, #0
 80079c2:	4912      	ldr	r1, [pc, #72]	@ (8007a0c <MX_USB_DEVICE_Init+0x50>)
 80079c4:	4812      	ldr	r0, [pc, #72]	@ (8007a10 <MX_USB_DEVICE_Init+0x54>)
 80079c6:	f7fe ff29 	bl	800681c <USBD_Init>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079d0:	f7f9 f90a 	bl	8000be8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80079d4:	490f      	ldr	r1, [pc, #60]	@ (8007a14 <MX_USB_DEVICE_Init+0x58>)
 80079d6:	480e      	ldr	r0, [pc, #56]	@ (8007a10 <MX_USB_DEVICE_Init+0x54>)
 80079d8:	f7fe ff4b 	bl	8006872 <USBD_RegisterClass>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079e2:	f7f9 f901 	bl	8000be8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80079e6:	490c      	ldr	r1, [pc, #48]	@ (8007a18 <MX_USB_DEVICE_Init+0x5c>)
 80079e8:	4809      	ldr	r0, [pc, #36]	@ (8007a10 <MX_USB_DEVICE_Init+0x54>)
 80079ea:	f7fe feab 	bl	8006744 <USBD_CDC_RegisterInterface>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079f4:	f7f9 f8f8 	bl	8000be8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079f8:	4805      	ldr	r0, [pc, #20]	@ (8007a10 <MX_USB_DEVICE_Init+0x54>)
 80079fa:	f7fe ff53 	bl	80068a4 <USBD_Start>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a04:	f7f9 f8f0 	bl	8000be8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a08:	bf00      	nop
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	2000012c 	.word	0x2000012c
 8007a10:	20000338 	.word	0x20000338
 8007a14:	20000018 	.word	0x20000018
 8007a18:	2000011c 	.word	0x2000011c

08007a1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a20:	2200      	movs	r2, #0
 8007a22:	4905      	ldr	r1, [pc, #20]	@ (8007a38 <CDC_Init_FS+0x1c>)
 8007a24:	4805      	ldr	r0, [pc, #20]	@ (8007a3c <CDC_Init_FS+0x20>)
 8007a26:	f7fe fea3 	bl	8006770 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a2a:	4905      	ldr	r1, [pc, #20]	@ (8007a40 <CDC_Init_FS+0x24>)
 8007a2c:	4803      	ldr	r0, [pc, #12]	@ (8007a3c <CDC_Init_FS+0x20>)
 8007a2e:	f7fe feb8 	bl	80067a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	200009fc 	.word	0x200009fc
 8007a3c:	20000338 	.word	0x20000338
 8007a40:	200005fc 	.word	0x200005fc

08007a44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a44:	b480      	push	{r7}
 8007a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bc80      	pop	{r7}
 8007a50:	4770      	bx	lr
	...

08007a54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	6039      	str	r1, [r7, #0]
 8007a5e:	71fb      	strb	r3, [r7, #7]
 8007a60:	4613      	mov	r3, r2
 8007a62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	2b23      	cmp	r3, #35	@ 0x23
 8007a68:	d84a      	bhi.n	8007b00 <CDC_Control_FS+0xac>
 8007a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a70 <CDC_Control_FS+0x1c>)
 8007a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a70:	08007b01 	.word	0x08007b01
 8007a74:	08007b01 	.word	0x08007b01
 8007a78:	08007b01 	.word	0x08007b01
 8007a7c:	08007b01 	.word	0x08007b01
 8007a80:	08007b01 	.word	0x08007b01
 8007a84:	08007b01 	.word	0x08007b01
 8007a88:	08007b01 	.word	0x08007b01
 8007a8c:	08007b01 	.word	0x08007b01
 8007a90:	08007b01 	.word	0x08007b01
 8007a94:	08007b01 	.word	0x08007b01
 8007a98:	08007b01 	.word	0x08007b01
 8007a9c:	08007b01 	.word	0x08007b01
 8007aa0:	08007b01 	.word	0x08007b01
 8007aa4:	08007b01 	.word	0x08007b01
 8007aa8:	08007b01 	.word	0x08007b01
 8007aac:	08007b01 	.word	0x08007b01
 8007ab0:	08007b01 	.word	0x08007b01
 8007ab4:	08007b01 	.word	0x08007b01
 8007ab8:	08007b01 	.word	0x08007b01
 8007abc:	08007b01 	.word	0x08007b01
 8007ac0:	08007b01 	.word	0x08007b01
 8007ac4:	08007b01 	.word	0x08007b01
 8007ac8:	08007b01 	.word	0x08007b01
 8007acc:	08007b01 	.word	0x08007b01
 8007ad0:	08007b01 	.word	0x08007b01
 8007ad4:	08007b01 	.word	0x08007b01
 8007ad8:	08007b01 	.word	0x08007b01
 8007adc:	08007b01 	.word	0x08007b01
 8007ae0:	08007b01 	.word	0x08007b01
 8007ae4:	08007b01 	.word	0x08007b01
 8007ae8:	08007b01 	.word	0x08007b01
 8007aec:	08007b01 	.word	0x08007b01
 8007af0:	08007b01 	.word	0x08007b01
 8007af4:	08007b01 	.word	0x08007b01
 8007af8:	08007b01 	.word	0x08007b01
 8007afc:	08007b01 	.word	0x08007b01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b00:	bf00      	nop
  }

  return (USBD_OK);
 8007b02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop

08007b10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	4805      	ldr	r0, [pc, #20]	@ (8007b34 <CDC_Receive_FS+0x24>)
 8007b1e:	f7fe fe40 	bl	80067a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b22:	4804      	ldr	r0, [pc, #16]	@ (8007b34 <CDC_Receive_FS+0x24>)
 8007b24:	f7fe fe50 	bl	80067c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000338 	.word	0x20000338

08007b38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	6039      	str	r1, [r7, #0]
 8007b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2212      	movs	r2, #18
 8007b48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b4a:	4b03      	ldr	r3, [pc, #12]	@ (8007b58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bc80      	pop	{r7}
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	20000148 	.word	0x20000148

08007b5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4603      	mov	r3, r0
 8007b64:	6039      	str	r1, [r7, #0]
 8007b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2204      	movs	r2, #4
 8007b6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b6e:	4b03      	ldr	r3, [pc, #12]	@ (8007b7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	2000015c 	.word	0x2000015c

08007b80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d105      	bne.n	8007b9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	4907      	ldr	r1, [pc, #28]	@ (8007bb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b96:	4808      	ldr	r0, [pc, #32]	@ (8007bb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b98:	f7ff fe33 	bl	8007802 <USBD_GetString>
 8007b9c:	e004      	b.n	8007ba8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4904      	ldr	r1, [pc, #16]	@ (8007bb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ba2:	4805      	ldr	r0, [pc, #20]	@ (8007bb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ba4:	f7ff fe2d 	bl	8007802 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ba8:	4b02      	ldr	r3, [pc, #8]	@ (8007bb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000dfc 	.word	0x20000dfc
 8007bb8:	080085f8 	.word	0x080085f8

08007bbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	6039      	str	r1, [r7, #0]
 8007bc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	4904      	ldr	r1, [pc, #16]	@ (8007bdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bcc:	4804      	ldr	r0, [pc, #16]	@ (8007be0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bce:	f7ff fe18 	bl	8007802 <USBD_GetString>
  return USBD_StrDesc;
 8007bd2:	4b02      	ldr	r3, [pc, #8]	@ (8007bdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	20000dfc 	.word	0x20000dfc
 8007be0:	08008610 	.word	0x08008610

08007be4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	6039      	str	r1, [r7, #0]
 8007bee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	221a      	movs	r2, #26
 8007bf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007bf6:	f000 f843 	bl	8007c80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007bfa:	4b02      	ldr	r3, [pc, #8]	@ (8007c04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	20000160 	.word	0x20000160

08007c08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	6039      	str	r1, [r7, #0]
 8007c12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d105      	bne.n	8007c26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	4907      	ldr	r1, [pc, #28]	@ (8007c3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c1e:	4808      	ldr	r0, [pc, #32]	@ (8007c40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c20:	f7ff fdef 	bl	8007802 <USBD_GetString>
 8007c24:	e004      	b.n	8007c30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	4904      	ldr	r1, [pc, #16]	@ (8007c3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c2a:	4805      	ldr	r0, [pc, #20]	@ (8007c40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c2c:	f7ff fde9 	bl	8007802 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c30:	4b02      	ldr	r3, [pc, #8]	@ (8007c3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20000dfc 	.word	0x20000dfc
 8007c40:	08008624 	.word	0x08008624

08007c44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	6039      	str	r1, [r7, #0]
 8007c4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d105      	bne.n	8007c62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4907      	ldr	r1, [pc, #28]	@ (8007c78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c5a:	4808      	ldr	r0, [pc, #32]	@ (8007c7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c5c:	f7ff fdd1 	bl	8007802 <USBD_GetString>
 8007c60:	e004      	b.n	8007c6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	4904      	ldr	r1, [pc, #16]	@ (8007c78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c66:	4805      	ldr	r0, [pc, #20]	@ (8007c7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c68:	f7ff fdcb 	bl	8007802 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c6c:	4b02      	ldr	r3, [pc, #8]	@ (8007c78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20000dfc 	.word	0x20000dfc
 8007c7c:	08008630 	.word	0x08008630

08007c80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d009      	beq.n	8007ca8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c94:	2208      	movs	r2, #8
 8007c96:	4906      	ldr	r1, [pc, #24]	@ (8007cb0 <Get_SerialNum+0x30>)
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f80d 	bl	8007cb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c9e:	2204      	movs	r2, #4
 8007ca0:	4904      	ldr	r1, [pc, #16]	@ (8007cb4 <Get_SerialNum+0x34>)
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f808 	bl	8007cb8 <IntToUnicode>
  }
}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20000162 	.word	0x20000162
 8007cb4:	20000172 	.word	0x20000172

08007cb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75fb      	strb	r3, [r7, #23]
 8007cce:	e027      	b.n	8007d20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	0f1b      	lsrs	r3, r3, #28
 8007cd4:	2b09      	cmp	r3, #9
 8007cd6:	d80b      	bhi.n	8007cf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	0f1b      	lsrs	r3, r3, #28
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	440b      	add	r3, r1
 8007ce8:	3230      	adds	r2, #48	@ 0x30
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	e00a      	b.n	8007d06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	0f1b      	lsrs	r3, r3, #28
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	440b      	add	r3, r1
 8007d00:	3237      	adds	r2, #55	@ 0x37
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	011b      	lsls	r3, r3, #4
 8007d0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	3301      	adds	r3, #1
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	4413      	add	r3, r2
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	75fb      	strb	r3, [r7, #23]
 8007d20:	7dfa      	ldrb	r2, [r7, #23]
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d3d3      	bcc.n	8007cd0 <IntToUnicode+0x18>
  }
}
 8007d28:	bf00      	nop
 8007d2a:	bf00      	nop
 8007d2c:	371c      	adds	r7, #28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bc80      	pop	{r7}
 8007d32:	4770      	bx	lr

08007d34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08a      	sub	sp, #40	@ 0x28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d3c:	f107 0314 	add.w	r3, r7, #20
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	605a      	str	r2, [r3, #4]
 8007d46:	609a      	str	r2, [r3, #8]
 8007d48:	60da      	str	r2, [r3, #12]
 8007d4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d54:	d147      	bne.n	8007de6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d56:	2300      	movs	r3, #0
 8007d58:	613b      	str	r3, [r7, #16]
 8007d5a:	4b25      	ldr	r3, [pc, #148]	@ (8007df0 <HAL_PCD_MspInit+0xbc>)
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5e:	4a24      	ldr	r2, [pc, #144]	@ (8007df0 <HAL_PCD_MspInit+0xbc>)
 8007d60:	f043 0301 	orr.w	r3, r3, #1
 8007d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d66:	4b22      	ldr	r3, [pc, #136]	@ (8007df0 <HAL_PCD_MspInit+0xbc>)
 8007d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007d72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d80:	f107 0314 	add.w	r3, r7, #20
 8007d84:	4619      	mov	r1, r3
 8007d86:	481b      	ldr	r0, [pc, #108]	@ (8007df4 <HAL_PCD_MspInit+0xc0>)
 8007d88:	f7fa f912 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007d8c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d92:	2302      	movs	r3, #2
 8007d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d9e:	230a      	movs	r3, #10
 8007da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007da2:	f107 0314 	add.w	r3, r7, #20
 8007da6:	4619      	mov	r1, r3
 8007da8:	4812      	ldr	r0, [pc, #72]	@ (8007df4 <HAL_PCD_MspInit+0xc0>)
 8007daa:	f7fa f901 	bl	8001fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007dae:	4b10      	ldr	r3, [pc, #64]	@ (8007df0 <HAL_PCD_MspInit+0xbc>)
 8007db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007db2:	4a0f      	ldr	r2, [pc, #60]	@ (8007df0 <HAL_PCD_MspInit+0xbc>)
 8007db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007db8:	6353      	str	r3, [r2, #52]	@ 0x34
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]
 8007dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8007df0 <HAL_PCD_MspInit+0xbc>)
 8007dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8007df0 <HAL_PCD_MspInit+0xbc>)
 8007dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007dca:	4b09      	ldr	r3, [pc, #36]	@ (8007df0 <HAL_PCD_MspInit+0xbc>)
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2100      	movs	r1, #0
 8007dda:	2043      	movs	r0, #67	@ 0x43
 8007ddc:	f7fa f8b1 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007de0:	2043      	movs	r0, #67	@ 0x43
 8007de2:	f7fa f8ca 	bl	8001f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007de6:	bf00      	nop
 8007de8:	3728      	adds	r7, #40	@ 0x28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	40023800 	.word	0x40023800
 8007df4:	40020000 	.word	0x40020000

08007df8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	@ 0x4d8
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7fe fd90 	bl	8006934 <USBD_LL_SetupStage>
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	@ 0x4d8
 8007e2e:	78fa      	ldrb	r2, [r7, #3]
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	4613      	mov	r3, r2
 8007e34:	00db      	lsls	r3, r3, #3
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	440b      	add	r3, r1
 8007e3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	78fb      	ldrb	r3, [r7, #3]
 8007e44:	4619      	mov	r1, r3
 8007e46:	f7fe fdc2 	bl	80069ce <USBD_LL_DataOutStage>
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b082      	sub	sp, #8
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	@ 0x4d8
 8007e64:	78fa      	ldrb	r2, [r7, #3]
 8007e66:	6879      	ldr	r1, [r7, #4]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	00db      	lsls	r3, r3, #3
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	440b      	add	r3, r1
 8007e72:	3320      	adds	r3, #32
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	78fb      	ldrb	r3, [r7, #3]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	f7fe fe19 	bl	8006ab0 <USBD_LL_DataInStage>
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fe ff29 	bl	8006cec <USBD_LL_SOF>
}
 8007e9a:	bf00      	nop
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	79db      	ldrb	r3, [r3, #7]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d102      	bne.n	8007ebc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
 8007eba:	e008      	b.n	8007ece <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	79db      	ldrb	r3, [r3, #7]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d102      	bne.n	8007eca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]
 8007ec8:	e001      	b.n	8007ece <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007eca:	f7f8 fe8d 	bl	8000be8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007ed4:	7bfa      	ldrb	r2, [r7, #15]
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe fecf 	bl	8006c7c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fe fe88 	bl	8006bfa <USBD_LL_Reset>
}
 8007eea:	bf00      	nop
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fec9 	bl	8006c9a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	6812      	ldr	r2, [r2, #0]
 8007f16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f1a:	f043 0301 	orr.w	r3, r3, #1
 8007f1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	7adb      	ldrb	r3, [r3, #11]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f28:	4b04      	ldr	r3, [pc, #16]	@ (8007f3c <HAL_PCD_SuspendCallback+0x48>)
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	4a03      	ldr	r2, [pc, #12]	@ (8007f3c <HAL_PCD_SuspendCallback+0x48>)
 8007f2e:	f043 0306 	orr.w	r3, r3, #6
 8007f32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	e000ed00 	.word	0xe000ed00

08007f40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe feb7 	bl	8006cc2 <USBD_LL_Resume>
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007f6e:	78fa      	ldrb	r2, [r7, #3]
 8007f70:	4611      	mov	r1, r2
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe fee0 	bl	8006d38 <USBD_LL_IsoOUTIncomplete>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007f92:	78fa      	ldrb	r2, [r7, #3]
 8007f94:	4611      	mov	r1, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fec2 	bl	8006d20 <USBD_LL_IsoINIncomplete>
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fe fecc 	bl	8006d50 <USBD_LL_DevConnected>
}
 8007fb8:	bf00      	nop
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fec8 	bl	8006d64 <USBD_LL_DevDisconnected>
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d139      	bne.n	8008060 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007fec:	4a1f      	ldr	r2, [pc, #124]	@ (800806c <USBD_LL_Init+0x90>)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8c2 34d8 	str.w	r3, [r2, #1240]	@ 0x4d8
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800806c <USBD_LL_Init+0x90>)
 8007ff8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800806c <USBD_LL_Init+0x90>)
 8007ffe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008002:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008004:	4b19      	ldr	r3, [pc, #100]	@ (800806c <USBD_LL_Init+0x90>)
 8008006:	2204      	movs	r2, #4
 8008008:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800800a:	4b18      	ldr	r3, [pc, #96]	@ (800806c <USBD_LL_Init+0x90>)
 800800c:	2202      	movs	r2, #2
 800800e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008010:	4b16      	ldr	r3, [pc, #88]	@ (800806c <USBD_LL_Init+0x90>)
 8008012:	2200      	movs	r2, #0
 8008014:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008016:	4b15      	ldr	r3, [pc, #84]	@ (800806c <USBD_LL_Init+0x90>)
 8008018:	2202      	movs	r2, #2
 800801a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800801c:	4b13      	ldr	r3, [pc, #76]	@ (800806c <USBD_LL_Init+0x90>)
 800801e:	2200      	movs	r2, #0
 8008020:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008022:	4b12      	ldr	r3, [pc, #72]	@ (800806c <USBD_LL_Init+0x90>)
 8008024:	2200      	movs	r2, #0
 8008026:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008028:	4b10      	ldr	r3, [pc, #64]	@ (800806c <USBD_LL_Init+0x90>)
 800802a:	2201      	movs	r2, #1
 800802c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800802e:	4b0f      	ldr	r3, [pc, #60]	@ (800806c <USBD_LL_Init+0x90>)
 8008030:	2200      	movs	r2, #0
 8008032:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008034:	480d      	ldr	r0, [pc, #52]	@ (800806c <USBD_LL_Init+0x90>)
 8008036:	f7fa f98a 	bl	800234e <HAL_PCD_Init>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8008040:	f7f8 fdd2 	bl	8000be8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008044:	2180      	movs	r1, #128	@ 0x80
 8008046:	4809      	ldr	r0, [pc, #36]	@ (800806c <USBD_LL_Init+0x90>)
 8008048:	f7fb fb92 	bl	8003770 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800804c:	2240      	movs	r2, #64	@ 0x40
 800804e:	2100      	movs	r1, #0
 8008050:	4806      	ldr	r0, [pc, #24]	@ (800806c <USBD_LL_Init+0x90>)
 8008052:	f7fb fb47 	bl	80036e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008056:	2280      	movs	r2, #128	@ 0x80
 8008058:	2101      	movs	r1, #1
 800805a:	4804      	ldr	r0, [pc, #16]	@ (800806c <USBD_LL_Init+0x90>)
 800805c:	f7fb fb42 	bl	80036e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000ffc 	.word	0x20000ffc

08008070 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008086:	4618      	mov	r0, r3
 8008088:	f7fa fa70 	bl	800256c <HAL_PCD_Start>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f92e 	bl	80082f4 <USBD_Get_USB_Status>
 8008098:	4603      	mov	r3, r0
 800809a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800809c:	7bbb      	ldrb	r3, [r7, #14]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	4608      	mov	r0, r1
 80080b0:	4611      	mov	r1, r2
 80080b2:	461a      	mov	r2, r3
 80080b4:	4603      	mov	r3, r0
 80080b6:	70fb      	strb	r3, [r7, #3]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70bb      	strb	r3, [r7, #2]
 80080bc:	4613      	mov	r3, r2
 80080be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80080ce:	78bb      	ldrb	r3, [r7, #2]
 80080d0:	883a      	ldrh	r2, [r7, #0]
 80080d2:	78f9      	ldrb	r1, [r7, #3]
 80080d4:	f7fa ff23 	bl	8002f1e <HAL_PCD_EP_Open>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 f908 	bl	80082f4 <USBD_Get_USB_Status>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	460b      	mov	r3, r1
 80080fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800810c:	78fa      	ldrb	r2, [r7, #3]
 800810e:	4611      	mov	r1, r2
 8008110:	4618      	mov	r0, r3
 8008112:	f7fa ff6c 	bl	8002fee <HAL_PCD_EP_Close>
 8008116:	4603      	mov	r3, r0
 8008118:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	4618      	mov	r0, r3
 800811e:	f000 f8e9 	bl	80082f4 <USBD_Get_USB_Status>
 8008122:	4603      	mov	r3, r0
 8008124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008126:	7bbb      	ldrb	r3, [r7, #14]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800814a:	78fa      	ldrb	r2, [r7, #3]
 800814c:	4611      	mov	r1, r2
 800814e:	4618      	mov	r0, r3
 8008150:	f7fb f823 	bl	800319a <HAL_PCD_EP_SetStall>
 8008154:	4603      	mov	r3, r0
 8008156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	4618      	mov	r0, r3
 800815c:	f000 f8ca 	bl	80082f4 <USBD_Get_USB_Status>
 8008160:	4603      	mov	r3, r0
 8008162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008164:	7bbb      	ldrb	r3, [r7, #14]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008188:	78fa      	ldrb	r2, [r7, #3]
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f7fb f867 	bl	8003260 <HAL_PCD_EP_ClrStall>
 8008192:	4603      	mov	r3, r0
 8008194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	4618      	mov	r0, r3
 800819a:	f000 f8ab 	bl	80082f4 <USBD_Get_USB_Status>
 800819e:	4603      	mov	r3, r0
 80081a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	da0b      	bge.n	80081e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80081ce:	68f9      	ldr	r1, [r7, #12]
 80081d0:	4613      	mov	r3, r2
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	440b      	add	r3, r1
 80081da:	3316      	adds	r3, #22
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	e00b      	b.n	80081f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081e0:	78fb      	ldrb	r3, [r7, #3]
 80081e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80081e6:	68f9      	ldr	r1, [r7, #12]
 80081e8:	4613      	mov	r3, r2
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80081f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bc80      	pop	{r7}
 8008200:	4770      	bx	lr

08008202 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	460b      	mov	r3, r1
 800820c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800821c:	78fa      	ldrb	r2, [r7, #3]
 800821e:	4611      	mov	r1, r2
 8008220:	4618      	mov	r0, r3
 8008222:	f7fa fe58 	bl	8002ed6 <HAL_PCD_SetAddress>
 8008226:	4603      	mov	r3, r0
 8008228:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	4618      	mov	r0, r3
 800822e:	f000 f861 	bl	80082f4 <USBD_Get_USB_Status>
 8008232:	4603      	mov	r3, r0
 8008234:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008236:	7bbb      	ldrb	r3, [r7, #14]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	461a      	mov	r2, r3
 800824c:	460b      	mov	r3, r1
 800824e:	72fb      	strb	r3, [r7, #11]
 8008250:	4613      	mov	r3, r2
 8008252:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008262:	893b      	ldrh	r3, [r7, #8]
 8008264:	7af9      	ldrb	r1, [r7, #11]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	f7fa ff5d 	bl	8003126 <HAL_PCD_EP_Transmit>
 800826c:	4603      	mov	r3, r0
 800826e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f83e 	bl	80082f4 <USBD_Get_USB_Status>
 8008278:	4603      	mov	r3, r0
 800827a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800827c:	7dbb      	ldrb	r3, [r7, #22]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b086      	sub	sp, #24
 800828a:	af00      	add	r7, sp, #0
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	461a      	mov	r2, r3
 8008292:	460b      	mov	r3, r1
 8008294:	72fb      	strb	r3, [r7, #11]
 8008296:	4613      	mov	r3, r2
 8008298:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80082a8:	893b      	ldrh	r3, [r7, #8]
 80082aa:	7af9      	ldrb	r1, [r7, #11]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	f7fa fee8 	bl	8003082 <HAL_PCD_EP_Receive>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 f81b 	bl	80082f4 <USBD_Get_USB_Status>
 80082be:	4603      	mov	r3, r0
 80082c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	4611      	mov	r1, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fa ff08 	bl	80030f8 <HAL_PCD_EP_GetRxCount>
 80082e8:	4603      	mov	r3, r0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	2b03      	cmp	r3, #3
 8008306:	d817      	bhi.n	8008338 <USBD_Get_USB_Status+0x44>
 8008308:	a201      	add	r2, pc, #4	@ (adr r2, 8008310 <USBD_Get_USB_Status+0x1c>)
 800830a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830e:	bf00      	nop
 8008310:	08008321 	.word	0x08008321
 8008314:	08008327 	.word	0x08008327
 8008318:	0800832d 	.word	0x0800832d
 800831c:	08008333 	.word	0x08008333
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]
    break;
 8008324:	e00b      	b.n	800833e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008326:	2302      	movs	r3, #2
 8008328:	73fb      	strb	r3, [r7, #15]
    break;
 800832a:	e008      	b.n	800833e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800832c:	2301      	movs	r3, #1
 800832e:	73fb      	strb	r3, [r7, #15]
    break;
 8008330:	e005      	b.n	800833e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008332:	2302      	movs	r3, #2
 8008334:	73fb      	strb	r3, [r7, #15]
    break;
 8008336:	e002      	b.n	800833e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008338:	2302      	movs	r3, #2
 800833a:	73fb      	strb	r3, [r7, #15]
    break;
 800833c:	bf00      	nop
  }
  return usb_status;
 800833e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	bc80      	pop	{r7}
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop

0800834c <malloc>:
 800834c:	4b02      	ldr	r3, [pc, #8]	@ (8008358 <malloc+0xc>)
 800834e:	4601      	mov	r1, r0
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	f000 b82d 	b.w	80083b0 <_malloc_r>
 8008356:	bf00      	nop
 8008358:	2000017c 	.word	0x2000017c

0800835c <free>:
 800835c:	4b02      	ldr	r3, [pc, #8]	@ (8008368 <free+0xc>)
 800835e:	4601      	mov	r1, r0
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	f000 b8f5 	b.w	8008550 <_free_r>
 8008366:	bf00      	nop
 8008368:	2000017c 	.word	0x2000017c

0800836c <sbrk_aligned>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	4e0f      	ldr	r6, [pc, #60]	@ (80083ac <sbrk_aligned+0x40>)
 8008370:	460c      	mov	r4, r1
 8008372:	6831      	ldr	r1, [r6, #0]
 8008374:	4605      	mov	r5, r0
 8008376:	b911      	cbnz	r1, 800837e <sbrk_aligned+0x12>
 8008378:	f000 f8ae 	bl	80084d8 <_sbrk_r>
 800837c:	6030      	str	r0, [r6, #0]
 800837e:	4621      	mov	r1, r4
 8008380:	4628      	mov	r0, r5
 8008382:	f000 f8a9 	bl	80084d8 <_sbrk_r>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	d103      	bne.n	8008392 <sbrk_aligned+0x26>
 800838a:	f04f 34ff 	mov.w	r4, #4294967295
 800838e:	4620      	mov	r0, r4
 8008390:	bd70      	pop	{r4, r5, r6, pc}
 8008392:	1cc4      	adds	r4, r0, #3
 8008394:	f024 0403 	bic.w	r4, r4, #3
 8008398:	42a0      	cmp	r0, r4
 800839a:	d0f8      	beq.n	800838e <sbrk_aligned+0x22>
 800839c:	1a21      	subs	r1, r4, r0
 800839e:	4628      	mov	r0, r5
 80083a0:	f000 f89a 	bl	80084d8 <_sbrk_r>
 80083a4:	3001      	adds	r0, #1
 80083a6:	d1f2      	bne.n	800838e <sbrk_aligned+0x22>
 80083a8:	e7ef      	b.n	800838a <sbrk_aligned+0x1e>
 80083aa:	bf00      	nop
 80083ac:	200014d8 	.word	0x200014d8

080083b0 <_malloc_r>:
 80083b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b4:	1ccd      	adds	r5, r1, #3
 80083b6:	f025 0503 	bic.w	r5, r5, #3
 80083ba:	3508      	adds	r5, #8
 80083bc:	2d0c      	cmp	r5, #12
 80083be:	bf38      	it	cc
 80083c0:	250c      	movcc	r5, #12
 80083c2:	2d00      	cmp	r5, #0
 80083c4:	4606      	mov	r6, r0
 80083c6:	db01      	blt.n	80083cc <_malloc_r+0x1c>
 80083c8:	42a9      	cmp	r1, r5
 80083ca:	d904      	bls.n	80083d6 <_malloc_r+0x26>
 80083cc:	230c      	movs	r3, #12
 80083ce:	6033      	str	r3, [r6, #0]
 80083d0:	2000      	movs	r0, #0
 80083d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084ac <_malloc_r+0xfc>
 80083da:	f000 f869 	bl	80084b0 <__malloc_lock>
 80083de:	f8d8 3000 	ldr.w	r3, [r8]
 80083e2:	461c      	mov	r4, r3
 80083e4:	bb44      	cbnz	r4, 8008438 <_malloc_r+0x88>
 80083e6:	4629      	mov	r1, r5
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7ff ffbf 	bl	800836c <sbrk_aligned>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	4604      	mov	r4, r0
 80083f2:	d158      	bne.n	80084a6 <_malloc_r+0xf6>
 80083f4:	f8d8 4000 	ldr.w	r4, [r8]
 80083f8:	4627      	mov	r7, r4
 80083fa:	2f00      	cmp	r7, #0
 80083fc:	d143      	bne.n	8008486 <_malloc_r+0xd6>
 80083fe:	2c00      	cmp	r4, #0
 8008400:	d04b      	beq.n	800849a <_malloc_r+0xea>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	4639      	mov	r1, r7
 8008406:	4630      	mov	r0, r6
 8008408:	eb04 0903 	add.w	r9, r4, r3
 800840c:	f000 f864 	bl	80084d8 <_sbrk_r>
 8008410:	4581      	cmp	r9, r0
 8008412:	d142      	bne.n	800849a <_malloc_r+0xea>
 8008414:	6821      	ldr	r1, [r4, #0]
 8008416:	4630      	mov	r0, r6
 8008418:	1a6d      	subs	r5, r5, r1
 800841a:	4629      	mov	r1, r5
 800841c:	f7ff ffa6 	bl	800836c <sbrk_aligned>
 8008420:	3001      	adds	r0, #1
 8008422:	d03a      	beq.n	800849a <_malloc_r+0xea>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	442b      	add	r3, r5
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	f8d8 3000 	ldr.w	r3, [r8]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	bb62      	cbnz	r2, 800848c <_malloc_r+0xdc>
 8008432:	f8c8 7000 	str.w	r7, [r8]
 8008436:	e00f      	b.n	8008458 <_malloc_r+0xa8>
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	1b52      	subs	r2, r2, r5
 800843c:	d420      	bmi.n	8008480 <_malloc_r+0xd0>
 800843e:	2a0b      	cmp	r2, #11
 8008440:	d917      	bls.n	8008472 <_malloc_r+0xc2>
 8008442:	1961      	adds	r1, r4, r5
 8008444:	42a3      	cmp	r3, r4
 8008446:	6025      	str	r5, [r4, #0]
 8008448:	bf18      	it	ne
 800844a:	6059      	strne	r1, [r3, #4]
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	bf08      	it	eq
 8008450:	f8c8 1000 	streq.w	r1, [r8]
 8008454:	5162      	str	r2, [r4, r5]
 8008456:	604b      	str	r3, [r1, #4]
 8008458:	4630      	mov	r0, r6
 800845a:	f000 f82f 	bl	80084bc <__malloc_unlock>
 800845e:	f104 000b 	add.w	r0, r4, #11
 8008462:	1d23      	adds	r3, r4, #4
 8008464:	f020 0007 	bic.w	r0, r0, #7
 8008468:	1ac2      	subs	r2, r0, r3
 800846a:	bf1c      	itt	ne
 800846c:	1a1b      	subne	r3, r3, r0
 800846e:	50a3      	strne	r3, [r4, r2]
 8008470:	e7af      	b.n	80083d2 <_malloc_r+0x22>
 8008472:	6862      	ldr	r2, [r4, #4]
 8008474:	42a3      	cmp	r3, r4
 8008476:	bf0c      	ite	eq
 8008478:	f8c8 2000 	streq.w	r2, [r8]
 800847c:	605a      	strne	r2, [r3, #4]
 800847e:	e7eb      	b.n	8008458 <_malloc_r+0xa8>
 8008480:	4623      	mov	r3, r4
 8008482:	6864      	ldr	r4, [r4, #4]
 8008484:	e7ae      	b.n	80083e4 <_malloc_r+0x34>
 8008486:	463c      	mov	r4, r7
 8008488:	687f      	ldr	r7, [r7, #4]
 800848a:	e7b6      	b.n	80083fa <_malloc_r+0x4a>
 800848c:	461a      	mov	r2, r3
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	42a3      	cmp	r3, r4
 8008492:	d1fb      	bne.n	800848c <_malloc_r+0xdc>
 8008494:	2300      	movs	r3, #0
 8008496:	6053      	str	r3, [r2, #4]
 8008498:	e7de      	b.n	8008458 <_malloc_r+0xa8>
 800849a:	230c      	movs	r3, #12
 800849c:	4630      	mov	r0, r6
 800849e:	6033      	str	r3, [r6, #0]
 80084a0:	f000 f80c 	bl	80084bc <__malloc_unlock>
 80084a4:	e794      	b.n	80083d0 <_malloc_r+0x20>
 80084a6:	6005      	str	r5, [r0, #0]
 80084a8:	e7d6      	b.n	8008458 <_malloc_r+0xa8>
 80084aa:	bf00      	nop
 80084ac:	200014dc 	.word	0x200014dc

080084b0 <__malloc_lock>:
 80084b0:	4801      	ldr	r0, [pc, #4]	@ (80084b8 <__malloc_lock+0x8>)
 80084b2:	f000 b84b 	b.w	800854c <__retarget_lock_acquire_recursive>
 80084b6:	bf00      	nop
 80084b8:	2000161c 	.word	0x2000161c

080084bc <__malloc_unlock>:
 80084bc:	4801      	ldr	r0, [pc, #4]	@ (80084c4 <__malloc_unlock+0x8>)
 80084be:	f000 b846 	b.w	800854e <__retarget_lock_release_recursive>
 80084c2:	bf00      	nop
 80084c4:	2000161c 	.word	0x2000161c

080084c8 <memset>:
 80084c8:	4603      	mov	r3, r0
 80084ca:	4402      	add	r2, r0
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d100      	bne.n	80084d2 <memset+0xa>
 80084d0:	4770      	bx	lr
 80084d2:	f803 1b01 	strb.w	r1, [r3], #1
 80084d6:	e7f9      	b.n	80084cc <memset+0x4>

080084d8 <_sbrk_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	2300      	movs	r3, #0
 80084dc:	4d05      	ldr	r5, [pc, #20]	@ (80084f4 <_sbrk_r+0x1c>)
 80084de:	4604      	mov	r4, r0
 80084e0:	4608      	mov	r0, r1
 80084e2:	602b      	str	r3, [r5, #0]
 80084e4:	f7f8 fc14 	bl	8000d10 <_sbrk>
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d102      	bne.n	80084f2 <_sbrk_r+0x1a>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	b103      	cbz	r3, 80084f2 <_sbrk_r+0x1a>
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	20001618 	.word	0x20001618

080084f8 <__errno>:
 80084f8:	4b01      	ldr	r3, [pc, #4]	@ (8008500 <__errno+0x8>)
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	2000017c 	.word	0x2000017c

08008504 <__libc_init_array>:
 8008504:	b570      	push	{r4, r5, r6, lr}
 8008506:	2600      	movs	r6, #0
 8008508:	4d0c      	ldr	r5, [pc, #48]	@ (800853c <__libc_init_array+0x38>)
 800850a:	4c0d      	ldr	r4, [pc, #52]	@ (8008540 <__libc_init_array+0x3c>)
 800850c:	1b64      	subs	r4, r4, r5
 800850e:	10a4      	asrs	r4, r4, #2
 8008510:	42a6      	cmp	r6, r4
 8008512:	d109      	bne.n	8008528 <__libc_init_array+0x24>
 8008514:	f000 f864 	bl	80085e0 <_init>
 8008518:	2600      	movs	r6, #0
 800851a:	4d0a      	ldr	r5, [pc, #40]	@ (8008544 <__libc_init_array+0x40>)
 800851c:	4c0a      	ldr	r4, [pc, #40]	@ (8008548 <__libc_init_array+0x44>)
 800851e:	1b64      	subs	r4, r4, r5
 8008520:	10a4      	asrs	r4, r4, #2
 8008522:	42a6      	cmp	r6, r4
 8008524:	d105      	bne.n	8008532 <__libc_init_array+0x2e>
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	f855 3b04 	ldr.w	r3, [r5], #4
 800852c:	4798      	blx	r3
 800852e:	3601      	adds	r6, #1
 8008530:	e7ee      	b.n	8008510 <__libc_init_array+0xc>
 8008532:	f855 3b04 	ldr.w	r3, [r5], #4
 8008536:	4798      	blx	r3
 8008538:	3601      	adds	r6, #1
 800853a:	e7f2      	b.n	8008522 <__libc_init_array+0x1e>
 800853c:	08008658 	.word	0x08008658
 8008540:	08008658 	.word	0x08008658
 8008544:	08008658 	.word	0x08008658
 8008548:	0800865c 	.word	0x0800865c

0800854c <__retarget_lock_acquire_recursive>:
 800854c:	4770      	bx	lr

0800854e <__retarget_lock_release_recursive>:
 800854e:	4770      	bx	lr

08008550 <_free_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4605      	mov	r5, r0
 8008554:	2900      	cmp	r1, #0
 8008556:	d040      	beq.n	80085da <_free_r+0x8a>
 8008558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800855c:	1f0c      	subs	r4, r1, #4
 800855e:	2b00      	cmp	r3, #0
 8008560:	bfb8      	it	lt
 8008562:	18e4      	addlt	r4, r4, r3
 8008564:	f7ff ffa4 	bl	80084b0 <__malloc_lock>
 8008568:	4a1c      	ldr	r2, [pc, #112]	@ (80085dc <_free_r+0x8c>)
 800856a:	6813      	ldr	r3, [r2, #0]
 800856c:	b933      	cbnz	r3, 800857c <_free_r+0x2c>
 800856e:	6063      	str	r3, [r4, #4]
 8008570:	6014      	str	r4, [r2, #0]
 8008572:	4628      	mov	r0, r5
 8008574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008578:	f7ff bfa0 	b.w	80084bc <__malloc_unlock>
 800857c:	42a3      	cmp	r3, r4
 800857e:	d908      	bls.n	8008592 <_free_r+0x42>
 8008580:	6820      	ldr	r0, [r4, #0]
 8008582:	1821      	adds	r1, r4, r0
 8008584:	428b      	cmp	r3, r1
 8008586:	bf01      	itttt	eq
 8008588:	6819      	ldreq	r1, [r3, #0]
 800858a:	685b      	ldreq	r3, [r3, #4]
 800858c:	1809      	addeq	r1, r1, r0
 800858e:	6021      	streq	r1, [r4, #0]
 8008590:	e7ed      	b.n	800856e <_free_r+0x1e>
 8008592:	461a      	mov	r2, r3
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	b10b      	cbz	r3, 800859c <_free_r+0x4c>
 8008598:	42a3      	cmp	r3, r4
 800859a:	d9fa      	bls.n	8008592 <_free_r+0x42>
 800859c:	6811      	ldr	r1, [r2, #0]
 800859e:	1850      	adds	r0, r2, r1
 80085a0:	42a0      	cmp	r0, r4
 80085a2:	d10b      	bne.n	80085bc <_free_r+0x6c>
 80085a4:	6820      	ldr	r0, [r4, #0]
 80085a6:	4401      	add	r1, r0
 80085a8:	1850      	adds	r0, r2, r1
 80085aa:	4283      	cmp	r3, r0
 80085ac:	6011      	str	r1, [r2, #0]
 80085ae:	d1e0      	bne.n	8008572 <_free_r+0x22>
 80085b0:	6818      	ldr	r0, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	4408      	add	r0, r1
 80085b6:	6010      	str	r0, [r2, #0]
 80085b8:	6053      	str	r3, [r2, #4]
 80085ba:	e7da      	b.n	8008572 <_free_r+0x22>
 80085bc:	d902      	bls.n	80085c4 <_free_r+0x74>
 80085be:	230c      	movs	r3, #12
 80085c0:	602b      	str	r3, [r5, #0]
 80085c2:	e7d6      	b.n	8008572 <_free_r+0x22>
 80085c4:	6820      	ldr	r0, [r4, #0]
 80085c6:	1821      	adds	r1, r4, r0
 80085c8:	428b      	cmp	r3, r1
 80085ca:	bf01      	itttt	eq
 80085cc:	6819      	ldreq	r1, [r3, #0]
 80085ce:	685b      	ldreq	r3, [r3, #4]
 80085d0:	1809      	addeq	r1, r1, r0
 80085d2:	6021      	streq	r1, [r4, #0]
 80085d4:	6063      	str	r3, [r4, #4]
 80085d6:	6054      	str	r4, [r2, #4]
 80085d8:	e7cb      	b.n	8008572 <_free_r+0x22>
 80085da:	bd38      	pop	{r3, r4, r5, pc}
 80085dc:	200014dc 	.word	0x200014dc

080085e0 <_init>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr

080085ec <_fini>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr
