
ToteNummer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a8c  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008c10  08008c10  00009c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c68  08008c68  0000a1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c68  08008c68  00009c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c70  08008c70  0000a1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c70  08008c70  00009c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c74  08008c74  00009c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08008c78  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014a0  200001e8  08008e5c  0000a1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001688  08008e5c  0000a688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160f6  00000000  00000000  0000a20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d62  00000000  00000000  00020303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00024068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eeb  00000000  00000000  00025408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220e0  00000000  00000000  000262f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001960c  00000000  00000000  000483d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0da0  00000000  00000000  000619df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012277f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005468  00000000  00000000  001227c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00127c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e8 	.word	0x200001e8
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08008bf8 	.word	0x08008bf8

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001ec 	.word	0x200001ec
 80001c0:	08008bf8 	.word	0x08008bf8

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b98c 	b.w	80004f4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	468e      	mov	lr, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14a      	bne.n	800029a <__udivmoddi4+0xa6>
 8000204:	428a      	cmp	r2, r1
 8000206:	4617      	mov	r7, r2
 8000208:	d962      	bls.n	80002d0 <__udivmoddi4+0xdc>
 800020a:	fab2 f682 	clz	r6, r2
 800020e:	b14e      	cbz	r6, 8000224 <__udivmoddi4+0x30>
 8000210:	f1c6 0320 	rsb	r3, r6, #32
 8000214:	fa01 f806 	lsl.w	r8, r1, r6
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	40b7      	lsls	r7, r6
 800021e:	ea43 0808 	orr.w	r8, r3, r8
 8000222:	40b4      	lsls	r4, r6
 8000224:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000228:	fbb8 f1fe 	udiv	r1, r8, lr
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fb0e 8811 	mls	r8, lr, r1, r8
 8000234:	fb01 f20c 	mul.w	r2, r1, ip
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	429a      	cmp	r2, r3
 8000240:	d909      	bls.n	8000256 <__udivmoddi4+0x62>
 8000242:	18fb      	adds	r3, r7, r3
 8000244:	f101 30ff 	add.w	r0, r1, #4294967295
 8000248:	f080 80eb 	bcs.w	8000422 <__udivmoddi4+0x22e>
 800024c:	429a      	cmp	r2, r3
 800024e:	f240 80e8 	bls.w	8000422 <__udivmoddi4+0x22e>
 8000252:	3902      	subs	r1, #2
 8000254:	443b      	add	r3, r7
 8000256:	1a9a      	subs	r2, r3, r2
 8000258:	fbb2 f0fe 	udiv	r0, r2, lr
 800025c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000260:	fb00 fc0c 	mul.w	ip, r0, ip
 8000264:	b2a3      	uxth	r3, r4
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	459c      	cmp	ip, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f100 32ff 	add.w	r2, r0, #4294967295
 8000274:	f080 80d7 	bcs.w	8000426 <__udivmoddi4+0x232>
 8000278:	459c      	cmp	ip, r3
 800027a:	f240 80d4 	bls.w	8000426 <__udivmoddi4+0x232>
 800027e:	443b      	add	r3, r7
 8000280:	3802      	subs	r0, #2
 8000282:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000286:	2100      	movs	r1, #0
 8000288:	eba3 030c 	sub.w	r3, r3, ip
 800028c:	b11d      	cbz	r5, 8000296 <__udivmoddi4+0xa2>
 800028e:	2200      	movs	r2, #0
 8000290:	40f3      	lsrs	r3, r6
 8000292:	e9c5 3200 	strd	r3, r2, [r5]
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d905      	bls.n	80002aa <__udivmoddi4+0xb6>
 800029e:	b10d      	cbz	r5, 80002a4 <__udivmoddi4+0xb0>
 80002a0:	e9c5 0100 	strd	r0, r1, [r5]
 80002a4:	2100      	movs	r1, #0
 80002a6:	4608      	mov	r0, r1
 80002a8:	e7f5      	b.n	8000296 <__udivmoddi4+0xa2>
 80002aa:	fab3 f183 	clz	r1, r3
 80002ae:	2900      	cmp	r1, #0
 80002b0:	d146      	bne.n	8000340 <__udivmoddi4+0x14c>
 80002b2:	4573      	cmp	r3, lr
 80002b4:	d302      	bcc.n	80002bc <__udivmoddi4+0xc8>
 80002b6:	4282      	cmp	r2, r0
 80002b8:	f200 8108 	bhi.w	80004cc <__udivmoddi4+0x2d8>
 80002bc:	1a84      	subs	r4, r0, r2
 80002be:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c2:	2001      	movs	r0, #1
 80002c4:	4690      	mov	r8, r2
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	d0e5      	beq.n	8000296 <__udivmoddi4+0xa2>
 80002ca:	e9c5 4800 	strd	r4, r8, [r5]
 80002ce:	e7e2      	b.n	8000296 <__udivmoddi4+0xa2>
 80002d0:	2a00      	cmp	r2, #0
 80002d2:	f000 8091 	beq.w	80003f8 <__udivmoddi4+0x204>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f040 80a5 	bne.w	800042a <__udivmoddi4+0x236>
 80002e0:	1a8a      	subs	r2, r1, r2
 80002e2:	2101      	movs	r1, #1
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ea:	b280      	uxth	r0, r0
 80002ec:	b2bc      	uxth	r4, r7
 80002ee:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f2:	fb0e 221c 	mls	r2, lr, ip, r2
 80002f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fa:	fb04 f20c 	mul.w	r2, r4, ip
 80002fe:	429a      	cmp	r2, r3
 8000300:	d907      	bls.n	8000312 <__udivmoddi4+0x11e>
 8000302:	18fb      	adds	r3, r7, r3
 8000304:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x11c>
 800030a:	429a      	cmp	r2, r3
 800030c:	f200 80e3 	bhi.w	80004d6 <__udivmoddi4+0x2e2>
 8000310:	46c4      	mov	ip, r8
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	fbb3 f2fe 	udiv	r2, r3, lr
 8000318:	fb0e 3312 	mls	r3, lr, r2, r3
 800031c:	fb02 f404 	mul.w	r4, r2, r4
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	429c      	cmp	r4, r3
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x144>
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	f102 30ff 	add.w	r0, r2, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x142>
 8000330:	429c      	cmp	r4, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2dc>
 8000336:	4602      	mov	r2, r0
 8000338:	1b1b      	subs	r3, r3, r4
 800033a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800033e:	e7a5      	b.n	800028c <__udivmoddi4+0x98>
 8000340:	f1c1 0620 	rsb	r6, r1, #32
 8000344:	408b      	lsls	r3, r1
 8000346:	fa22 f706 	lsr.w	r7, r2, r6
 800034a:	431f      	orrs	r7, r3
 800034c:	fa2e fa06 	lsr.w	sl, lr, r6
 8000350:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000354:	fbba f8f9 	udiv	r8, sl, r9
 8000358:	fa0e fe01 	lsl.w	lr, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fb09 aa18 	mls	sl, r9, r8, sl
 8000364:	fa1f fc87 	uxth.w	ip, r7
 8000368:	ea43 030e 	orr.w	r3, r3, lr
 800036c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000370:	fb08 f00c 	mul.w	r0, r8, ip
 8000374:	0c1c      	lsrs	r4, r3, #16
 8000376:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800037a:	42a0      	cmp	r0, r4
 800037c:	fa02 f201 	lsl.w	r2, r2, r1
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x1a4>
 8000382:	193c      	adds	r4, r7, r4
 8000384:	f108 3aff 	add.w	sl, r8, #4294967295
 8000388:	f080 809e 	bcs.w	80004c8 <__udivmoddi4+0x2d4>
 800038c:	42a0      	cmp	r0, r4
 800038e:	f240 809b 	bls.w	80004c8 <__udivmoddi4+0x2d4>
 8000392:	f1a8 0802 	sub.w	r8, r8, #2
 8000396:	443c      	add	r4, r7
 8000398:	1a24      	subs	r4, r4, r0
 800039a:	b298      	uxth	r0, r3
 800039c:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a0:	fb09 4413 	mls	r4, r9, r3, r4
 80003a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003a8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ac:	45a4      	cmp	ip, r4
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003b6:	f080 8085 	bcs.w	80004c4 <__udivmoddi4+0x2d0>
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	f240 8082 	bls.w	80004c4 <__udivmoddi4+0x2d0>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	443c      	add	r4, r7
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	eba4 040c 	sub.w	r4, r4, ip
 80003cc:	fba0 8c02 	umull	r8, ip, r0, r2
 80003d0:	4564      	cmp	r4, ip
 80003d2:	4643      	mov	r3, r8
 80003d4:	46e1      	mov	r9, ip
 80003d6:	d364      	bcc.n	80004a2 <__udivmoddi4+0x2ae>
 80003d8:	d061      	beq.n	800049e <__udivmoddi4+0x2aa>
 80003da:	b15d      	cbz	r5, 80003f4 <__udivmoddi4+0x200>
 80003dc:	ebbe 0203 	subs.w	r2, lr, r3
 80003e0:	eb64 0409 	sbc.w	r4, r4, r9
 80003e4:	fa04 f606 	lsl.w	r6, r4, r6
 80003e8:	fa22 f301 	lsr.w	r3, r2, r1
 80003ec:	431e      	orrs	r6, r3
 80003ee:	40cc      	lsrs	r4, r1
 80003f0:	e9c5 6400 	strd	r6, r4, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	e74e      	b.n	8000296 <__udivmoddi4+0xa2>
 80003f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fc:	0c01      	lsrs	r1, r0, #16
 80003fe:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000402:	b280      	uxth	r0, r0
 8000404:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000408:	463b      	mov	r3, r7
 800040a:	fbb1 f1f7 	udiv	r1, r1, r7
 800040e:	4638      	mov	r0, r7
 8000410:	463c      	mov	r4, r7
 8000412:	46b8      	mov	r8, r7
 8000414:	46be      	mov	lr, r7
 8000416:	2620      	movs	r6, #32
 8000418:	eba2 0208 	sub.w	r2, r2, r8
 800041c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000420:	e765      	b.n	80002ee <__udivmoddi4+0xfa>
 8000422:	4601      	mov	r1, r0
 8000424:	e717      	b.n	8000256 <__udivmoddi4+0x62>
 8000426:	4610      	mov	r0, r2
 8000428:	e72b      	b.n	8000282 <__udivmoddi4+0x8e>
 800042a:	f1c6 0120 	rsb	r1, r6, #32
 800042e:	fa2e fc01 	lsr.w	ip, lr, r1
 8000432:	40b7      	lsls	r7, r6
 8000434:	fa0e fe06 	lsl.w	lr, lr, r6
 8000438:	fa20 f101 	lsr.w	r1, r0, r1
 800043c:	ea41 010e 	orr.w	r1, r1, lr
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fbbc f8fe 	udiv	r8, ip, lr
 8000448:	b2bc      	uxth	r4, r7
 800044a:	fb0e cc18 	mls	ip, lr, r8, ip
 800044e:	fb08 f904 	mul.w	r9, r8, r4
 8000452:	0c0a      	lsrs	r2, r1, #16
 8000454:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000458:	40b0      	lsls	r0, r6
 800045a:	4591      	cmp	r9, r2
 800045c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000460:	b280      	uxth	r0, r0
 8000462:	d93e      	bls.n	80004e2 <__udivmoddi4+0x2ee>
 8000464:	18ba      	adds	r2, r7, r2
 8000466:	f108 3cff 	add.w	ip, r8, #4294967295
 800046a:	d201      	bcs.n	8000470 <__udivmoddi4+0x27c>
 800046c:	4591      	cmp	r9, r2
 800046e:	d81f      	bhi.n	80004b0 <__udivmoddi4+0x2bc>
 8000470:	eba2 0209 	sub.w	r2, r2, r9
 8000474:	fbb2 f9fe 	udiv	r9, r2, lr
 8000478:	fb09 f804 	mul.w	r8, r9, r4
 800047c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000480:	b28a      	uxth	r2, r1
 8000482:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000486:	4542      	cmp	r2, r8
 8000488:	d229      	bcs.n	80004de <__udivmoddi4+0x2ea>
 800048a:	18ba      	adds	r2, r7, r2
 800048c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000490:	d2c2      	bcs.n	8000418 <__udivmoddi4+0x224>
 8000492:	4542      	cmp	r2, r8
 8000494:	d2c0      	bcs.n	8000418 <__udivmoddi4+0x224>
 8000496:	f1a9 0102 	sub.w	r1, r9, #2
 800049a:	443a      	add	r2, r7
 800049c:	e7bc      	b.n	8000418 <__udivmoddi4+0x224>
 800049e:	45c6      	cmp	lr, r8
 80004a0:	d29b      	bcs.n	80003da <__udivmoddi4+0x1e6>
 80004a2:	ebb8 0302 	subs.w	r3, r8, r2
 80004a6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	46e1      	mov	r9, ip
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e6>
 80004b0:	eba7 0909 	sub.w	r9, r7, r9
 80004b4:	444a      	add	r2, r9
 80004b6:	fbb2 f9fe 	udiv	r9, r2, lr
 80004ba:	f1a8 0c02 	sub.w	ip, r8, #2
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	e7db      	b.n	800047c <__udivmoddi4+0x288>
 80004c4:	4603      	mov	r3, r0
 80004c6:	e77d      	b.n	80003c4 <__udivmoddi4+0x1d0>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e765      	b.n	8000398 <__udivmoddi4+0x1a4>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e6fa      	b.n	80002c6 <__udivmoddi4+0xd2>
 80004d0:	443b      	add	r3, r7
 80004d2:	3a02      	subs	r2, #2
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x144>
 80004d6:	f1ac 0c02 	sub.w	ip, ip, #2
 80004da:	443b      	add	r3, r7
 80004dc:	e719      	b.n	8000312 <__udivmoddi4+0x11e>
 80004de:	4649      	mov	r1, r9
 80004e0:	e79a      	b.n	8000418 <__udivmoddi4+0x224>
 80004e2:	eba2 0209 	sub.w	r2, r2, r9
 80004e6:	fbb2 f9fe 	udiv	r9, r2, lr
 80004ea:	46c4      	mov	ip, r8
 80004ec:	fb09 f804 	mul.w	r8, r9, r4
 80004f0:	e7c4      	b.n	800047c <__udivmoddi4+0x288>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fe:	463b      	mov	r3, r7
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800050a:	4b21      	ldr	r3, [pc, #132]	@ (8000590 <MX_ADC1_Init+0x98>)
 800050c:	4a21      	ldr	r2, [pc, #132]	@ (8000594 <MX_ADC1_Init+0x9c>)
 800050e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000510:	4b1f      	ldr	r3, [pc, #124]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000512:	2200      	movs	r2, #0
 8000514:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000516:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800051c:	4b1c      	ldr	r3, [pc, #112]	@ (8000590 <MX_ADC1_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000522:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000528:	4b19      	ldr	r3, [pc, #100]	@ (8000590 <MX_ADC1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000530:	4b17      	ldr	r3, [pc, #92]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000536:	4b16      	ldr	r3, [pc, #88]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000538:	4a17      	ldr	r2, [pc, #92]	@ (8000598 <MX_ADC1_Init+0xa0>)
 800053a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <MX_ADC1_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000542:	4b13      	ldr	r3, [pc, #76]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000544:	2201      	movs	r2, #1
 8000546:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000548:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <MX_ADC1_Init+0x98>)
 800054a:	2200      	movs	r2, #0
 800054c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000550:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000552:	2201      	movs	r2, #1
 8000554:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000556:	480e      	ldr	r0, [pc, #56]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000558:	f000 fed8 	bl	800130c <HAL_ADC_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000562:	f000 fbfd 	bl	8000d60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000566:	230a      	movs	r3, #10
 8000568:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800056a:	2301      	movs	r3, #1
 800056c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000572:	463b      	mov	r3, r7
 8000574:	4619      	mov	r1, r3
 8000576:	4806      	ldr	r0, [pc, #24]	@ (8000590 <MX_ADC1_Init+0x98>)
 8000578:	f000 ff0c 	bl	8001394 <HAL_ADC_ConfigChannel>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000582:	f000 fbed 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000204 	.word	0x20000204
 8000594:	40012000 	.word	0x40012000
 8000598:	0f000001 	.word	0x0f000001

0800059c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80005ae:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005b0:	4a21      	ldr	r2, [pc, #132]	@ (8000638 <MX_ADC2_Init+0x9c>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005cc:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d4:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005da:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005dc:	4a17      	ldr	r2, [pc, #92]	@ (800063c <MX_ADC2_Init+0xa0>)
 80005de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005fa:	480e      	ldr	r0, [pc, #56]	@ (8000634 <MX_ADC2_Init+0x98>)
 80005fc:	f000 fe86 	bl	800130c <HAL_ADC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000606:	f000 fbab 	bl	8000d60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800060a:	230b      	movs	r3, #11
 800060c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800060e:	2301      	movs	r3, #1
 8000610:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000616:	463b      	mov	r3, r7
 8000618:	4619      	mov	r1, r3
 800061a:	4806      	ldr	r0, [pc, #24]	@ (8000634 <MX_ADC2_Init+0x98>)
 800061c:	f000 feba 	bl	8001394 <HAL_ADC_ConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000626:	f000 fb9b 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000024c 	.word	0x2000024c
 8000638:	40012100 	.word	0x40012100
 800063c:	0f000001 	.word	0x0f000001

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	@ 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a2e      	ldr	r2, [pc, #184]	@ (8000718 <HAL_ADC_MspInit+0xd8>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d128      	bne.n	80006b4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
 8000666:	4b2d      	ldr	r3, [pc, #180]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066a:	4a2c      	ldr	r2, [pc, #176]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000670:	6453      	str	r3, [r2, #68]	@ 0x44
 8000672:	4b2a      	ldr	r3, [pc, #168]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800067a:	61bb      	str	r3, [r7, #24]
 800067c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	4b26      	ldr	r3, [pc, #152]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a25      	ldr	r2, [pc, #148]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b23      	ldr	r3, [pc, #140]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069a:	2301      	movs	r3, #1
 800069c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	481c      	ldr	r0, [pc, #112]	@ (8000720 <HAL_ADC_MspInit+0xe0>)
 80006ae:	f001 ff19 	bl	80024e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80006b2:	e02c      	b.n	800070e <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000724 <HAL_ADC_MspInit+0xe4>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d127      	bne.n	800070e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c6:	4a15      	ldr	r2, [pc, #84]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 80006c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <HAL_ADC_MspInit+0xe0>)
 800070a:	f001 feeb 	bl	80024e4 <HAL_GPIO_Init>
}
 800070e:	bf00      	nop
 8000710:	3730      	adds	r7, #48	@ 0x30
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40012000 	.word	0x40012000
 800071c:	40023800 	.word	0x40023800
 8000720:	40020800 	.word	0x40020800
 8000724:	40012100 	.word	0x40012100

08000728 <CAN_TX>:

//	CAN_TxHeaderTypeDef IVT_MSG_COMMAND = {0x411, 0,CAN_ID_STD, CAN_RTR_DATA,8};

// transmit CAN Message
void CAN_TX(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 8000728:	b084      	sub	sp, #16
 800072a:	b5b0      	push	{r4, r5, r7, lr}
 800072c:	b090      	sub	sp, #64	@ 0x40
 800072e:	af0e      	add	r7, sp, #56	@ 0x38
 8000730:	f107 0418 	add.w	r4, r7, #24
 8000734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox;
	uint32_t freeMailboxes = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000738:	f107 0018 	add.w	r0, r7, #24
 800073c:	f001 fb3f 	bl	8001dbe <HAL_CAN_GetTxMailboxesFreeLevel>
 8000740:	6078      	str	r0, [r7, #4]

	if(freeMailboxes > 0)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d038      	beq.n	80007ba <CAN_TX+0x92>
	{
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800074e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000750:	f107 0018 	add.w	r0, r7, #24
 8000754:	f001 fa64 	bl	8001c20 <HAL_CAN_AddTxMessage>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d046      	beq.n	80007ec <CAN_TX+0xc4>
		{
		    static uint8_t retries = 0;
		    if (retries < 5) {  // Maximum retries
 800075e:	4b27      	ldr	r3, [pc, #156]	@ (80007fc <CAN_TX+0xd4>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b04      	cmp	r3, #4
 8000764:	d81f      	bhi.n	80007a6 <CAN_TX+0x7e>
		    	retries++;
 8000766:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <CAN_TX+0xd4>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <CAN_TX+0xd4>)
 8000770:	701a      	strb	r2, [r3, #0]
			    CAN_TX(hcan, TxHeader, TxData);
 8000772:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000774:	930c      	str	r3, [sp, #48]	@ 0x30
 8000776:	ad06      	add	r5, sp, #24
 8000778:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800077c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800077e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000780:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000784:	e885 0003 	stmia.w	r5, {r0, r1}
 8000788:	466d      	mov	r5, sp
 800078a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800078e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000792:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000796:	e885 0003 	stmia.w	r5, {r0, r1}
 800079a:	f107 0318 	add.w	r3, r7, #24
 800079e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a0:	f7ff ffc2 	bl	8000728 <CAN_TX>
	else
	{
		CAN_TX(hcan, TxHeader, TxData);
	}

}
 80007a4:	e022      	b.n	80007ec <CAN_TX+0xc4>
		        retries = 0;  // Reset retry count after a failure
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <CAN_TX+0xd4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
		        HAL_GPIO_WritePin(GPIOD, LED_RD_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b2:	4813      	ldr	r0, [pc, #76]	@ (8000800 <CAN_TX+0xd8>)
 80007b4:	f002 f834 	bl	8002820 <HAL_GPIO_WritePin>
}
 80007b8:	e018      	b.n	80007ec <CAN_TX+0xc4>
		CAN_TX(hcan, TxHeader, TxData);
 80007ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80007bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80007be:	ad06      	add	r5, sp, #24
 80007c0:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80007c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80007cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80007d0:	466d      	mov	r5, sp
 80007d2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80007d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80007de:	e885 0003 	stmia.w	r5, {r0, r1}
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e8:	f7ff ff9e 	bl	8000728 <CAN_TX>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	200002f4 	.word	0x200002f4
 8000800:	40020c00 	.word	0x40020c00

08000804 <HAL_TIM_PeriodElapsedCallback>:

	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000806:	b091      	sub	sp, #68	@ 0x44
 8000808:	af0e      	add	r7, sp, #56	@ 0x38
 800080a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000814:	d125      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		counter ++;
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000820:	701a      	strb	r2, [r3, #0]
		if(counter == 100){
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b64      	cmp	r3, #100	@ 0x64
 8000828:	d11b      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x5e>
			CAN_TX(hcan1, AMS0_header, TxData);
 800082a:	4e11      	ldr	r6, [pc, #68]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800082e:	930c      	str	r3, [sp, #48]	@ 0x30
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000832:	ac06      	add	r4, sp, #24
 8000834:	461d      	mov	r5, r3
 8000836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800083e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000842:	466d      	mov	r5, sp
 8000844:	f106 0410 	add.w	r4, r6, #16
 8000848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800084a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800084c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000850:	e885 0003 	stmia.w	r5, {r0, r1}
 8000854:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000858:	f7ff ff66 	bl	8000728 <CAN_TX>
			counter = 0;
 800085c:	4b03      	ldr	r3, [pc, #12]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800086a:	bf00      	nop
 800086c:	20000294 	.word	0x20000294
 8000870:	200002a0 	.word	0x200002a0
 8000874:	20000298 	.word	0x20000298
 8000878:	20000000 	.word	0x20000000

0800087c <MX_CAN1_Init>:
	}
*/

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000882:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <MX_CAN1_Init+0x94>)
 8000884:	4a23      	ldr	r2, [pc, #140]	@ (8000914 <MX_CAN1_Init+0x98>)
 8000886:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000888:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <MX_CAN1_Init+0x94>)
 800088a:	2205      	movs	r2, #5
 800088c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800088e:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <MX_CAN1_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000894:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <MX_CAN1_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_CAN1_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <MX_CAN1_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_CAN1_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008ac:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <MX_CAN1_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <MX_CAN1_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <MX_CAN1_Init+0x94>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_CAN1_Init+0x94>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_CAN1_Init+0x94>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008ca:	4811      	ldr	r0, [pc, #68]	@ (8000910 <MX_CAN1_Init+0x94>)
 80008cc:	f000 ff88 	bl	80017e0 <HAL_CAN_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80008d6:	f000 fa43 	bl	8000d60 <Error_Handler>
  	  FilterIdHigh, welche ID-Bits verglichen werden sollen
  	  FilterMaskIdHigh, Vergleich bestimmter Bits zwischen dem ID-Register und der eingehenden ID zu ermöglichen
  	  FilterMode, Maskenmodus (ausgewählte Bits vergleichen) oder Listenmodus (vollständige IDs vergleichen)
  	  Filter Scale, Verwendung eines 32-Bit-Registers oder zweier 16-Bit-Register
  	  */
  canfilterconfig_DIC.FilterActivation = CAN_FILTER_ENABLE;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]


  canfilterconfig_DIC.FilterBank = 18;  // which filter bank to use from the assigned ones
 80008de:	2312      	movs	r3, #18
 80008e0:	617b      	str	r3, [r7, #20]
  canfilterconfig_DIC.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  canfilterconfig_DIC.FilterIdHigh = 0x500<<5;
 80008e6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80008ea:	603b      	str	r3, [r7, #0]
  canfilterconfig_DIC.FilterIdLow = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
  canfilterconfig_DIC.FilterMode = CAN_FILTERMODE_IDLIST;	//Mask or List
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  canfilterconfig_DIC.FilterScale = CAN_FILTERSCALE_32BIT;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61fb      	str	r3, [r7, #28]
  canfilterconfig_DIC.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80008f8:	2314      	movs	r3, #20
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig_DIC);
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4803      	ldr	r0, [pc, #12]	@ (8000910 <MX_CAN1_Init+0x94>)
 8000902:	f001 f869 	bl	80019d8 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	@ 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200002a0 	.word	0x200002a0
 8000914:	40006400 	.word	0x40006400

08000918 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800091c:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_CAN2_Init+0x60>)
 800091e:	4a17      	ldr	r2, [pc, #92]	@ (800097c <MX_CAN2_Init+0x64>)
 8000920:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_CAN2_Init+0x60>)
 8000924:	2210      	movs	r2, #16
 8000926:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_CAN2_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_CAN2_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000934:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <MX_CAN2_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_CAN2_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000940:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <MX_CAN2_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_CAN2_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_CAN2_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_CAN2_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <MX_CAN2_Init+0x60>)
 800095a:	2200      	movs	r2, #0
 800095c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_CAN2_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_CAN2_Init+0x60>)
 8000966:	f000 ff3b 	bl	80017e0 <HAL_CAN_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000970:	f000 f9f6 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200002c8 	.word	0x200002c8
 800097c:	40006800 	.word	0x40006800

08000980 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	@ 0x30
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a53      	ldr	r2, [pc, #332]	@ (8000aec <HAL_CAN_MspInit+0x16c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d146      	bne.n	8000a30 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009a2:	4b53      	ldr	r3, [pc, #332]	@ (8000af0 <HAL_CAN_MspInit+0x170>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	4a51      	ldr	r2, [pc, #324]	@ (8000af0 <HAL_CAN_MspInit+0x170>)
 80009aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009ac:	4b50      	ldr	r3, [pc, #320]	@ (8000af0 <HAL_CAN_MspInit+0x170>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d10d      	bne.n	80009d0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	4b4e      	ldr	r3, [pc, #312]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	4a4d      	ldr	r2, [pc, #308]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 80009be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c4:	4b4b      	ldr	r3, [pc, #300]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	4b47      	ldr	r3, [pc, #284]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d8:	4a46      	ldr	r2, [pc, #280]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 80009da:	f043 0302 	orr.w	r3, r3, #2
 80009de:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e0:	4b44      	ldr	r3, [pc, #272]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e4:	f003 0302 	and.w	r3, r3, #2
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009fe:	2309      	movs	r3, #9
 8000a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	483b      	ldr	r0, [pc, #236]	@ (8000af8 <HAL_CAN_MspInit+0x178>)
 8000a0a:	f001 fd6b 	bl	80024e4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2013      	movs	r0, #19
 8000a14:	f001 fd2f 	bl	8002476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000a18:	2013      	movs	r0, #19
 8000a1a:	f001 fd48 	bl	80024ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2014      	movs	r0, #20
 8000a24:	f001 fd27 	bl	8002476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a28:	2014      	movs	r0, #20
 8000a2a:	f001 fd40 	bl	80024ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000a2e:	e058      	b.n	8000ae2 <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a31      	ldr	r2, [pc, #196]	@ (8000afc <HAL_CAN_MspInit+0x17c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d153      	bne.n	8000ae2 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a2c      	ldr	r2, [pc, #176]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 8000a44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a56:	4b26      	ldr	r3, [pc, #152]	@ (8000af0 <HAL_CAN_MspInit+0x170>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	4a24      	ldr	r2, [pc, #144]	@ (8000af0 <HAL_CAN_MspInit+0x170>)
 8000a5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a60:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <HAL_CAN_MspInit+0x170>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d10d      	bne.n	8000a84 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a70:	4a20      	ldr	r2, [pc, #128]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 8000a72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a78:	4b1e      	ldr	r3, [pc, #120]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	4a19      	ldr	r2, [pc, #100]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a94:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <HAL_CAN_MspInit+0x174>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000aa0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000ab2:	2309      	movs	r3, #9
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	480e      	ldr	r0, [pc, #56]	@ (8000af8 <HAL_CAN_MspInit+0x178>)
 8000abe:	f001 fd11 	bl	80024e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	203f      	movs	r0, #63	@ 0x3f
 8000ac8:	f001 fcd5 	bl	8002476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000acc:	203f      	movs	r0, #63	@ 0x3f
 8000ace:	f001 fcee 	bl	80024ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2040      	movs	r0, #64	@ 0x40
 8000ad8:	f001 fccd 	bl	8002476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000adc:	2040      	movs	r0, #64	@ 0x40
 8000ade:	f001 fce6 	bl	80024ae <HAL_NVIC_EnableIRQ>
}
 8000ae2:	bf00      	nop
 8000ae4:	3730      	adds	r7, #48	@ 0x30
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40006400 	.word	0x40006400
 8000af0:	200002f0 	.word	0x200002f0
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40006800 	.word	0x40006800

08000b00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a26      	ldr	r2, [pc, #152]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000b8c:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <MX_GPIO_Init+0xbc>)
 8000b8e:	f001 fe47 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin;
 8000b92:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <MX_GPIO_Init+0xbc>)
 8000bac:	f001 fc9a 	bl	80024e4 <HAL_GPIO_Init>

}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	@ 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020800 	.word	0x40020800

08000bc0 <gpio>:

/* USER CODE BEGIN 2 */
static uint64_t lastGN = 0;		// Zeitpunkt null
// Last GN nicht immer auf null setzen, immer auf den Wert in if-Bedingung, sondern auf now, also auf den Zeitpukt der if-Schleife , die Zeit vergangen ist

void gpio(){
 8000bc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0

	//LED grün (blinkend)
		uint64_t now = HAL_GetTick();	// Zeitpunkt jetzt
 8000bc8:	f000 fb72 	bl	80012b0 <HAL_GetTick>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	4691      	mov	r9, r2
 8000bd4:	e9c7 8900 	strd	r8, r9, [r7]
		if(now - lastGN >= 2000){
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <gpio+0x50>)
 8000bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000be2:	1a84      	subs	r4, r0, r2
 8000be4:	eb61 0503 	sbc.w	r5, r1, r3
 8000be8:	f5b4 6ffa 	cmp.w	r4, #2000	@ 0x7d0
 8000bec:	f175 0300 	sbcs.w	r3, r5, #0
 8000bf0:	d309      	bcc.n	8000c06 <gpio+0x46>
			HAL_GPIO_TogglePin(LED_GN_GPIO_Port, LED_GN_Pin);
 8000bf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf6:	4807      	ldr	r0, [pc, #28]	@ (8000c14 <gpio+0x54>)
 8000bf8:	f001 fe2a 	bl	8002850 <HAL_GPIO_TogglePin>
			lastGN = now;				// TogglePin wieder aufrufen
 8000bfc:	4904      	ldr	r1, [pc, #16]	@ (8000c10 <gpio+0x50>)
 8000bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c02:	e9c1 2300 	strd	r2, r3, [r1]
		}
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c10:	200002f8 	.word	0x200002f8
 8000c14:	40020800 	.word	0x40020800

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f000 fae4 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f858 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f7ff ff6c 	bl	8000b00 <MX_GPIO_Init>
  MX_TIM9_Init();
 8000c28:	f000 f9c0 	bl	8000fac <MX_TIM9_Init>
  MX_ADC1_Init();
 8000c2c:	f7ff fc64 	bl	80004f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c30:	f7ff fcb4 	bl	800059c <MX_ADC2_Init>
  MX_CAN1_Init();
 8000c34:	f7ff fe22 	bl	800087c <MX_CAN1_Init>
  MX_CAN2_Init();
 8000c38:	f7ff fe6e 	bl	8000918 <MX_CAN2_Init>
  MX_USB_DEVICE_Init();
 8000c3c:	f007 f9ca 	bl	8007fd4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000c40:	f000 f968 	bl	8000f14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GN_GPIO_Port, LED_GN_Pin, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4a:	481d      	ldr	r0, [pc, #116]	@ (8000cc0 <main+0xa8>)
 8000c4c:	f001 fde8 	bl	8002820 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_YW_GPIO_Port, LED_YW_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c56:	481a      	ldr	r0, [pc, #104]	@ (8000cc0 <main+0xa8>)
 8000c58:	f001 fde2 	bl	8002820 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RD_GPIO_Port, LED_RD_Pin, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c62:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <main+0xa8>)
 8000c64:	f001 fddc 	bl	8002820 <HAL_GPIO_WritePin>
    //set hebt die Spannung an (+), led aus, in schematik anschauen
    //reset ist (-), led an



  HAL_CAN_Start(&hcan1);
 8000c68:	4816      	ldr	r0, [pc, #88]	@ (8000cc4 <main+0xac>)
 8000c6a:	f000 ff95 	bl	8001b98 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000c6e:	4816      	ldr	r0, [pc, #88]	@ (8000cc8 <main+0xb0>)
 8000c70:	f000 ff92 	bl	8001b98 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000c74:	2102      	movs	r1, #2
 8000c76:	4813      	ldr	r0, [pc, #76]	@ (8000cc4 <main+0xac>)
 8000c78:	f001 f8d5 	bl	8001e26 <HAL_CAN_ActivateNotification>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <main+0x6e>
    {
        Error_Handler();
 8000c82:	f000 f86d 	bl	8000d60 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  gpio();
 8000c86:	f7ff ff9b 	bl	8000bc0 <gpio>
	  //ErrorLed_Task(); damit wird ein Fehler angezeigt
	  TxData[0] = 0;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <main+0xb4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 0;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <main+0xb4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	705a      	strb	r2, [r3, #1]
	  TxData[2] = 0;
 8000c96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <main+0xb4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 0;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <main+0xb4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	70da      	strb	r2, [r3, #3]
	  TxData[4] = LED_State;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <main+0xb8>)
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <main+0xb4>)
 8000ca8:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 0;
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <main+0xb4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	715a      	strb	r2, [r3, #5]
	  TxData[6] = 0;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <main+0xb4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	719a      	strb	r2, [r3, #6]
	  TxData[7] = 0;
 8000cb6:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <main+0xb4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	71da      	strb	r2, [r3, #7]
  {
 8000cbc:	bf00      	nop
 8000cbe:	e7e2      	b.n	8000c86 <main+0x6e>
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	200002a0 	.word	0x200002a0
 8000cc8:	200002c8 	.word	0x200002c8
 8000ccc:	20000298 	.word	0x20000298
 8000cd0:	20000300 	.word	0x20000300

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b092      	sub	sp, #72	@ 0x48
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	2230      	movs	r2, #48	@ 0x30
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f007 fefc 	bl	8008ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d08:	2319      	movs	r3, #25
 8000d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d0c:	23c0      	movs	r3, #192	@ 0xc0
 8000d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d14:	2304      	movs	r3, #4
 8000d16:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 ffd1 	bl	8003cc4 <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d28:	f000 f81a 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d30:	2302      	movs	r3, #2
 8000d32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d42:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2103      	movs	r1, #3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 fa0f 	bl	800416c <HAL_RCC_ClockConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d54:	f000 f804 	bl	8000d60 <Error_Handler>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3748      	adds	r7, #72	@ 0x48
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <Error_Handler+0x8>

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <HAL_MspInit+0x48>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000db4 <HAL_MspInit+0x48>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <HAL_MspInit+0x48>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <HAL_MspInit+0x48>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	4a07      	ldr	r2, [pc, #28]	@ (8000db4 <HAL_MspInit+0x48>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9e:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <HAL_MspInit+0x48>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	40023800 	.word	0x40023800

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <NMI_Handler+0x4>

08000dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <MemManage_Handler+0x4>

08000dd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <UsageFault_Handler+0x4>

08000de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 fa40 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <CAN1_TX_IRQHandler+0x10>)
 8000e16:	f001 f82b 	bl	8001e70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200002a0 	.word	0x200002a0

08000e24 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <CAN1_RX0_IRQHandler+0x10>)
 8000e2a:	f001 f821 	bl	8001e70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200002a0 	.word	0x200002a0

08000e38 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000e3e:	f003 fbf8 	bl	8004632 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000350 	.word	0x20000350

08000e4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <TIM2_IRQHandler+0x10>)
 8000e52:	f003 fbee 	bl	8004632 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000308 	.word	0x20000308

08000e60 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <CAN2_TX_IRQHandler+0x10>)
 8000e66:	f001 f803 	bl	8001e70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200002c8 	.word	0x200002c8

08000e74 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <CAN2_RX0_IRQHandler+0x10>)
 8000e7a:	f000 fff9 	bl	8001e70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200002c8 	.word	0x200002c8

08000e88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <OTG_FS_IRQHandler+0x10>)
 8000e8e:	f001 fe29 	bl	8002ae4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20001064 	.word	0x20001064

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f007 fe20 	bl	8008b10 <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000c000 	.word	0x2000c000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	20000304 	.word	0x20000304
 8000f04:	20001688 	.word	0x20001688

08000f08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f3a:	222f      	movs	r2, #47	@ 0x2f
 8000f3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f58:	4813      	ldr	r0, [pc, #76]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f5a:	f003 fac3 	bl	80044e4 <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f64:	f7ff fefc 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f76:	f003 fce8 	bl	800494a <HAL_TIM_ConfigClockSource>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f80:	f7ff feee 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_TIM2_Init+0x94>)
 8000f92:	f004 f8ff 	bl	8005194 <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f9c:	f7ff fee0 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000308 	.word	0x20000308

08000fac <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	@ 0x38
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000fdc:	4b35      	ldr	r3, [pc, #212]	@ (80010b4 <MX_TIM9_Init+0x108>)
 8000fde:	4a36      	ldr	r2, [pc, #216]	@ (80010b8 <MX_TIM9_Init+0x10c>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000fe2:	4b34      	ldr	r3, [pc, #208]	@ (80010b4 <MX_TIM9_Init+0x108>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b32      	ldr	r3, [pc, #200]	@ (80010b4 <MX_TIM9_Init+0x108>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000fee:	4b31      	ldr	r3, [pc, #196]	@ (80010b4 <MX_TIM9_Init+0x108>)
 8000ff0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ff4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80010b4 <MX_TIM9_Init+0x108>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80010b4 <MX_TIM9_Init+0x108>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001002:	482c      	ldr	r0, [pc, #176]	@ (80010b4 <MX_TIM9_Init+0x108>)
 8001004:	f003 fa6e 	bl	80044e4 <HAL_TIM_Base_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM9_Init+0x66>
  {
    Error_Handler();
 800100e:	f7ff fea7 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001018:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800101c:	4619      	mov	r1, r3
 800101e:	4825      	ldr	r0, [pc, #148]	@ (80010b4 <MX_TIM9_Init+0x108>)
 8001020:	f003 fc93 	bl	800494a <HAL_TIM_ConfigClockSource>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 800102a:	f7ff fe99 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 800102e:	4821      	ldr	r0, [pc, #132]	@ (80010b4 <MX_TIM9_Init+0x108>)
 8001030:	f003 faa7 	bl	8004582 <HAL_TIM_IC_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM9_Init+0x92>
  {
    Error_Handler();
 800103a:	f7ff fe91 	bl	8000d60 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800103e:	2304      	movs	r3, #4
 8001040:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001042:	2360      	movs	r3, #96	@ 0x60
 8001044:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001046:	2302      	movs	r3, #2
 8001048:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4816      	ldr	r0, [pc, #88]	@ (80010b4 <MX_TIM9_Init+0x108>)
 800105a:	f003 fd3d 	bl	8004ad8 <HAL_TIM_SlaveConfigSynchro>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM9_Init+0xbc>
  {
    Error_Handler();
 8001064:	f7ff fe7c 	bl	8000d60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800106c:	2302      	movs	r3, #2
 800106e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <MX_TIM9_Init+0x108>)
 8001080:	f003 fbc7 	bl	8004812 <HAL_TIM_IC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM9_Init+0xe2>
  {
    Error_Handler();
 800108a:	f7ff fe69 	bl	8000d60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800108e:	2302      	movs	r3, #2
 8001090:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001092:	2301      	movs	r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2204      	movs	r2, #4
 800109a:	4619      	mov	r1, r3
 800109c:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <MX_TIM9_Init+0x108>)
 800109e:	f003 fbb8 	bl	8004812 <HAL_TIM_IC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM9_Init+0x100>
  {
    Error_Handler();
 80010a8:	f7ff fe5a 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	3738      	adds	r7, #56	@ 0x38
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000350 	.word	0x20000350
 80010b8:	40014000 	.word	0x40014000

080010bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010dc:	d116      	bne.n	800110c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <HAL_TIM_Base_MspInit+0xcc>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	4a28      	ldr	r2, [pc, #160]	@ (8001188 <HAL_TIM_Base_MspInit+0xcc>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ee:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <HAL_TIM_Base_MspInit+0xcc>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	201c      	movs	r0, #28
 8001100:	f001 f9b9 	bl	8002476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001104:	201c      	movs	r0, #28
 8001106:	f001 f9d2 	bl	80024ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800110a:	e038      	b.n	800117e <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM9)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1e      	ldr	r2, [pc, #120]	@ (800118c <HAL_TIM_Base_MspInit+0xd0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d133      	bne.n	800117e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <HAL_TIM_Base_MspInit+0xcc>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	4a1a      	ldr	r2, [pc, #104]	@ (8001188 <HAL_TIM_Base_MspInit+0xcc>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001124:	6453      	str	r3, [r2, #68]	@ 0x44
 8001126:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <HAL_TIM_Base_MspInit+0xcc>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <HAL_TIM_Base_MspInit+0xcc>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a13      	ldr	r2, [pc, #76]	@ (8001188 <HAL_TIM_Base_MspInit+0xcc>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_TIM_Base_MspInit+0xcc>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800114e:	2308      	movs	r3, #8
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800115e:	2303      	movs	r3, #3
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4809      	ldr	r0, [pc, #36]	@ (8001190 <HAL_TIM_Base_MspInit+0xd4>)
 800116a:	f001 f9bb 	bl	80024e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2018      	movs	r0, #24
 8001174:	f001 f97f 	bl	8002476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001178:	2018      	movs	r0, #24
 800117a:	f001 f998 	bl	80024ae <HAL_NVIC_EnableIRQ>
}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	@ 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40014000 	.word	0x40014000
 8001190:	40020000 	.word	0x40020000

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001198:	f7ff feb6 	bl	8000f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	@ (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	@ (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f007 fcab 	bl	8008b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff fd27 	bl	8000c18 <main>
  bx  lr    
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011cc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80011d8:	08008c78 	.word	0x08008c78
  ldr r2, =_sbss
 80011dc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80011e0:	20001688 	.word	0x20001688

080011e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <HAL_Init+0x40>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <HAL_Init+0x40>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	@ (8001228 <HAL_Init+0x40>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f001 f925 	bl	8002460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	200f      	movs	r0, #15
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fda6 	bl	8000d6c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f001 f93d 	bl	80024ca <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f001 f905 	bl	8002476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000018 	.word	0x20000018
 8001284:	20000020 	.word	0x20000020
 8001288:	2000001c 	.word	0x2000001c

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_IncTick+0x1c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_IncTick+0x20>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a03      	ldr	r2, [pc, #12]	@ (80012ac <HAL_IncTick+0x20>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000020 	.word	0x20000020
 80012ac:	20000398 	.word	0x20000398

080012b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b02      	ldr	r3, [pc, #8]	@ (80012c0 <HAL_GetTick+0x10>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	20000398 	.word	0x20000398

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff fff0 	bl	80012b0 <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffe0 	bl	80012b0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000020 	.word	0x20000020

0800130c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e033      	b.n	800138a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	2b00      	cmp	r3, #0
 8001328:	d109      	bne.n	800133e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff f988 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	2b00      	cmp	r3, #0
 8001348:	d118      	bne.n	800137c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001352:	f023 0302 	bic.w	r3, r3, #2
 8001356:	f043 0202 	orr.w	r2, r3, #2
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f938 	bl	80015d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f023 0303 	bic.w	r3, r3, #3
 8001372:	f043 0201 	orr.w	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	641a      	str	r2, [r3, #64]	@ 0x40
 800137a:	e001      	b.n	8001380 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <HAL_ADC_ConfigChannel+0x1c>
 80013ac:	2302      	movs	r3, #2
 80013ae:	e103      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x224>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b09      	cmp	r3, #9
 80013be:	d925      	bls.n	800140c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68d9      	ldr	r1, [r3, #12]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	3b1e      	subs	r3, #30
 80013d6:	2207      	movs	r2, #7
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43da      	mvns	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	400a      	ands	r2, r1
 80013e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68d9      	ldr	r1, [r3, #12]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	4603      	mov	r3, r0
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4403      	add	r3, r0
 80013fe:	3b1e      	subs	r3, #30
 8001400:	409a      	lsls	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	e022      	b.n	8001452 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6919      	ldr	r1, [r3, #16]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	2207      	movs	r2, #7
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6919      	ldr	r1, [r3, #16]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	4618      	mov	r0, r3
 8001442:	4603      	mov	r3, r0
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4403      	add	r3, r0
 8001448:	409a      	lsls	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b06      	cmp	r3, #6
 8001458:	d824      	bhi.n	80014a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b05      	subs	r3, #5
 800146c:	221f      	movs	r2, #31
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	400a      	ands	r2, r1
 800147a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b05      	subs	r3, #5
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014a2:	e04c      	b.n	800153e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b0c      	cmp	r3, #12
 80014aa:	d824      	bhi.n	80014f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	3b23      	subs	r3, #35	@ 0x23
 80014be:	221f      	movs	r2, #31
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43da      	mvns	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	400a      	ands	r2, r1
 80014cc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3b23      	subs	r3, #35	@ 0x23
 80014e8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014f4:	e023      	b.n	800153e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	3b41      	subs	r3, #65	@ 0x41
 8001508:	221f      	movs	r2, #31
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	400a      	ands	r2, r1
 8001516:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	3b41      	subs	r3, #65	@ 0x41
 8001532:	fa00 f203 	lsl.w	r2, r0, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a20      	ldr	r2, [pc, #128]	@ (80015c4 <HAL_ADC_ConfigChannel+0x230>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d109      	bne.n	800155c <HAL_ADC_ConfigChannel+0x1c8>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b12      	cmp	r3, #18
 800154e:	d105      	bne.n	800155c <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001550:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <HAL_ADC_ConfigChannel+0x234>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a1c      	ldr	r2, [pc, #112]	@ (80015c8 <HAL_ADC_ConfigChannel+0x234>)
 8001556:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800155a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a18      	ldr	r2, [pc, #96]	@ (80015c4 <HAL_ADC_ConfigChannel+0x230>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d123      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x21a>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b10      	cmp	r3, #16
 800156c:	d003      	beq.n	8001576 <HAL_ADC_ConfigChannel+0x1e2>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b11      	cmp	r3, #17
 8001574:	d11b      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <HAL_ADC_ConfigChannel+0x234>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4a13      	ldr	r2, [pc, #76]	@ (80015c8 <HAL_ADC_ConfigChannel+0x234>)
 800157c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001580:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b10      	cmp	r3, #16
 8001588:	d111      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <HAL_ADC_ConfigChannel+0x238>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a10      	ldr	r2, [pc, #64]	@ (80015d0 <HAL_ADC_ConfigChannel+0x23c>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	0c9a      	lsrs	r2, r3, #18
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80015a0:	e002      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f9      	bne.n	80015a2 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40012000 	.word	0x40012000
 80015c8:	40012300 	.word	0x40012300
 80015cc:	20000018 	.word	0x20000018
 80015d0:	431bde83 	.word	0x431bde83

080015d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80015dc:	4b7e      	ldr	r3, [pc, #504]	@ (80017d8 <ADC_Init+0x204>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a7d      	ldr	r2, [pc, #500]	@ (80017d8 <ADC_Init+0x204>)
 80015e2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80015e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80015e8:	4b7b      	ldr	r3, [pc, #492]	@ (80017d8 <ADC_Init+0x204>)
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4979      	ldr	r1, [pc, #484]	@ (80017d8 <ADC_Init+0x204>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	021a      	lsls	r2, r3, #8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800164a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6899      	ldr	r1, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001662:	4a5e      	ldr	r2, [pc, #376]	@ (80017dc <ADC_Init+0x208>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d022      	beq.n	80016ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001676:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6899      	ldr	r1, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	e00f      	b.n	80016ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0202 	bic.w	r2, r2, #2
 80016dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6899      	ldr	r1, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7e1b      	ldrb	r3, [r3, #24]
 80016e8:	005a      	lsls	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d027      	beq.n	800174c <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800170a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800171a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	3b01      	subs	r3, #1
 8001722:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8001726:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	fa92 f2a2 	rbit	r2, r2
 800172e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	fab2 f282 	clz	r2, r2
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	fa03 f102 	lsl.w	r1, r3, r2
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	e007      	b.n	800175c <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800175a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800176a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	3b01      	subs	r3, #1
 8001778:	051a      	lsls	r2, r3, #20
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6899      	ldr	r1, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800179e:	025a      	lsls	r2, r3, #9
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6899      	ldr	r1, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	029a      	lsls	r2, r3, #10
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	609a      	str	r2, [r3, #8]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40012300 	.word	0x40012300
 80017dc:	0f000001 	.word	0x0f000001

080017e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0ed      	b.n	80019ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff f8be 	bl	8000980 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001814:	f7ff fd4c 	bl	80012b0 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800181a:	e012      	b.n	8001842 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800181c:	f7ff fd48 	bl	80012b0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d90b      	bls.n	8001842 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2205      	movs	r2, #5
 800183a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e0c5      	b.n	80019ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0e5      	beq.n	800181c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0202 	bic.w	r2, r2, #2
 800185e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001860:	f7ff fd26 	bl	80012b0 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001866:	e012      	b.n	800188e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001868:	f7ff fd22 	bl	80012b0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b0a      	cmp	r3, #10
 8001874:	d90b      	bls.n	800188e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2205      	movs	r2, #5
 8001886:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e09f      	b.n	80019ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e5      	bne.n	8001868 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7e1b      	ldrb	r3, [r3, #24]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d108      	bne.n	80018b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e007      	b.n	80018c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7e5b      	ldrb	r3, [r3, #25]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d108      	bne.n	80018e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e007      	b.n	80018f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7e9b      	ldrb	r3, [r3, #26]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d108      	bne.n	800190a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0220 	orr.w	r2, r2, #32
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e007      	b.n	800191a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0220 	bic.w	r2, r2, #32
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7edb      	ldrb	r3, [r3, #27]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d108      	bne.n	8001934 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0210 	bic.w	r2, r2, #16
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e007      	b.n	8001944 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0210 	orr.w	r2, r2, #16
 8001942:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7f1b      	ldrb	r3, [r3, #28]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d108      	bne.n	800195e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0208 	orr.w	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e007      	b.n	800196e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0208 	bic.w	r2, r2, #8
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7f5b      	ldrb	r3, [r3, #29]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d108      	bne.n	8001988 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0204 	orr.w	r2, r2, #4
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e007      	b.n	8001998 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0204 	bic.w	r2, r2, #4
 8001996:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	ea42 0103 	orr.w	r1, r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	1e5a      	subs	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019f0:	7cfb      	ldrb	r3, [r7, #19]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d003      	beq.n	80019fe <HAL_CAN_ConfigFilter+0x26>
 80019f6:	7cfb      	ldrb	r3, [r7, #19]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	f040 80be 	bne.w	8001b7a <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80019fe:	4b65      	ldr	r3, [pc, #404]	@ (8001b94 <HAL_CAN_ConfigFilter+0x1bc>)
 8001a00:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a18:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	2201      	movs	r2, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	401a      	ands	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d123      	bne.n	8001aa8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3248      	adds	r2, #72	@ 0x48
 8001a88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a9e:	6979      	ldr	r1, [r7, #20]
 8001aa0:	3348      	adds	r3, #72	@ 0x48
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d122      	bne.n	8001af6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ad0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3248      	adds	r2, #72	@ 0x48
 8001ad6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aec:	6979      	ldr	r1, [r7, #20]
 8001aee:	3348      	adds	r3, #72	@ 0x48
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	401a      	ands	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001b10:	e007      	b.n	8001b22 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	401a      	ands	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001b3c:	e007      	b.n	8001b4e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b6c:	f023 0201 	bic.w	r2, r3, #1
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e006      	b.n	8001b88 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
  }
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40006400 	.word	0x40006400

08001b98 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d12e      	bne.n	8001c0a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bc4:	f7ff fb74 	bl	80012b0 <HAL_GetTick>
 8001bc8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bca:	e012      	b.n	8001bf2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bcc:	f7ff fb70 	bl	80012b0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b0a      	cmp	r3, #10
 8001bd8:	d90b      	bls.n	8001bf2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2205      	movs	r2, #5
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e012      	b.n	8001c18 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e5      	bne.n	8001bcc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e006      	b.n	8001c18 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
  }
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c34:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c3e:	7ffb      	ldrb	r3, [r7, #31]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d003      	beq.n	8001c4c <HAL_CAN_AddTxMessage+0x2c>
 8001c44:	7ffb      	ldrb	r3, [r7, #31]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	f040 80ad 	bne.w	8001da6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10a      	bne.n	8001c6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8095 	beq.w	8001d96 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	0e1b      	lsrs	r3, r3, #24
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c76:	2201      	movs	r2, #1
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c92:	68f9      	ldr	r1, [r7, #12]
 8001c94:	6809      	ldr	r1, [r1, #0]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3318      	adds	r3, #24
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	440b      	add	r3, r1
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e00f      	b.n	8001cc4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cb4:	68f9      	ldr	r1, [r7, #12]
 8001cb6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001cb8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3318      	adds	r3, #24
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	440b      	add	r3, r1
 8001cc2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6819      	ldr	r1, [r3, #0]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3318      	adds	r3, #24
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	7d1b      	ldrb	r3, [r3, #20]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d111      	bne.n	8001d04 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3318      	adds	r3, #24
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	4413      	add	r3, r2
 8001cec:	3304      	adds	r3, #4
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	6811      	ldr	r1, [r2, #0]
 8001cf4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3318      	adds	r3, #24
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	440b      	add	r3, r1
 8001d00:	3304      	adds	r3, #4
 8001d02:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3307      	adds	r3, #7
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	061a      	lsls	r2, r3, #24
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3306      	adds	r3, #6
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	041b      	lsls	r3, r3, #16
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3305      	adds	r3, #5
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	3204      	adds	r2, #4
 8001d24:	7812      	ldrb	r2, [r2, #0]
 8001d26:	4610      	mov	r0, r2
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	6811      	ldr	r1, [r2, #0]
 8001d2c:	ea43 0200 	orr.w	r2, r3, r0
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	440b      	add	r3, r1
 8001d36:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001d3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	061a      	lsls	r2, r3, #24
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3302      	adds	r3, #2
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	041b      	lsls	r3, r3, #16
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3301      	adds	r3, #1
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	4313      	orrs	r3, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	6811      	ldr	r1, [r2, #0]
 8001d62:	ea43 0200 	orr.w	r2, r3, r0
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001d70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3318      	adds	r3, #24
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4413      	add	r3, r2
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	6811      	ldr	r1, [r2, #0]
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3318      	adds	r3, #24
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	440b      	add	r3, r1
 8001d90:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e00e      	b.n	8001db4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e006      	b.n	8001db4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
  }
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3724      	adds	r7, #36	@ 0x24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d002      	beq.n	8001dde <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d11d      	bne.n	8001e1a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3301      	adds	r3, #1
 8001e04:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3301      	adds	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e36:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d002      	beq.n	8001e44 <HAL_CAN_ActivateNotification+0x1e>
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d109      	bne.n	8001e58 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6959      	ldr	r1, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e006      	b.n	8001e66 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
  }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	@ 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d07c      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d023      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f983 	bl	80021de <HAL_CAN_TxMailbox0CompleteCallback>
 8001ed8:	e016      	b.n	8001f08 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d004      	beq.n	8001eee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eec:	e00c      	b.n	8001f08 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f00:	e002      	b.n	8001f08 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f986 	bl	8002214 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d024      	beq.n	8001f5c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f962 	bl	80021f0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f2c:	e016      	b.n	8001f5c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f40:	e00c      	b.n	8001f5c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f54:	e002      	b.n	8001f5c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f965 	bl	8002226 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d024      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f941 	bl	8002202 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f80:	e016      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d004      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f94:	e00c      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa8:	e002      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f944 	bl	8002238 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2208      	movs	r2, #8
 8001fee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f933 	bl	800225c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f91b 	bl	800224a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00c      	beq.n	8002038 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2210      	movs	r2, #16
 8002036:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2208      	movs	r2, #8
 8002052:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f913 	bl	8002280 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d009      	beq.n	8002078 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8fb 	bl	800226e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d006      	beq.n	800209a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2210      	movs	r2, #16
 8002092:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f8fc 	bl	8002292 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2208      	movs	r2, #8
 80020b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f8f4 	bl	80022a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d07b      	beq.n	80021be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d072      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800212a:	2b00      	cmp	r3, #0
 800212c:	d043      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002134:	2b00      	cmp	r3, #0
 8002136:	d03e      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800213e:	2b60      	cmp	r3, #96	@ 0x60
 8002140:	d02b      	beq.n	800219a <HAL_CAN_IRQHandler+0x32a>
 8002142:	2b60      	cmp	r3, #96	@ 0x60
 8002144:	d82e      	bhi.n	80021a4 <HAL_CAN_IRQHandler+0x334>
 8002146:	2b50      	cmp	r3, #80	@ 0x50
 8002148:	d022      	beq.n	8002190 <HAL_CAN_IRQHandler+0x320>
 800214a:	2b50      	cmp	r3, #80	@ 0x50
 800214c:	d82a      	bhi.n	80021a4 <HAL_CAN_IRQHandler+0x334>
 800214e:	2b40      	cmp	r3, #64	@ 0x40
 8002150:	d019      	beq.n	8002186 <HAL_CAN_IRQHandler+0x316>
 8002152:	2b40      	cmp	r3, #64	@ 0x40
 8002154:	d826      	bhi.n	80021a4 <HAL_CAN_IRQHandler+0x334>
 8002156:	2b30      	cmp	r3, #48	@ 0x30
 8002158:	d010      	beq.n	800217c <HAL_CAN_IRQHandler+0x30c>
 800215a:	2b30      	cmp	r3, #48	@ 0x30
 800215c:	d822      	bhi.n	80021a4 <HAL_CAN_IRQHandler+0x334>
 800215e:	2b10      	cmp	r3, #16
 8002160:	d002      	beq.n	8002168 <HAL_CAN_IRQHandler+0x2f8>
 8002162:	2b20      	cmp	r3, #32
 8002164:	d005      	beq.n	8002172 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002166:	e01d      	b.n	80021a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	f043 0308 	orr.w	r3, r3, #8
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002170:	e019      	b.n	80021a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	f043 0310 	orr.w	r3, r3, #16
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800217a:	e014      	b.n	80021a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	f043 0320 	orr.w	r3, r3, #32
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002184:	e00f      	b.n	80021a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800218e:	e00a      	b.n	80021a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002198:	e005      	b.n	80021a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021a2:	e000      	b.n	80021a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80021a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80021b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2204      	movs	r2, #4
 80021bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f870 	bl	80022b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021d6:	bf00      	nop
 80021d8:	3728      	adds	r7, #40	@ 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	@ (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	@ (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db0b      	blt.n	8002356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4906      	ldr	r1, [pc, #24]	@ (8002360 <__NVIC_EnableIRQ+0x34>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	@ (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800242c:	d301      	bcc.n	8002432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242e:	2301      	movs	r3, #1
 8002430:	e00f      	b.n	8002452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002432:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <SysTick_Config+0x40>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243a:	210f      	movs	r1, #15
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f7ff ff90 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002444:	4b05      	ldr	r3, [pc, #20]	@ (800245c <SysTick_Config+0x40>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244a:	4b04      	ldr	r3, [pc, #16]	@ (800245c <SysTick_Config+0x40>)
 800244c:	2207      	movs	r2, #7
 800244e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	e000e010 	.word	0xe000e010

08002460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff2d 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002488:	f7ff ff42 	bl	8002310 <__NVIC_GetPriorityGrouping>
 800248c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7ff ff90 	bl	80023b8 <NVIC_EncodePriority>
 8002498:	4602      	mov	r2, r0
 800249a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff5f 	bl	8002364 <__NVIC_SetPriority>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff35 	bl	800232c <__NVIC_EnableIRQ>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ffa2 	bl	800241c <SysTick_Config>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f2:	e16f      	b.n	80027d4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2101      	movs	r1, #1
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	4013      	ands	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8161 	beq.w	80027ce <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d005      	beq.n	8002524 <HAL_GPIO_Init+0x40>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d130      	bne.n	8002586 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800255a:	2201      	movs	r2, #1
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 0201 	and.w	r2, r3, #1
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b03      	cmp	r3, #3
 8002590:	d017      	beq.n	80025c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d123      	bne.n	8002616 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	08da      	lsrs	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3208      	adds	r2, #8
 80025d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	08da      	lsrs	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	6939      	ldr	r1, [r7, #16]
 8002612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0203 	and.w	r2, r3, #3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80bb 	beq.w	80027ce <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002658:	2300      	movs	r3, #0
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	4b64      	ldr	r3, [pc, #400]	@ (80027f0 <HAL_GPIO_Init+0x30c>)
 800265e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002660:	4a63      	ldr	r2, [pc, #396]	@ (80027f0 <HAL_GPIO_Init+0x30c>)
 8002662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002666:	6453      	str	r3, [r2, #68]	@ 0x44
 8002668:	4b61      	ldr	r3, [pc, #388]	@ (80027f0 <HAL_GPIO_Init+0x30c>)
 800266a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002674:	4a5f      	ldr	r2, [pc, #380]	@ (80027f4 <HAL_GPIO_Init+0x310>)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a57      	ldr	r2, [pc, #348]	@ (80027f8 <HAL_GPIO_Init+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <HAL_GPIO_Init+0x220>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a56      	ldr	r2, [pc, #344]	@ (80027fc <HAL_GPIO_Init+0x318>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d02b      	beq.n	8002700 <HAL_GPIO_Init+0x21c>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a55      	ldr	r2, [pc, #340]	@ (8002800 <HAL_GPIO_Init+0x31c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d025      	beq.n	80026fc <HAL_GPIO_Init+0x218>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a54      	ldr	r2, [pc, #336]	@ (8002804 <HAL_GPIO_Init+0x320>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d01f      	beq.n	80026f8 <HAL_GPIO_Init+0x214>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a53      	ldr	r2, [pc, #332]	@ (8002808 <HAL_GPIO_Init+0x324>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d019      	beq.n	80026f4 <HAL_GPIO_Init+0x210>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a52      	ldr	r2, [pc, #328]	@ (800280c <HAL_GPIO_Init+0x328>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d013      	beq.n	80026f0 <HAL_GPIO_Init+0x20c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a51      	ldr	r2, [pc, #324]	@ (8002810 <HAL_GPIO_Init+0x32c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00d      	beq.n	80026ec <HAL_GPIO_Init+0x208>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a50      	ldr	r2, [pc, #320]	@ (8002814 <HAL_GPIO_Init+0x330>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d007      	beq.n	80026e8 <HAL_GPIO_Init+0x204>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a4f      	ldr	r2, [pc, #316]	@ (8002818 <HAL_GPIO_Init+0x334>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d101      	bne.n	80026e4 <HAL_GPIO_Init+0x200>
 80026e0:	2308      	movs	r3, #8
 80026e2:	e010      	b.n	8002706 <HAL_GPIO_Init+0x222>
 80026e4:	2309      	movs	r3, #9
 80026e6:	e00e      	b.n	8002706 <HAL_GPIO_Init+0x222>
 80026e8:	2307      	movs	r3, #7
 80026ea:	e00c      	b.n	8002706 <HAL_GPIO_Init+0x222>
 80026ec:	2306      	movs	r3, #6
 80026ee:	e00a      	b.n	8002706 <HAL_GPIO_Init+0x222>
 80026f0:	2305      	movs	r3, #5
 80026f2:	e008      	b.n	8002706 <HAL_GPIO_Init+0x222>
 80026f4:	2304      	movs	r3, #4
 80026f6:	e006      	b.n	8002706 <HAL_GPIO_Init+0x222>
 80026f8:	2303      	movs	r3, #3
 80026fa:	e004      	b.n	8002706 <HAL_GPIO_Init+0x222>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e002      	b.n	8002706 <HAL_GPIO_Init+0x222>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_GPIO_Init+0x222>
 8002704:	2300      	movs	r3, #0
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	f002 0203 	and.w	r2, r2, #3
 800270c:	0092      	lsls	r2, r2, #2
 800270e:	4093      	lsls	r3, r2
 8002710:	461a      	mov	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002718:	4936      	ldr	r1, [pc, #216]	@ (80027f4 <HAL_GPIO_Init+0x310>)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	3302      	adds	r3, #2
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002726:	4b3d      	ldr	r3, [pc, #244]	@ (800281c <HAL_GPIO_Init+0x338>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	43db      	mvns	r3, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800274a:	4a34      	ldr	r2, [pc, #208]	@ (800281c <HAL_GPIO_Init+0x338>)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002750:	4b32      	ldr	r3, [pc, #200]	@ (800281c <HAL_GPIO_Init+0x338>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	43db      	mvns	r3, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002774:	4a29      	ldr	r2, [pc, #164]	@ (800281c <HAL_GPIO_Init+0x338>)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800277a:	4b28      	ldr	r3, [pc, #160]	@ (800281c <HAL_GPIO_Init+0x338>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	43db      	mvns	r3, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4013      	ands	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800279e:	4a1f      	ldr	r2, [pc, #124]	@ (800281c <HAL_GPIO_Init+0x338>)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a4:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <HAL_GPIO_Init+0x338>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027c8:	4a14      	ldr	r2, [pc, #80]	@ (800281c <HAL_GPIO_Init+0x338>)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	3301      	adds	r3, #1
 80027d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	fa22 f303 	lsr.w	r3, r2, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f47f ae88 	bne.w	80024f4 <HAL_GPIO_Init+0x10>
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40020800 	.word	0x40020800
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021000 	.word	0x40021000
 800280c:	40021400 	.word	0x40021400
 8002810:	40021800 	.word	0x40021800
 8002814:	40021c00 	.word	0x40021c00
 8002818:	40022000 	.word	0x40022000
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800283c:	e003      	b.n	8002846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4013      	ands	r3, r2
 8002868:	041a      	lsls	r2, r3, #16
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	43d9      	mvns	r1, r3
 800286e:	887b      	ldrh	r3, [r7, #2]
 8002870:	400b      	ands	r3, r1
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	619a      	str	r2, [r3, #24]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af02      	add	r7, sp, #8
 8002888:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e101      	b.n	8002a98 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f005 fd4c 	bl	800834c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2203      	movs	r2, #3
 80028b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028c2:	d102      	bne.n	80028ca <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fdf8 	bl	80054c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7c1a      	ldrb	r2, [r3, #16]
 80028dc:	f88d 2000 	strb.w	r2, [sp]
 80028e0:	3304      	adds	r3, #4
 80028e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028e4:	f002 fce2 	bl	80052ac <USB_CoreInit>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0ce      	b.n	8002a98 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f002 fdef 	bl	80054e4 <USB_SetCurrentMode>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0bf      	b.n	8002a98 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]
 800291c:	e04a      	b.n	80029b4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3315      	adds	r3, #21
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3314      	adds	r3, #20
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	b298      	uxth	r0, r3
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	332e      	adds	r3, #46	@ 0x2e
 800295a:	4602      	mov	r2, r0
 800295c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3318      	adds	r3, #24
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	331c      	adds	r3, #28
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	3320      	adds	r3, #32
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3324      	adds	r3, #36	@ 0x24
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	3301      	adds	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	791b      	ldrb	r3, [r3, #4]
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d3af      	bcc.n	800291e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
 80029c2:	e044      	b.n	8002a4e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	791b      	ldrb	r3, [r3, #4]
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d3b5      	bcc.n	80029c4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7c1a      	ldrb	r2, [r3, #16]
 8002a60:	f88d 2000 	strb.w	r2, [sp]
 8002a64:	3304      	adds	r3, #4
 8002a66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a68:	f002 fd88 	bl	800557c <USB_DevInit>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2202      	movs	r2, #2
 8002a76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00c      	b.n	8002a98 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f003 fdbf 	bl	8006614 <USB_DevDisconnect>

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_PCD_Start+0x16>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e012      	b.n	8002adc <HAL_PCD_Start+0x3c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f002 fcee 	bl	80054a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f003 fd81 	bl	80065d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b08d      	sub	sp, #52	@ 0x34
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f003 fe38 	bl	8006770 <USB_GetMode>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f040 847e 	bne.w	8003404 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f003 fda1 	bl	8006654 <USB_ReadInterrupts>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 8474 	beq.w	8003402 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f003 fd8e 	bl	8006654 <USB_ReadInterrupts>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d107      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f002 0202 	and.w	r2, r2, #2
 8002b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 fd7c 	bl	8006654 <USB_ReadInterrupts>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d161      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699a      	ldr	r2, [r3, #24]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0210 	bic.w	r2, r2, #16
 8002b74:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	3304      	adds	r3, #4
 8002b94:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002b9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ba0:	d124      	bne.n	8002bec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d035      	beq.n	8002c1a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	6a38      	ldr	r0, [r7, #32]
 8002bc2:	f003 fbb9 	bl	8006338 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd2:	441a      	add	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be4:	441a      	add	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	615a      	str	r2, [r3, #20]
 8002bea:	e016      	b.n	8002c1a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002bf2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002bf6:	d110      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bfe:	2208      	movs	r2, #8
 8002c00:	4619      	mov	r1, r3
 8002c02:	6a38      	ldr	r0, [r7, #32]
 8002c04:	f003 fb98 	bl	8006338 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c14:	441a      	add	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0210 	orr.w	r2, r2, #16
 8002c28:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 fd10 	bl	8006654 <USB_ReadInterrupts>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c3e:	f040 80a7 	bne.w	8002d90 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fd14 	bl	8006678 <USB_ReadDevAllOutEpInterrupt>
 8002c50:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002c52:	e099      	b.n	8002d88 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 808e 	beq.w	8002d7c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 fd36 	bl	80066dc <USB_ReadDevOutEPInterrupt>
 8002c70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00c      	beq.n	8002c96 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fe93 	bl	80039bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00c      	beq.n	8002cba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cac:	461a      	mov	r2, r3
 8002cae:	2308      	movs	r3, #8
 8002cb0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 ff69 	bl	8003b8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d030      	beq.n	8002d42 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce8:	2b80      	cmp	r3, #128	@ 0x80
 8002cea:	d109      	bne.n	8002d00 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cfe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	3304      	adds	r3, #4
 8002d14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	78db      	ldrb	r3, [r3, #3]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d108      	bne.n	8002d30 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2200      	movs	r2, #0
 8002d22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f005 fc22 	bl	8008574 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2302      	movs	r3, #2
 8002d40:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d009      	beq.n	8002d7c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d74:	461a      	mov	r2, r3
 8002d76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d7a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	3301      	adds	r3, #1
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f47f af62 	bne.w	8002c54 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 fc5d 	bl	8006654 <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002da0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002da4:	f040 80db 	bne.w	8002f5e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 fc7c 	bl	80066aa <USB_ReadDevAllInEpInterrupt>
 8002db2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002db8:	e0cd      	b.n	8002f56 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80c2 	beq.w	8002f4a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f003 fca0 	bl	8006716 <USB_ReadDevInEPInterrupt>
 8002dd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d057      	beq.n	8002e92 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	2201      	movs	r2, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69f9      	ldr	r1, [r7, #28]
 8002dfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e02:	4013      	ands	r3, r2
 8002e04:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e12:	461a      	mov	r2, r3
 8002e14:	2301      	movs	r3, #1
 8002e16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	799b      	ldrb	r3, [r3, #6]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d132      	bne.n	8002e86 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3320      	adds	r3, #32
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4403      	add	r3, r0
 8002e40:	331c      	adds	r3, #28
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4419      	add	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4403      	add	r3, r0
 8002e54:	3320      	adds	r3, #32
 8002e56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d113      	bne.n	8002e86 <HAL_PCD_IRQHandler+0x3a2>
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3324      	adds	r3, #36	@ 0x24
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d108      	bne.n	8002e86 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2101      	movs	r1, #1
 8002e82:	f003 fca5 	bl	80067d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f005 faec 	bl	800846a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2308      	movs	r3, #8
 8002eac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2310      	movs	r3, #16
 8002ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2340      	movs	r3, #64	@ 0x40
 8002ee4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d023      	beq.n	8002f38 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ef0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ef2:	6a38      	ldr	r0, [r7, #32]
 8002ef4:	f002 fca6 	bl	8005844 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	3310      	adds	r3, #16
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	3304      	adds	r3, #4
 8002f0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	78db      	ldrb	r3, [r3, #3]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2200      	movs	r2, #0
 8002f18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f005 fb39 	bl	8008598 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f32:	461a      	mov	r2, r3
 8002f34:	2302      	movs	r3, #2
 8002f36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fcac 	bl	80038a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f47f af2e 	bne.w	8002dba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 fb76 	bl	8006654 <USB_ReadInterrupts>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f72:	d114      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f005 fae5 	bl	8008558 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 fb56 	bl	8006654 <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb2:	d112      	bne.n	8002fda <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d102      	bne.n	8002fca <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f005 faa1 	bl	800850c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002fd8:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 fb38 	bl	8006654 <USB_ReadInterrupts>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fee:	f040 80b7 	bne.w	8003160 <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2110      	movs	r1, #16
 800300c:	4618      	mov	r0, r3
 800300e:	f002 fc19 	bl	8005844 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003012:	2300      	movs	r3, #0
 8003014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003016:	e046      	b.n	80030a6 <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003024:	461a      	mov	r2, r3
 8003026:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800302a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800302c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800303c:	0151      	lsls	r1, r2, #5
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	440a      	add	r2, r1
 8003042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003046:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800304a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800304c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003058:	461a      	mov	r2, r3
 800305a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800305e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003070:	0151      	lsls	r1, r2, #5
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	440a      	add	r2, r1
 8003076:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800307a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800307e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003090:	0151      	lsls	r1, r2, #5
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	440a      	add	r2, r1
 8003096:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800309a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800309e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a2:	3301      	adds	r3, #1
 80030a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	791b      	ldrb	r3, [r3, #4]
 80030aa:	461a      	mov	r2, r3
 80030ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d3b2      	bcc.n	8003018 <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030c0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80030c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7bdb      	ldrb	r3, [r3, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d016      	beq.n	80030fc <HAL_PCD_IRQHandler+0x618>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030de:	f043 030b 	orr.w	r3, r3, #11
 80030e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030f4:	f043 030b 	orr.w	r3, r3, #11
 80030f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030fa:	e015      	b.n	8003128 <HAL_PCD_IRQHandler+0x644>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800310a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800310e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003112:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003122:	f043 030b 	orr.w	r3, r3, #11
 8003126:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003136:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800313a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800314a:	461a      	mov	r2, r3
 800314c:	f003 fb40 	bl	80067d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800315e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f003 fa75 	bl	8006654 <USB_ReadInterrupts>
 800316a:	4603      	mov	r3, r0
 800316c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003174:	d123      	bne.n	80031be <HAL_PCD_IRQHandler+0x6da>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f003 fb05 	bl	800678a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f002 fbd3 	bl	8005930 <USB_GetDevSpeed>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681c      	ldr	r4, [r3, #0]
 8003196:	f001 f99b 	bl	80044d0 <HAL_RCC_GetHCLKFreq>
 800319a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031a0:	461a      	mov	r2, r3
 80031a2:	4620      	mov	r0, r4
 80031a4:	f002 f8dc 	bl	8005360 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f005 f986 	bl	80084ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80031bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f003 fa46 	bl	8006654 <USB_ReadInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d10a      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f005 f963 	bl	800849e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f002 0208 	and.w	r2, r2, #8
 80031e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fa31 	bl	8006654 <USB_ReadInterrupts>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f8:	2b80      	cmp	r3, #128	@ 0x80
 80031fa:	d123      	bne.n	8003244 <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003208:	2301      	movs	r3, #1
 800320a:	627b      	str	r3, [r7, #36]	@ 0x24
 800320c:	e014      	b.n	8003238 <HAL_PCD_IRQHandler+0x754>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d105      	bne.n	8003232 <HAL_PCD_IRQHandler+0x74e>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	b2db      	uxtb	r3, r3
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fb07 	bl	8003840 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	3301      	adds	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	791b      	ldrb	r3, [r3, #4]
 800323c:	461a      	mov	r2, r3
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	4293      	cmp	r3, r2
 8003242:	d3e4      	bcc.n	800320e <HAL_PCD_IRQHandler+0x72a>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f003 fa03 	bl	8006654 <USB_ReadInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003254:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003258:	d13c      	bne.n	80032d4 <HAL_PCD_IRQHandler+0x7f0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800325a:	2301      	movs	r3, #1
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
 800325e:	e02b      	b.n	80032b8 <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3318      	adds	r3, #24
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d115      	bne.n	80032b2 <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003286:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003288:	2b00      	cmp	r3, #0
 800328a:	da12      	bge.n	80032b2 <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3317      	adds	r3, #23
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4619      	mov	r1, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fac7 	bl	8003840 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	3301      	adds	r3, #1
 80032b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	791b      	ldrb	r3, [r3, #4]
 80032bc:	461a      	mov	r2, r3
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d3cd      	bcc.n	8003260 <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80032d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 f9bb 	bl	8006654 <USB_ReadInterrupts>
 80032de:	4603      	mov	r3, r0
 80032e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032e8:	d156      	bne.n	8003398 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032ea:	2301      	movs	r3, #1
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ee:	e045      	b.n	800337c <HAL_PCD_IRQHandler+0x898>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d12e      	bne.n	8003376 <HAL_PCD_IRQHandler+0x892>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003318:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800331a:	2b00      	cmp	r3, #0
 800331c:	da2b      	bge.n	8003376 <HAL_PCD_IRQHandler+0x892>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800332a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800332e:	429a      	cmp	r2, r3
 8003330:	d121      	bne.n	8003376 <HAL_PCD_IRQHandler+0x892>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10a      	bne.n	8003376 <HAL_PCD_IRQHandler+0x892>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800336e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003372:	6053      	str	r3, [r2, #4]
            break;
 8003374:	e008      	b.n	8003388 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	3301      	adds	r3, #1
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	791b      	ldrb	r3, [r3, #4]
 8003380:	461a      	mov	r2, r3
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	4293      	cmp	r3, r2
 8003386:	d3b3      	bcc.n	80032f0 <HAL_PCD_IRQHandler+0x80c>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003396:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f003 f959 	bl	8006654 <USB_ReadInterrupts>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ac:	d10a      	bne.n	80033c4 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f005 f904 	bl	80085bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80033c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f003 f943 	bl	8006654 <USB_ReadInterrupts>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d115      	bne.n	8003404 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f005 f8f4 	bl	80085d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	e000      	b.n	8003404 <HAL_PCD_IRQHandler+0x920>
      return;
 8003402:	bf00      	nop
    }
  }
}
 8003404:	3734      	adds	r7, #52	@ 0x34
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}

0800340a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	460b      	mov	r3, r1
 8003414:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_PCD_SetAddress+0x1a>
 8003420:	2302      	movs	r3, #2
 8003422:	e012      	b.n	800344a <HAL_PCD_SetAddress+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f003 f8a5 	bl	800658a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	4608      	mov	r0, r1
 800345c:	4611      	mov	r1, r2
 800345e:	461a      	mov	r2, r3
 8003460:	4603      	mov	r3, r0
 8003462:	70fb      	strb	r3, [r7, #3]
 8003464:	460b      	mov	r3, r1
 8003466:	803b      	strh	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003474:	2b00      	cmp	r3, #0
 8003476:	da0f      	bge.n	8003498 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	f003 020f 	and.w	r2, r3, #15
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	3310      	adds	r3, #16
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	4413      	add	r3, r2
 800348c:	3304      	adds	r3, #4
 800348e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	705a      	strb	r2, [r3, #1]
 8003496:	e00f      	b.n	80034b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 020f 	and.w	r2, r3, #15
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	3304      	adds	r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034c4:	883a      	ldrh	r2, [r7, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	78ba      	ldrb	r2, [r7, #2]
 80034ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d004      	beq.n	80034e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034e2:	78bb      	ldrb	r3, [r7, #2]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d102      	bne.n	80034ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_PCD_EP_Open+0xaa>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e00e      	b.n	800351a <HAL_PCD_EP_Open+0xc8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68f9      	ldr	r1, [r7, #12]
 800350a:	4618      	mov	r0, r3
 800350c:	f002 fa34 	bl	8005978 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003518:	7afb      	ldrb	r3, [r7, #11]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800352e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003532:	2b00      	cmp	r3, #0
 8003534:	da0f      	bge.n	8003556 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 020f 	and.w	r2, r3, #15
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	3310      	adds	r3, #16
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	3304      	adds	r3, #4
 800354c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	705a      	strb	r2, [r3, #1]
 8003554:	e00f      	b.n	8003576 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 020f 	and.w	r2, r3, #15
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	4413      	add	r3, r2
 800356c:	3304      	adds	r3, #4
 800356e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_PCD_EP_Close+0x6e>
 800358c:	2302      	movs	r3, #2
 800358e:	e00e      	b.n	80035ae <HAL_PCD_EP_Close+0x8c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68f9      	ldr	r1, [r7, #12]
 800359e:	4618      	mov	r0, r3
 80035a0:	f002 fa70 	bl	8005a84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	460b      	mov	r3, r1
 80035c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	f003 020f 	and.w	r2, r3, #15
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	3304      	adds	r3, #4
 80035de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2200      	movs	r2, #0
 80035f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f8:	7afb      	ldrb	r3, [r7, #11]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	799b      	ldrb	r3, [r3, #6]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d102      	bne.n	8003612 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	799b      	ldrb	r3, [r3, #6]
 800361a:	461a      	mov	r2, r3
 800361c:	6979      	ldr	r1, [r7, #20]
 800361e:	f002 fb0d 	bl	8005c3c <USB_EPStartXfer>

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	f003 020f 	and.w	r2, r3, #15
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	460b      	mov	r3, r1
 8003668:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800366a:	7afb      	ldrb	r3, [r7, #11]
 800366c:	f003 020f 	and.w	r2, r3, #15
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	3310      	adds	r3, #16
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4413      	add	r3, r2
 800367e:	3304      	adds	r3, #4
 8003680:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2200      	movs	r2, #0
 8003692:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2201      	movs	r2, #1
 8003698:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	799b      	ldrb	r3, [r3, #6]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d102      	bne.n	80036b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	799b      	ldrb	r3, [r3, #6]
 80036bc:	461a      	mov	r2, r3
 80036be:	6979      	ldr	r1, [r7, #20]
 80036c0:	f002 fabc 	bl	8005c3c <USB_EPStartXfer>

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	7912      	ldrb	r2, [r2, #4]
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e04f      	b.n	800378c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	da0f      	bge.n	8003714 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	f003 020f 	and.w	r2, r3, #15
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	3310      	adds	r3, #16
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	3304      	adds	r3, #4
 800370a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	705a      	strb	r2, [r3, #1]
 8003712:	e00d      	b.n	8003730 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	3304      	adds	r3, #4
 8003728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_PCD_EP_SetStall+0x82>
 800374c:	2302      	movs	r3, #2
 800374e:	e01d      	b.n	800378c <HAL_PCD_EP_SetStall+0xbe>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68f9      	ldr	r1, [r7, #12]
 800375e:	4618      	mov	r0, r3
 8003760:	f002 fe41 	bl	80063e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	7999      	ldrb	r1, [r3, #6]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800377c:	461a      	mov	r2, r3
 800377e:	f003 f827 	bl	80067d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	7912      	ldrb	r2, [r2, #4]
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e042      	b.n	8003838 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	da0f      	bge.n	80037da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 020f 	and.w	r2, r3, #15
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	3310      	adds	r3, #16
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	705a      	strb	r2, [r3, #1]
 80037d8:	e00f      	b.n	80037fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 020f 	and.w	r2, r3, #15
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	3304      	adds	r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_PCD_EP_ClrStall+0x86>
 8003816:	2302      	movs	r3, #2
 8003818:	e00e      	b.n	8003838 <HAL_PCD_EP_ClrStall+0xa4>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68f9      	ldr	r1, [r7, #12]
 8003828:	4618      	mov	r0, r3
 800382a:	f002 fe49 	bl	80064c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800384c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003850:	2b00      	cmp	r3, #0
 8003852:	da0c      	bge.n	800386e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	f003 020f 	and.w	r2, r3, #15
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	3310      	adds	r3, #16
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	4413      	add	r3, r2
 8003868:	3304      	adds	r3, #4
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	e00c      	b.n	8003888 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	3304      	adds	r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68f9      	ldr	r1, [r7, #12]
 800388e:	4618      	mov	r0, r3
 8003890:	f002 fc6c 	bl	800616c <USB_EPStopXfer>
 8003894:	4603      	mov	r3, r0
 8003896:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003898:	7afb      	ldrb	r3, [r7, #11]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b08a      	sub	sp, #40	@ 0x28
 80038a6:	af02      	add	r7, sp, #8
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	3310      	adds	r3, #16
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	3304      	adds	r3, #4
 80038c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d901      	bls.n	80038da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06b      	b.n	80039b2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d902      	bls.n	80038f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3303      	adds	r3, #3
 80038fa:	089b      	lsrs	r3, r3, #2
 80038fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038fe:	e02a      	b.n	8003956 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	429a      	cmp	r2, r3
 8003914:	d902      	bls.n	800391c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3303      	adds	r3, #3
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68d9      	ldr	r1, [r3, #12]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	b2da      	uxtb	r2, r3
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	4603      	mov	r3, r0
 8003938:	6978      	ldr	r0, [r7, #20]
 800393a:	f002 fcc0 	bl	80062be <USB_WritePacket>

    ep->xfer_buff  += len;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	441a      	add	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	441a      	add	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	429a      	cmp	r2, r3
 800396a:	d809      	bhi.n	8003980 <PCD_WriteEmptyTxFifo+0xde>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003974:	429a      	cmp	r2, r3
 8003976:	d203      	bcs.n	8003980 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1bf      	bne.n	8003900 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	429a      	cmp	r2, r3
 800398a:	d811      	bhi.n	80039b0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	2201      	movs	r2, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	6939      	ldr	r1, [r7, #16]
 80039a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039ac:	4013      	ands	r3, r2
 80039ae:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	333c      	adds	r3, #60	@ 0x3c
 80039d4:	3304      	adds	r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	799b      	ldrb	r3, [r3, #6]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d17b      	bne.n	8003aea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d015      	beq.n	8003a28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4a61      	ldr	r2, [pc, #388]	@ (8003b84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	f240 80b9 	bls.w	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80b3 	beq.w	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a24:	6093      	str	r3, [r2, #8]
 8003a26:	e0a7      	b.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2320      	movs	r3, #32
 8003a42:	6093      	str	r3, [r2, #8]
 8003a44:	e098      	b.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f040 8093 	bne.w	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	4a4b      	ldr	r2, [pc, #300]	@ (8003b84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d90f      	bls.n	8003a7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a70:	461a      	mov	r2, r3
 8003a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a76:	6093      	str	r3, [r2, #8]
 8003a78:	e07e      	b.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	0159      	lsls	r1, r3, #5
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa6:	1ad2      	subs	r2, r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d114      	bne.n	8003adc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	f002 fe82 	bl	80067d0 <USB_EP0_OutStart>
 8003acc:	e006      	b.n	8003adc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	441a      	add	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f004 fca6 	bl	8008434 <HAL_PCD_DataOutStageCallback>
 8003ae8:	e046      	b.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	4a26      	ldr	r2, [pc, #152]	@ (8003b88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d124      	bne.n	8003b3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b0e:	6093      	str	r3, [r2, #8]
 8003b10:	e032      	b.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2320      	movs	r3, #32
 8003b2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f004 fc7d 	bl	8008434 <HAL_PCD_DataOutStageCallback>
 8003b3a:	e01d      	b.n	8003b78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d114      	bne.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d108      	bne.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b64:	461a      	mov	r2, r3
 8003b66:	2100      	movs	r1, #0
 8003b68:	f002 fe32 	bl	80067d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f004 fc5e 	bl	8008434 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	4f54300a 	.word	0x4f54300a
 8003b88:	4f54310a 	.word	0x4f54310a

08003b8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	333c      	adds	r3, #60	@ 0x3c
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a15      	ldr	r2, [pc, #84]	@ (8003c14 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d90e      	bls.n	8003be0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f004 fc15 	bl	8008410 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c14 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d90c      	bls.n	8003c08 <PCD_EP_OutSetupPacket_int+0x7c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	799b      	ldrb	r3, [r3, #6]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d108      	bne.n	8003c08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c00:	461a      	mov	r2, r3
 8003c02:	2101      	movs	r1, #1
 8003c04:	f002 fde4 	bl	80067d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	4f54300a 	.word	0x4f54300a

08003c18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	70fb      	strb	r3, [r7, #3]
 8003c24:	4613      	mov	r3, r2
 8003c26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c36:	883b      	ldrh	r3, [r7, #0]
 8003c38:	0419      	lsls	r1, r3, #16
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c44:	e028      	b.n	8003c98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	4413      	add	r3, r2
 8003c52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	73fb      	strb	r3, [r7, #15]
 8003c58:	e00d      	b.n	8003c76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	3340      	adds	r3, #64	@ 0x40
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	3301      	adds	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	7bfa      	ldrb	r2, [r7, #15]
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d3ec      	bcc.n	8003c5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c80:	883b      	ldrh	r3, [r7, #0]
 8003c82:	0418      	lsls	r0, r3, #16
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6819      	ldr	r1, [r3, #0]
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	4302      	orrs	r2, r0
 8003c90:	3340      	adds	r3, #64	@ 0x40
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	887a      	ldrh	r2, [r7, #2]
 8003cb6:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	@ 0x28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e23b      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d050      	beq.n	8003d84 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ce2:	4b9e      	ldr	r3, [pc, #632]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d00c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cee:	4b9b      	ldr	r3, [pc, #620]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d112      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfa:	4b98      	ldr	r3, [pc, #608]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d06:	d10b      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	4b94      	ldr	r3, [pc, #592]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d036      	beq.n	8003d82 <HAL_RCC_OscConfig+0xbe>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d132      	bne.n	8003d82 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e216      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	4b8e      	ldr	r3, [pc, #568]	@ (8003f60 <HAL_RCC_OscConfig+0x29c>)
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d013      	beq.n	8003d5a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d32:	f7fd fabd 	bl	80012b0 <HAL_GetTick>
 8003d36:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d3a:	f7fd fab9 	bl	80012b0 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b64      	cmp	r3, #100	@ 0x64
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e200      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4c:	4b83      	ldr	r3, [pc, #524]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x76>
 8003d58:	e014      	b.n	8003d84 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5a:	f7fd faa9 	bl	80012b0 <HAL_GetTick>
 8003d5e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d62:	f7fd faa5 	bl	80012b0 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b64      	cmp	r3, #100	@ 0x64
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e1ec      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d74:	4b79      	ldr	r3, [pc, #484]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x9e>
 8003d80:	e000      	b.n	8003d84 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d077      	beq.n	8003e80 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d90:	4b72      	ldr	r3, [pc, #456]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d126      	bne.n	8003df6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da8:	4b6c      	ldr	r3, [pc, #432]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d120      	bne.n	8003df6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db4:	4b69      	ldr	r3, [pc, #420]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_OscConfig+0x108>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e1c0      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dcc:	4b63      	ldr	r3, [pc, #396]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	21f8      	movs	r1, #248	@ 0xf8
 8003dda:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	68f9      	ldr	r1, [r7, #12]
 8003dde:	fa91 f1a1 	rbit	r1, r1
 8003de2:	6139      	str	r1, [r7, #16]
  return result;
 8003de4:	6939      	ldr	r1, [r7, #16]
 8003de6:	fab1 f181 	clz	r1, r1
 8003dea:	b2c9      	uxtb	r1, r1
 8003dec:	408b      	lsls	r3, r1
 8003dee:	495b      	ldr	r1, [pc, #364]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df4:	e044      	b.n	8003e80 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d02a      	beq.n	8003e54 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dfe:	4b59      	ldr	r3, [pc, #356]	@ (8003f64 <HAL_RCC_OscConfig+0x2a0>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fd fa54 	bl	80012b0 <HAL_GetTick>
 8003e08:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fd fa50 	bl	80012b0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e197      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	21f8      	movs	r1, #248	@ 0xf8
 8003e38:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	6979      	ldr	r1, [r7, #20]
 8003e3c:	fa91 f1a1 	rbit	r1, r1
 8003e40:	61b9      	str	r1, [r7, #24]
  return result;
 8003e42:	69b9      	ldr	r1, [r7, #24]
 8003e44:	fab1 f181 	clz	r1, r1
 8003e48:	b2c9      	uxtb	r1, r1
 8003e4a:	408b      	lsls	r3, r1
 8003e4c:	4943      	ldr	r1, [pc, #268]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
 8003e52:	e015      	b.n	8003e80 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e54:	4b43      	ldr	r3, [pc, #268]	@ (8003f64 <HAL_RCC_OscConfig+0x2a0>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fd fa29 	bl	80012b0 <HAL_GetTick>
 8003e5e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e62:	f7fd fa25 	bl	80012b0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e16c      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e74:	4b39      	ldr	r3, [pc, #228]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f0      	bne.n	8003e62 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d030      	beq.n	8003eee <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d016      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e94:	4b34      	ldr	r3, [pc, #208]	@ (8003f68 <HAL_RCC_OscConfig+0x2a4>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7fd fa09 	bl	80012b0 <HAL_GetTick>
 8003e9e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea2:	f7fd fa05 	bl	80012b0 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e14c      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb4:	4b29      	ldr	r3, [pc, #164]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
 8003ec0:	e015      	b.n	8003eee <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec2:	4b29      	ldr	r3, [pc, #164]	@ (8003f68 <HAL_RCC_OscConfig+0x2a4>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec8:	f7fd f9f2 	bl	80012b0 <HAL_GetTick>
 8003ecc:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed0:	f7fd f9ee 	bl	80012b0 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e135      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 8087 	beq.w	800400a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efc:	2300      	movs	r3, #0
 8003efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f02:	4b16      	ldr	r3, [pc, #88]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d110      	bne.n	8003f30 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	4b12      	ldr	r3, [pc, #72]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	4a11      	ldr	r2, [pc, #68]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f5c <HAL_RCC_OscConfig+0x298>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f26:	60bb      	str	r3, [r7, #8]
 8003f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f30:	4b0e      	ldr	r3, [pc, #56]	@ (8003f6c <HAL_RCC_OscConfig+0x2a8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a0d      	ldr	r2, [pc, #52]	@ (8003f6c <HAL_RCC_OscConfig+0x2a8>)
 8003f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f3a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f6c <HAL_RCC_OscConfig+0x2a8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d122      	bne.n	8003f8e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f48:	4b08      	ldr	r3, [pc, #32]	@ (8003f6c <HAL_RCC_OscConfig+0x2a8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a07      	ldr	r2, [pc, #28]	@ (8003f6c <HAL_RCC_OscConfig+0x2a8>)
 8003f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f54:	f7fd f9ac 	bl	80012b0 <HAL_GetTick>
 8003f58:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5a:	e012      	b.n	8003f82 <HAL_RCC_OscConfig+0x2be>
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40023802 	.word	0x40023802
 8003f64:	42470000 	.word	0x42470000
 8003f68:	42470e80 	.word	0x42470e80
 8003f6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f70:	f7fd f99e 	bl	80012b0 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e0e5      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f82:	4b75      	ldr	r3, [pc, #468]	@ (8004158 <HAL_RCC_OscConfig+0x494>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	4b72      	ldr	r3, [pc, #456]	@ (800415c <HAL_RCC_OscConfig+0x498>)
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d015      	beq.n	8003fcc <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa0:	f7fd f986 	bl	80012b0 <HAL_GetTick>
 8003fa4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa8:	f7fd f982 	bl	80012b0 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0c7      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbe:	4b68      	ldr	r3, [pc, #416]	@ (8004160 <HAL_RCC_OscConfig+0x49c>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0ee      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x2e4>
 8003fca:	e014      	b.n	8003ff6 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fcc:	f7fd f970 	bl	80012b0 <HAL_GetTick>
 8003fd0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd4:	f7fd f96c 	bl	80012b0 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e0b1      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fea:	4b5d      	ldr	r3, [pc, #372]	@ (8004160 <HAL_RCC_OscConfig+0x49c>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1ee      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d105      	bne.n	800400a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffe:	4b58      	ldr	r3, [pc, #352]	@ (8004160 <HAL_RCC_OscConfig+0x49c>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	4a57      	ldr	r2, [pc, #348]	@ (8004160 <HAL_RCC_OscConfig+0x49c>)
 8004004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004008:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 809c 	beq.w	800414c <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004014:	4b52      	ldr	r3, [pc, #328]	@ (8004160 <HAL_RCC_OscConfig+0x49c>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b08      	cmp	r3, #8
 800401e:	d061      	beq.n	80040e4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d146      	bne.n	80040b6 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004028:	4b4e      	ldr	r3, [pc, #312]	@ (8004164 <HAL_RCC_OscConfig+0x4a0>)
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402e:	f7fd f93f 	bl	80012b0 <HAL_GetTick>
 8004032:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004036:	f7fd f93b 	bl	80012b0 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b64      	cmp	r3, #100	@ 0x64
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e082      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004048:	4b45      	ldr	r3, [pc, #276]	@ (8004160 <HAL_RCC_OscConfig+0x49c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004054:	4b42      	ldr	r3, [pc, #264]	@ (8004160 <HAL_RCC_OscConfig+0x49c>)
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	4b43      	ldr	r3, [pc, #268]	@ (8004168 <HAL_RCC_OscConfig+0x4a4>)
 800405a:	4013      	ands	r3, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	69d1      	ldr	r1, [r2, #28]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6a12      	ldr	r2, [r2, #32]
 8004064:	4311      	orrs	r1, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800406a:	0192      	lsls	r2, r2, #6
 800406c:	4311      	orrs	r1, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004072:	0612      	lsls	r2, r2, #24
 8004074:	4311      	orrs	r1, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800407a:	0852      	lsrs	r2, r2, #1
 800407c:	3a01      	subs	r2, #1
 800407e:	0412      	lsls	r2, r2, #16
 8004080:	430a      	orrs	r2, r1
 8004082:	4937      	ldr	r1, [pc, #220]	@ (8004160 <HAL_RCC_OscConfig+0x49c>)
 8004084:	4313      	orrs	r3, r2
 8004086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004088:	4b36      	ldr	r3, [pc, #216]	@ (8004164 <HAL_RCC_OscConfig+0x4a0>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408e:	f7fd f90f 	bl	80012b0 <HAL_GetTick>
 8004092:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004096:	f7fd f90b 	bl	80012b0 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b64      	cmp	r3, #100	@ 0x64
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e052      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004160 <HAL_RCC_OscConfig+0x49c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x3d2>
 80040b4:	e04a      	b.n	800414c <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004164 <HAL_RCC_OscConfig+0x4a0>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fd f8f8 	bl	80012b0 <HAL_GetTick>
 80040c0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fd f8f4 	bl	80012b0 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	@ 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e03b      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	4b22      	ldr	r3, [pc, #136]	@ (8004160 <HAL_RCC_OscConfig+0x49c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x400>
 80040e2:	e033      	b.n	800414c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e02e      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80040f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <HAL_RCC_OscConfig+0x49c>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	429a      	cmp	r2, r3
 8004102:	d121      	bne.n	8004148 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d11a      	bne.n	8004148 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800411e:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004120:	4293      	cmp	r3, r2
 8004122:	d111      	bne.n	8004148 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	3b01      	subs	r3, #1
 8004132:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004134:	429a      	cmp	r2, r3
 8004136:	d107      	bne.n	8004148 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004144:	429a      	cmp	r2, r3
 8004146:	d001      	beq.n	800414c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3728      	adds	r7, #40	@ 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40007000 	.word	0x40007000
 800415c:	40023870 	.word	0x40023870
 8004160:	40023800 	.word	0x40023800
 8004164:	42470060 	.word	0x42470060
 8004168:	f0bc8000 	.word	0xf0bc8000

0800416c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0d2      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004180:	4b6b      	ldr	r3, [pc, #428]	@ (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d90c      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b68      	ldr	r3, [pc, #416]	@ (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b66      	ldr	r3, [pc, #408]	@ (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0be      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c0:	4b5c      	ldr	r3, [pc, #368]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4a5b      	ldr	r2, [pc, #364]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80041d8:	4b56      	ldr	r3, [pc, #344]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a55      	ldr	r2, [pc, #340]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 80041de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b53      	ldr	r3, [pc, #332]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4950      	ldr	r1, [pc, #320]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d040      	beq.n	8004284 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	4b4a      	ldr	r3, [pc, #296]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d115      	bne.n	8004242 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e085      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b44      	ldr	r3, [pc, #272]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e079      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b40      	ldr	r3, [pc, #256]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e071      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b3c      	ldr	r3, [pc, #240]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4939      	ldr	r1, [pc, #228]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004254:	f7fd f82c 	bl	80012b0 <HAL_GetTick>
 8004258:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fd f828 	bl	80012b0 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e059      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b30      	ldr	r3, [pc, #192]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b2a      	ldr	r3, [pc, #168]	@ (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d20c      	bcs.n	80042ac <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b27      	ldr	r3, [pc, #156]	@ (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	4b25      	ldr	r3, [pc, #148]	@ (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e03c      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	491b      	ldr	r1, [pc, #108]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d6:	4b17      	ldr	r3, [pc, #92]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4913      	ldr	r1, [pc, #76]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80042ea:	f000 f82b 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 80042ee:	4601      	mov	r1, r0
 80042f0:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042f8:	22f0      	movs	r2, #240	@ 0xf0
 80042fa:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	fa92 f2a2 	rbit	r2, r2
 8004302:	613a      	str	r2, [r7, #16]
  return result;
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	fab2 f282 	clz	r2, r2
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	40d3      	lsrs	r3, r2
 800430e:	4a0a      	ldr	r2, [pc, #40]	@ (8004338 <HAL_RCC_ClockConfig+0x1cc>)
 8004310:	5cd3      	ldrb	r3, [r2, r3]
 8004312:	fa21 f303 	lsr.w	r3, r1, r3
 8004316:	4a09      	ldr	r2, [pc, #36]	@ (800433c <HAL_RCC_ClockConfig+0x1d0>)
 8004318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800431a:	4b09      	ldr	r3, [pc, #36]	@ (8004340 <HAL_RCC_ClockConfig+0x1d4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc ff84 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40023c00 	.word	0x40023c00
 8004334:	40023800 	.word	0x40023800
 8004338:	08008c58 	.word	0x08008c58
 800433c:	20000018 	.word	0x20000018
 8004340:	2000001c 	.word	0x2000001c

08004344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004348:	b090      	sub	sp, #64	@ 0x40
 800434a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004350:	2300      	movs	r3, #0
 8004352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004354:	2300      	movs	r3, #0
 8004356:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800435c:	4b59      	ldr	r3, [pc, #356]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 030c 	and.w	r3, r3, #12
 8004364:	2b08      	cmp	r3, #8
 8004366:	d00d      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x40>
 8004368:	2b08      	cmp	r3, #8
 800436a:	f200 80a2 	bhi.w	80044b2 <HAL_RCC_GetSysClockFreq+0x16e>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x34>
 8004372:	2b04      	cmp	r3, #4
 8004374:	d003      	beq.n	800437e <HAL_RCC_GetSysClockFreq+0x3a>
 8004376:	e09c      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004378:	4b53      	ldr	r3, [pc, #332]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800437a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800437c:	e09c      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800437e:	4b53      	ldr	r3, [pc, #332]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004380:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004382:	e099      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004384:	4b4f      	ldr	r3, [pc, #316]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800438c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800438e:	4b4d      	ldr	r3, [pc, #308]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d027      	beq.n	80043ea <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439a:	4b4a      	ldr	r3, [pc, #296]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	2200      	movs	r2, #0
 80043a2:	623b      	str	r3, [r7, #32]
 80043a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043ac:	2100      	movs	r1, #0
 80043ae:	4b47      	ldr	r3, [pc, #284]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x188>)
 80043b0:	fb03 f201 	mul.w	r2, r3, r1
 80043b4:	2300      	movs	r3, #0
 80043b6:	fb00 f303 	mul.w	r3, r0, r3
 80043ba:	4413      	add	r3, r2
 80043bc:	4a43      	ldr	r2, [pc, #268]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x188>)
 80043be:	fba0 2102 	umull	r2, r1, r0, r2
 80043c2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80043c4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80043c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043c8:	4413      	add	r3, r2
 80043ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ce:	2200      	movs	r2, #0
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	61fa      	str	r2, [r7, #28]
 80043d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80043dc:	f7fb fef2 	bl	80001c4 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4613      	mov	r3, r2
 80043e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043e8:	e055      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ea:	4b36      	ldr	r3, [pc, #216]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	099b      	lsrs	r3, r3, #6
 80043f0:	2200      	movs	r2, #0
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	617a      	str	r2, [r7, #20]
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043fc:	f04f 0b00 	mov.w	fp, #0
 8004400:	4652      	mov	r2, sl
 8004402:	465b      	mov	r3, fp
 8004404:	f04f 0000 	mov.w	r0, #0
 8004408:	f04f 0100 	mov.w	r1, #0
 800440c:	0159      	lsls	r1, r3, #5
 800440e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004412:	0150      	lsls	r0, r2, #5
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	ebb2 080a 	subs.w	r8, r2, sl
 800441c:	eb63 090b 	sbc.w	r9, r3, fp
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800442c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004430:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004434:	ebb2 0408 	subs.w	r4, r2, r8
 8004438:	eb63 0509 	sbc.w	r5, r3, r9
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	00eb      	lsls	r3, r5, #3
 8004446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800444a:	00e2      	lsls	r2, r4, #3
 800444c:	4614      	mov	r4, r2
 800444e:	461d      	mov	r5, r3
 8004450:	eb14 030a 	adds.w	r3, r4, sl
 8004454:	603b      	str	r3, [r7, #0]
 8004456:	eb45 030b 	adc.w	r3, r5, fp
 800445a:	607b      	str	r3, [r7, #4]
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004468:	4629      	mov	r1, r5
 800446a:	028b      	lsls	r3, r1, #10
 800446c:	4620      	mov	r0, r4
 800446e:	4629      	mov	r1, r5
 8004470:	4604      	mov	r4, r0
 8004472:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004476:	4601      	mov	r1, r0
 8004478:	028a      	lsls	r2, r1, #10
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004480:	2200      	movs	r2, #0
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	60fa      	str	r2, [r7, #12]
 8004486:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800448a:	f7fb fe9b 	bl	80001c4 <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4613      	mov	r3, r2
 8004494:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004496:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	3301      	adds	r3, #1
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80044a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044b0:	e002      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044b2:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80044b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3740      	adds	r7, #64	@ 0x40
 80044be:	46bd      	mov	sp, r7
 80044c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c4:	40023800 	.word	0x40023800
 80044c8:	00f42400 	.word	0x00f42400
 80044cc:	017d7840 	.word	0x017d7840

080044d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044d4:	4b02      	ldr	r3, [pc, #8]	@ (80044e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80044d6:	681b      	ldr	r3, [r3, #0]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	20000018 	.word	0x20000018

080044e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e041      	b.n	800457a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fc fdd6 	bl	80010bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f000 fb3e 	bl	8004ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e041      	b.n	8004618 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d106      	bne.n	80045ae <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f839 	bl	8004620 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	4610      	mov	r0, r2
 80045c2:	f000 faef 	bl	8004ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01b      	beq.n	8004696 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f06f 0202 	mvn.w	r2, #2
 8004666:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fa76 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 8004682:	e005      	b.n	8004690 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fa69 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fa78 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d020      	beq.n	80046e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01b      	beq.n	80046e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f06f 0204 	mvn.w	r2, #4
 80046b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fa50 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 80046ce:	e005      	b.n	80046dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fa43 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fa52 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d020      	beq.n	800472e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01b      	beq.n	800472e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f06f 0208 	mvn.w	r2, #8
 80046fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2204      	movs	r2, #4
 8004704:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fa2a 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 800471a:	e005      	b.n	8004728 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa1d 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fa2c 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	d020      	beq.n	800477a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	d01b      	beq.n	800477a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f06f 0210 	mvn.w	r2, #16
 800474a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2208      	movs	r2, #8
 8004750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fa04 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 8004766:	e005      	b.n	8004774 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f9f7 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa06 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00c      	beq.n	800479e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f06f 0201 	mvn.w	r2, #1
 8004796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fc f833 	bl	8000804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00c      	beq.n	80047c2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fd6c 	bl	800529a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00c      	beq.n	80047e6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f9d6 	bl	8004b92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00c      	beq.n	800480a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f06f 0220 	mvn.w	r2, #32
 8004802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fd3f 	bl	8005288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800480a:	bf00      	nop
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_TIM_IC_ConfigChannel+0x1e>
 800482c:	2302      	movs	r3, #2
 800482e:	e088      	b.n	8004942 <HAL_TIM_IC_ConfigChannel+0x130>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11b      	bne.n	8004876 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800484e:	f000 fae5 	bl	8004e1c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699a      	ldr	r2, [r3, #24]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 020c 	bic.w	r2, r2, #12
 8004860:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6999      	ldr	r1, [r3, #24]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	619a      	str	r2, [r3, #24]
 8004874:	e060      	b.n	8004938 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d11c      	bne.n	80048b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800488c:	f000 fb66 	bl	8004f5c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800489e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6999      	ldr	r1, [r3, #24]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	021a      	lsls	r2, r3, #8
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	619a      	str	r2, [r3, #24]
 80048b4:	e040      	b.n	8004938 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d11b      	bne.n	80048f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80048cc:	f000 fbb1 	bl	8005032 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 020c 	bic.w	r2, r2, #12
 80048de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69d9      	ldr	r1, [r3, #28]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	61da      	str	r2, [r3, #28]
 80048f2:	e021      	b.n	8004938 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	d11c      	bne.n	8004934 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800490a:	f000 fbcd 	bl	80050a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800491c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69d9      	ldr	r1, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	61da      	str	r2, [r3, #28]
 8004932:	e001      	b.n	8004938 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004940:	7dfb      	ldrb	r3, [r7, #23]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_TIM_ConfigClockSource+0x1c>
 8004962:	2302      	movs	r3, #2
 8004964:	e0b4      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x186>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004984:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800498c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800499e:	d03e      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0xd4>
 80049a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049a4:	f200 8087 	bhi.w	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ac:	f000 8086 	beq.w	8004abc <HAL_TIM_ConfigClockSource+0x172>
 80049b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b4:	d87f      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049b6:	2b70      	cmp	r3, #112	@ 0x70
 80049b8:	d01a      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0xa6>
 80049ba:	2b70      	cmp	r3, #112	@ 0x70
 80049bc:	d87b      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049be:	2b60      	cmp	r3, #96	@ 0x60
 80049c0:	d050      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x11a>
 80049c2:	2b60      	cmp	r3, #96	@ 0x60
 80049c4:	d877      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049c6:	2b50      	cmp	r3, #80	@ 0x50
 80049c8:	d03c      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0xfa>
 80049ca:	2b50      	cmp	r3, #80	@ 0x50
 80049cc:	d873      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049ce:	2b40      	cmp	r3, #64	@ 0x40
 80049d0:	d058      	beq.n	8004a84 <HAL_TIM_ConfigClockSource+0x13a>
 80049d2:	2b40      	cmp	r3, #64	@ 0x40
 80049d4:	d86f      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049d6:	2b30      	cmp	r3, #48	@ 0x30
 80049d8:	d064      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0x15a>
 80049da:	2b30      	cmp	r3, #48	@ 0x30
 80049dc:	d86b      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d060      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0x15a>
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d867      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d05c      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0x15a>
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d05a      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0x15a>
 80049ee:	e062      	b.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a00:	f000 fba8 	bl	8005154 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a12:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	609a      	str	r2, [r3, #8]
      break;
 8004a1c:	e04f      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a2e:	f000 fb91 	bl	8005154 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a40:	609a      	str	r2, [r3, #8]
      break;
 8004a42:	e03c      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a50:	461a      	mov	r2, r3
 8004a52:	f000 fa55 	bl	8004f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2150      	movs	r1, #80	@ 0x50
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fb5f 	bl	8005120 <TIM_ITRx_SetConfig>
      break;
 8004a62:	e02c      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a70:	461a      	mov	r2, r3
 8004a72:	f000 faaf 	bl	8004fd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2160      	movs	r1, #96	@ 0x60
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fb4f 	bl	8005120 <TIM_ITRx_SetConfig>
      break;
 8004a82:	e01c      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a90:	461a      	mov	r2, r3
 8004a92:	f000 fa35 	bl	8004f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2140      	movs	r1, #64	@ 0x40
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fb3f 	bl	8005120 <TIM_ITRx_SetConfig>
      break;
 8004aa2:	e00c      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f000 fb36 	bl	8005120 <TIM_ITRx_SetConfig>
      break;
 8004ab4:	e003      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8004aba:	e000      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004abc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e031      	b.n	8004b54 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004b00:	6839      	ldr	r1, [r7, #0]
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f8f8 	bl	8004cf8 <TIM_SlaveTimer_SetConfig>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e018      	b.n	8004b54 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b30:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b40:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr

08004b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr

08004ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a45      	ldr	r2, [pc, #276]	@ (8004ccc <TIM_Base_SetConfig+0x128>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d013      	beq.n	8004be4 <TIM_Base_SetConfig+0x40>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc2:	d00f      	beq.n	8004be4 <TIM_Base_SetConfig+0x40>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a42      	ldr	r2, [pc, #264]	@ (8004cd0 <TIM_Base_SetConfig+0x12c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00b      	beq.n	8004be4 <TIM_Base_SetConfig+0x40>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a41      	ldr	r2, [pc, #260]	@ (8004cd4 <TIM_Base_SetConfig+0x130>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d007      	beq.n	8004be4 <TIM_Base_SetConfig+0x40>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a40      	ldr	r2, [pc, #256]	@ (8004cd8 <TIM_Base_SetConfig+0x134>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_Base_SetConfig+0x40>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a3f      	ldr	r2, [pc, #252]	@ (8004cdc <TIM_Base_SetConfig+0x138>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d108      	bne.n	8004bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a34      	ldr	r2, [pc, #208]	@ (8004ccc <TIM_Base_SetConfig+0x128>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d02b      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c04:	d027      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a31      	ldr	r2, [pc, #196]	@ (8004cd0 <TIM_Base_SetConfig+0x12c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d023      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a30      	ldr	r2, [pc, #192]	@ (8004cd4 <TIM_Base_SetConfig+0x130>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01f      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a2f      	ldr	r2, [pc, #188]	@ (8004cd8 <TIM_Base_SetConfig+0x134>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01b      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a2e      	ldr	r2, [pc, #184]	@ (8004cdc <TIM_Base_SetConfig+0x138>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d017      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a2d      	ldr	r2, [pc, #180]	@ (8004ce0 <TIM_Base_SetConfig+0x13c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce4 <TIM_Base_SetConfig+0x140>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00f      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a2b      	ldr	r2, [pc, #172]	@ (8004ce8 <TIM_Base_SetConfig+0x144>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00b      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2a      	ldr	r2, [pc, #168]	@ (8004cec <TIM_Base_SetConfig+0x148>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a29      	ldr	r2, [pc, #164]	@ (8004cf0 <TIM_Base_SetConfig+0x14c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a28      	ldr	r2, [pc, #160]	@ (8004cf4 <TIM_Base_SetConfig+0x150>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d108      	bne.n	8004c68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8004ccc <TIM_Base_SetConfig+0x128>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_Base_SetConfig+0xf8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a11      	ldr	r2, [pc, #68]	@ (8004cdc <TIM_Base_SetConfig+0x138>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d103      	bne.n	8004ca4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f023 0201 	bic.w	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	611a      	str	r2, [r3, #16]
  }
}
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	40010000 	.word	0x40010000
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	40010400 	.word	0x40010400
 8004ce0:	40014000 	.word	0x40014000
 8004ce4:	40014400 	.word	0x40014400
 8004ce8:	40014800 	.word	0x40014800
 8004cec:	40001800 	.word	0x40001800
 8004cf0:	40001c00 	.word	0x40001c00
 8004cf4:	40002000 	.word	0x40002000

08004cf8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d14:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f023 0307 	bic.w	r3, r3, #7
 8004d26:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b70      	cmp	r3, #112	@ 0x70
 8004d40:	d01a      	beq.n	8004d78 <TIM_SlaveTimer_SetConfig+0x80>
 8004d42:	2b70      	cmp	r3, #112	@ 0x70
 8004d44:	d860      	bhi.n	8004e08 <TIM_SlaveTimer_SetConfig+0x110>
 8004d46:	2b60      	cmp	r3, #96	@ 0x60
 8004d48:	d054      	beq.n	8004df4 <TIM_SlaveTimer_SetConfig+0xfc>
 8004d4a:	2b60      	cmp	r3, #96	@ 0x60
 8004d4c:	d85c      	bhi.n	8004e08 <TIM_SlaveTimer_SetConfig+0x110>
 8004d4e:	2b50      	cmp	r3, #80	@ 0x50
 8004d50:	d046      	beq.n	8004de0 <TIM_SlaveTimer_SetConfig+0xe8>
 8004d52:	2b50      	cmp	r3, #80	@ 0x50
 8004d54:	d858      	bhi.n	8004e08 <TIM_SlaveTimer_SetConfig+0x110>
 8004d56:	2b40      	cmp	r3, #64	@ 0x40
 8004d58:	d019      	beq.n	8004d8e <TIM_SlaveTimer_SetConfig+0x96>
 8004d5a:	2b40      	cmp	r3, #64	@ 0x40
 8004d5c:	d854      	bhi.n	8004e08 <TIM_SlaveTimer_SetConfig+0x110>
 8004d5e:	2b30      	cmp	r3, #48	@ 0x30
 8004d60:	d055      	beq.n	8004e0e <TIM_SlaveTimer_SetConfig+0x116>
 8004d62:	2b30      	cmp	r3, #48	@ 0x30
 8004d64:	d850      	bhi.n	8004e08 <TIM_SlaveTimer_SetConfig+0x110>
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d051      	beq.n	8004e0e <TIM_SlaveTimer_SetConfig+0x116>
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d84c      	bhi.n	8004e08 <TIM_SlaveTimer_SetConfig+0x110>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d04d      	beq.n	8004e0e <TIM_SlaveTimer_SetConfig+0x116>
 8004d72:	2b10      	cmp	r3, #16
 8004d74:	d04b      	beq.n	8004e0e <TIM_SlaveTimer_SetConfig+0x116>
 8004d76:	e047      	b.n	8004e08 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004d88:	f000 f9e4 	bl	8005154 <TIM_ETR_SetConfig>
      break;
 8004d8c:	e040      	b.n	8004e10 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b05      	cmp	r3, #5
 8004d94:	d101      	bne.n	8004d9a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e03b      	b.n	8004e12 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6a1a      	ldr	r2, [r3, #32]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dc0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	621a      	str	r2, [r3, #32]
      break;
 8004dde:	e017      	b.n	8004e10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dec:	461a      	mov	r2, r3
 8004dee:	f000 f887 	bl	8004f00 <TIM_TI1_ConfigInputStage>
      break;
 8004df2:	e00d      	b.n	8004e10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e00:	461a      	mov	r2, r3
 8004e02:	f000 f8e7 	bl	8004fd4 <TIM_TI2_ConfigInputStage>
      break;
 8004e06:	e003      	b.n	8004e10 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e0c:	e000      	b.n	8004e10 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004e0e:	bf00      	nop
  }

  return status;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f023 0201 	bic.w	r2, r3, #1
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4a27      	ldr	r2, [pc, #156]	@ (8004ee4 <TIM_TI1_SetConfig+0xc8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01b      	beq.n	8004e82 <TIM_TI1_SetConfig+0x66>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e50:	d017      	beq.n	8004e82 <TIM_TI1_SetConfig+0x66>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4a24      	ldr	r2, [pc, #144]	@ (8004ee8 <TIM_TI1_SetConfig+0xcc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <TIM_TI1_SetConfig+0x66>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4a23      	ldr	r2, [pc, #140]	@ (8004eec <TIM_TI1_SetConfig+0xd0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00f      	beq.n	8004e82 <TIM_TI1_SetConfig+0x66>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4a22      	ldr	r2, [pc, #136]	@ (8004ef0 <TIM_TI1_SetConfig+0xd4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00b      	beq.n	8004e82 <TIM_TI1_SetConfig+0x66>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4a21      	ldr	r2, [pc, #132]	@ (8004ef4 <TIM_TI1_SetConfig+0xd8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <TIM_TI1_SetConfig+0x66>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a20      	ldr	r2, [pc, #128]	@ (8004ef8 <TIM_TI1_SetConfig+0xdc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_TI1_SetConfig+0x66>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004efc <TIM_TI1_SetConfig+0xe0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d101      	bne.n	8004e86 <TIM_TI1_SetConfig+0x6a>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <TIM_TI1_SetConfig+0x6c>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	e003      	b.n	8004ea6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f023 030a 	bic.w	r3, r3, #10
 8004ec0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f003 030a 	and.w	r3, r3, #10
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	40000800 	.word	0x40000800
 8004ef0:	40000c00 	.word	0x40000c00
 8004ef4:	40010400 	.word	0x40010400
 8004ef8:	40014000 	.word	0x40014000
 8004efc:	40001800 	.word	0x40001800

08004f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f023 0201 	bic.w	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f023 030a 	bic.w	r3, r3, #10
 8004f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	621a      	str	r2, [r3, #32]
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	f023 0210 	bic.w	r2, r3, #16
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	031b      	lsls	r3, r3, #12
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f023 0210 	bic.w	r2, r3, #16
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	031b      	lsls	r3, r3, #12
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005010:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	621a      	str	r2, [r3, #32]
}
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005032:	b480      	push	{r7}
 8005034:	b087      	sub	sp, #28
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f023 0303 	bic.w	r3, r3, #3
 800505e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800506e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	b2db      	uxtb	r3, r3
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005082:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr

080050a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	031b      	lsls	r3, r3, #12
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80050fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	031b      	lsls	r3, r3, #12
 8005100:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr

08005120 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	f043 0307 	orr.w	r3, r3, #7
 8005142:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	609a      	str	r2, [r3, #8]
}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr

08005154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800516e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	021a      	lsls	r2, r3, #8
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	431a      	orrs	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	609a      	str	r2, [r3, #8]
}
 8005188:	bf00      	nop
 800518a:	371c      	adds	r7, #28
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr
	...

08005194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e05a      	b.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a20      	ldr	r2, [pc, #128]	@ (800526c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d022      	beq.n	8005236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f8:	d01d      	beq.n	8005236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005270 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d018      	beq.n	8005236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1a      	ldr	r2, [pc, #104]	@ (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a19      	ldr	r2, [pc, #100]	@ (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00e      	beq.n	8005236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a17      	ldr	r2, [pc, #92]	@ (800527c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d009      	beq.n	8005236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a16      	ldr	r2, [pc, #88]	@ (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d004      	beq.n	8005236 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a14      	ldr	r2, [pc, #80]	@ (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d10c      	bne.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800523c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	4313      	orrs	r3, r2
 8005246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	40010000 	.word	0x40010000
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800
 8005278:	40000c00 	.word	0x40000c00
 800527c:	40010400 	.word	0x40010400
 8005280:	40014000 	.word	0x40014000
 8005284:	40001800 	.word	0x40001800

08005288 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr

0800529a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052ac:	b084      	sub	sp, #16
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	f107 001c 	add.w	r0, r7, #28
 80052ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d123      	bne.n	800530e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80052da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d105      	bne.n	8005302 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f001 fac0 	bl	8006888 <USB_CoreReset>
 8005308:	4603      	mov	r3, r0
 800530a:	73fb      	strb	r3, [r7, #15]
 800530c:	e010      	b.n	8005330 <USB_CoreInit+0x84>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f001 fab4 	bl	8006888 <USB_CoreReset>
 8005320:	4603      	mov	r3, r0
 8005322:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005328:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005330:	7fbb      	ldrb	r3, [r7, #30]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d10b      	bne.n	800534e <USB_CoreInit+0xa2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f043 0206 	orr.w	r2, r3, #6
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f043 0220 	orr.w	r2, r3, #32
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800534e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800535a:	b004      	add	sp, #16
 800535c:	4770      	bx	lr
	...

08005360 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	4613      	mov	r3, r2
 800536c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d165      	bne.n	8005440 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4a41      	ldr	r2, [pc, #260]	@ (800547c <USB_SetTurnaroundTime+0x11c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d906      	bls.n	800538a <USB_SetTurnaroundTime+0x2a>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4a40      	ldr	r2, [pc, #256]	@ (8005480 <USB_SetTurnaroundTime+0x120>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d202      	bcs.n	800538a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005384:	230f      	movs	r3, #15
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e062      	b.n	8005450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4a3c      	ldr	r2, [pc, #240]	@ (8005480 <USB_SetTurnaroundTime+0x120>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d306      	bcc.n	80053a0 <USB_SetTurnaroundTime+0x40>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4a3b      	ldr	r2, [pc, #236]	@ (8005484 <USB_SetTurnaroundTime+0x124>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d202      	bcs.n	80053a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800539a:	230e      	movs	r3, #14
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e057      	b.n	8005450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4a38      	ldr	r2, [pc, #224]	@ (8005484 <USB_SetTurnaroundTime+0x124>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d306      	bcc.n	80053b6 <USB_SetTurnaroundTime+0x56>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4a37      	ldr	r2, [pc, #220]	@ (8005488 <USB_SetTurnaroundTime+0x128>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d202      	bcs.n	80053b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053b0:	230d      	movs	r3, #13
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e04c      	b.n	8005450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4a33      	ldr	r2, [pc, #204]	@ (8005488 <USB_SetTurnaroundTime+0x128>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d306      	bcc.n	80053cc <USB_SetTurnaroundTime+0x6c>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4a32      	ldr	r2, [pc, #200]	@ (800548c <USB_SetTurnaroundTime+0x12c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d802      	bhi.n	80053cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053c6:	230c      	movs	r3, #12
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e041      	b.n	8005450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a2f      	ldr	r2, [pc, #188]	@ (800548c <USB_SetTurnaroundTime+0x12c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d906      	bls.n	80053e2 <USB_SetTurnaroundTime+0x82>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005490 <USB_SetTurnaroundTime+0x130>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d802      	bhi.n	80053e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053dc:	230b      	movs	r3, #11
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e036      	b.n	8005450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005490 <USB_SetTurnaroundTime+0x130>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d906      	bls.n	80053f8 <USB_SetTurnaroundTime+0x98>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4a29      	ldr	r2, [pc, #164]	@ (8005494 <USB_SetTurnaroundTime+0x134>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d802      	bhi.n	80053f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053f2:	230a      	movs	r3, #10
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	e02b      	b.n	8005450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a26      	ldr	r2, [pc, #152]	@ (8005494 <USB_SetTurnaroundTime+0x134>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d906      	bls.n	800540e <USB_SetTurnaroundTime+0xae>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4a25      	ldr	r2, [pc, #148]	@ (8005498 <USB_SetTurnaroundTime+0x138>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d202      	bcs.n	800540e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005408:	2309      	movs	r3, #9
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e020      	b.n	8005450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4a21      	ldr	r2, [pc, #132]	@ (8005498 <USB_SetTurnaroundTime+0x138>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d306      	bcc.n	8005424 <USB_SetTurnaroundTime+0xc4>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4a20      	ldr	r2, [pc, #128]	@ (800549c <USB_SetTurnaroundTime+0x13c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d802      	bhi.n	8005424 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800541e:	2308      	movs	r3, #8
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e015      	b.n	8005450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a1d      	ldr	r2, [pc, #116]	@ (800549c <USB_SetTurnaroundTime+0x13c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d906      	bls.n	800543a <USB_SetTurnaroundTime+0xda>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4a1c      	ldr	r2, [pc, #112]	@ (80054a0 <USB_SetTurnaroundTime+0x140>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d202      	bcs.n	800543a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005434:	2307      	movs	r3, #7
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e00a      	b.n	8005450 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800543a:	2306      	movs	r3, #6
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	e007      	b.n	8005450 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005446:	2309      	movs	r3, #9
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	e001      	b.n	8005450 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800544c:	2309      	movs	r3, #9
 800544e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	029b      	lsls	r3, r3, #10
 8005464:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005468:	431a      	orrs	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	00d8acbf 	.word	0x00d8acbf
 8005480:	00e4e1c0 	.word	0x00e4e1c0
 8005484:	00f42400 	.word	0x00f42400
 8005488:	01067380 	.word	0x01067380
 800548c:	011a499f 	.word	0x011a499f
 8005490:	01312cff 	.word	0x01312cff
 8005494:	014ca43f 	.word	0x014ca43f
 8005498:	016e3600 	.word	0x016e3600
 800549c:	01a6ab1f 	.word	0x01a6ab1f
 80054a0:	01e84800 	.word	0x01e84800

080054a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f043 0201 	orr.w	r2, r3, #1
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f023 0201 	bic.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d115      	bne.n	8005532 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005512:	200a      	movs	r0, #10
 8005514:	f7fb fed6 	bl	80012c4 <HAL_Delay>
      ms += 10U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	330a      	adds	r3, #10
 800551c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f001 f926 	bl	8006770 <USB_GetMode>
 8005524:	4603      	mov	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	d01e      	beq.n	8005568 <USB_SetCurrentMode+0x84>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2bc7      	cmp	r3, #199	@ 0xc7
 800552e:	d9f0      	bls.n	8005512 <USB_SetCurrentMode+0x2e>
 8005530:	e01a      	b.n	8005568 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d115      	bne.n	8005564 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005544:	200a      	movs	r0, #10
 8005546:	f7fb febd 	bl	80012c4 <HAL_Delay>
      ms += 10U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	330a      	adds	r3, #10
 800554e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f001 f90d 	bl	8006770 <USB_GetMode>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <USB_SetCurrentMode+0x84>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005560:	d9f0      	bls.n	8005544 <USB_SetCurrentMode+0x60>
 8005562:	e001      	b.n	8005568 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e005      	b.n	8005574 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2bc8      	cmp	r3, #200	@ 0xc8
 800556c:	d101      	bne.n	8005572 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800557c:	b084      	sub	sp, #16
 800557e:	b580      	push	{r7, lr}
 8005580:	b086      	sub	sp, #24
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800558a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005596:	2300      	movs	r3, #0
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	e009      	b.n	80055b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	3340      	adds	r3, #64	@ 0x40
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	2200      	movs	r2, #0
 80055a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	3301      	adds	r3, #1
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b0e      	cmp	r3, #14
 80055b4:	d9f2      	bls.n	800559c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d11c      	bne.n	80055f8 <USB_DevInit+0x7c>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055cc:	f043 0302 	orr.w	r3, r3, #2
 80055d0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80055f6:	e00b      	b.n	8005610 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005608:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005616:	461a      	mov	r2, r3
 8005618:	2300      	movs	r3, #0
 800561a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800561c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005620:	2b01      	cmp	r3, #1
 8005622:	d10d      	bne.n	8005640 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800562c:	2100      	movs	r1, #0
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f966 	bl	8005900 <USB_SetDevSpeed>
 8005634:	e008      	b.n	8005648 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005636:	2101      	movs	r1, #1
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f961 	bl	8005900 <USB_SetDevSpeed>
 800563e:	e003      	b.n	8005648 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005640:	2103      	movs	r1, #3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f95c 	bl	8005900 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005648:	2110      	movs	r1, #16
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f8fa 	bl	8005844 <USB_FlushTxFifo>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f923 	bl	80058a6 <USB_FlushRxFifo>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005670:	461a      	mov	r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800567c:	461a      	mov	r2, r3
 800567e:	2300      	movs	r3, #0
 8005680:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005688:	461a      	mov	r2, r3
 800568a:	2300      	movs	r3, #0
 800568c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800568e:	2300      	movs	r3, #0
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	e043      	b.n	800571c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056aa:	d118      	bne.n	80056de <USB_DevInit+0x162>
    {
      if (i == 0U)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056be:	461a      	mov	r2, r3
 80056c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	e013      	b.n	80056f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d4:	461a      	mov	r2, r3
 80056d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	e008      	b.n	80056f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ea:	461a      	mov	r2, r3
 80056ec:	2300      	movs	r3, #0
 80056ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056fc:	461a      	mov	r2, r3
 80056fe:	2300      	movs	r3, #0
 8005700:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800570e:	461a      	mov	r2, r3
 8005710:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005714:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	3301      	adds	r3, #1
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005720:	461a      	mov	r2, r3
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4293      	cmp	r3, r2
 8005726:	d3b5      	bcc.n	8005694 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	e043      	b.n	80057b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005740:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005744:	d118      	bne.n	8005778 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005758:	461a      	mov	r2, r3
 800575a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	e013      	b.n	800578a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800576e:	461a      	mov	r2, r3
 8005770:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	e008      	b.n	800578a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005784:	461a      	mov	r2, r3
 8005786:	2300      	movs	r3, #0
 8005788:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005796:	461a      	mov	r2, r3
 8005798:	2300      	movs	r3, #0
 800579a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a8:	461a      	mov	r2, r3
 80057aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	3301      	adds	r3, #1
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057ba:	461a      	mov	r2, r3
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4293      	cmp	r3, r2
 80057c0:	d3b5      	bcc.n	800572e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80057e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d105      	bne.n	80057f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	f043 0210 	orr.w	r2, r3, #16
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699a      	ldr	r2, [r3, #24]
 80057fc:	4b10      	ldr	r3, [pc, #64]	@ (8005840 <USB_DevInit+0x2c4>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005804:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f043 0208 	orr.w	r2, r3, #8
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005818:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800581c:	2b01      	cmp	r3, #1
 800581e:	d107      	bne.n	8005830 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005828:	f043 0304 	orr.w	r3, r3, #4
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800583c:	b004      	add	sp, #16
 800583e:	4770      	bx	lr
 8005840:	803c3800 	.word	0x803c3800

08005844 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3301      	adds	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800585e:	d901      	bls.n	8005864 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e01b      	b.n	800589c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	daf2      	bge.n	8005852 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	019b      	lsls	r3, r3, #6
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3301      	adds	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005888:	d901      	bls.n	800588e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e006      	b.n	800589c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b20      	cmp	r3, #32
 8005898:	d0f0      	beq.n	800587c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr

080058a6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3301      	adds	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058be:	d901      	bls.n	80058c4 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e018      	b.n	80058f6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	daf2      	bge.n	80058b2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2210      	movs	r2, #16
 80058d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3301      	adds	r3, #1
 80058da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058e2:	d901      	bls.n	80058e8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e006      	b.n	80058f6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d0f0      	beq.n	80058d6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005920:	4313      	orrs	r3, r2
 8005922:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0306 	and.w	r3, r3, #6
 8005948:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005950:	2300      	movs	r3, #0
 8005952:	75fb      	strb	r3, [r7, #23]
 8005954:	e00a      	b.n	800596c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b02      	cmp	r3, #2
 800595a:	d002      	beq.n	8005962 <USB_GetDevSpeed+0x32>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b06      	cmp	r3, #6
 8005960:	d102      	bne.n	8005968 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005962:	2302      	movs	r3, #2
 8005964:	75fb      	strb	r3, [r7, #23]
 8005966:	e001      	b.n	800596c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005968:	230f      	movs	r3, #15
 800596a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800596c:	7dfb      	ldrb	r3, [r7, #23]
}
 800596e:	4618      	mov	r0, r3
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d13a      	bne.n	8005a0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599a:	69da      	ldr	r2, [r3, #28]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	2101      	movs	r1, #1
 80059a6:	fa01 f303 	lsl.w	r3, r1, r3
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	68f9      	ldr	r1, [r7, #12]
 80059ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d155      	bne.n	8005a78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	791b      	ldrb	r3, [r3, #4]
 80059e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	059b      	lsls	r3, r3, #22
 80059ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059f0:	4313      	orrs	r3, r2
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	e036      	b.n	8005a78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a20:	041b      	lsls	r3, r3, #16
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d11a      	bne.n	8005a78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	791b      	ldrb	r3, [r3, #4]
 8005a5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a5e:	430b      	orrs	r3, r1
 8005a60:	4313      	orrs	r3, r2
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr

08005a84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d161      	bne.n	8005b64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab6:	d11f      	bne.n	8005af8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ad2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ad6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005af2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005af6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	2101      	movs	r1, #1
 8005b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	43db      	mvns	r3, r3
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b18:	4013      	ands	r3, r2
 8005b1a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	f003 030f 	and.w	r3, r3, #15
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	0159      	lsls	r1, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	440b      	add	r3, r1
 8005b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4b35      	ldr	r3, [pc, #212]	@ (8005c34 <USB_DeactivateEndpoint+0x1b0>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	600b      	str	r3, [r1, #0]
 8005b62:	e060      	b.n	8005c26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b7a:	d11f      	bne.n	8005bbc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	2101      	movs	r1, #1
 8005bce:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd2:	041b      	lsls	r3, r3, #16
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bdc:	4013      	ands	r3, r2
 8005bde:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf6:	041b      	lsls	r3, r3, #16
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c00:	4013      	ands	r3, r2
 8005c02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	0159      	lsls	r1, r3, #5
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	440b      	add	r3, r1
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4b05      	ldr	r3, [pc, #20]	@ (8005c38 <USB_DeactivateEndpoint+0x1b4>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	ec337800 	.word	0xec337800
 8005c38:	eff37800 	.word	0xeff37800

08005c3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08a      	sub	sp, #40	@ 0x28
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	4613      	mov	r3, r2
 8005c48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	f040 817a 	bne.w	8005f52 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d132      	bne.n	8005ccc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c80:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c84:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ca4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ca8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	0151      	lsls	r1, r2, #5
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	440a      	add	r2, r1
 8005cc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc4:	0cdb      	lsrs	r3, r3, #19
 8005cc6:	04db      	lsls	r3, r3, #19
 8005cc8:	6113      	str	r3, [r2, #16]
 8005cca:	e092      	b.n	8005df2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	0151      	lsls	r1, r2, #5
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ce6:	0cdb      	lsrs	r3, r3, #19
 8005ce8:	04db      	lsls	r3, r3, #19
 8005cea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d06:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d0a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d0e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d11a      	bne.n	8005d4c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d903      	bls.n	8005d2a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d48:	6113      	str	r3, [r2, #16]
 8005d4a:	e01b      	b.n	8005d84 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d58:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6919      	ldr	r1, [r3, #16]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	440b      	add	r3, r1
 8005d64:	1e59      	subs	r1, r3, #1
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d6e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d70:	4ba2      	ldr	r3, [pc, #648]	@ (8005ffc <USB_EPStartXfer+0x3c0>)
 8005d72:	400b      	ands	r3, r1
 8005d74:	69b9      	ldr	r1, [r7, #24]
 8005d76:	0148      	lsls	r0, r1, #5
 8005d78:	69f9      	ldr	r1, [r7, #28]
 8005d7a:	4401      	add	r1, r0
 8005d7c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d80:	4313      	orrs	r3, r2
 8005d82:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d9a:	69b9      	ldr	r1, [r7, #24]
 8005d9c:	0148      	lsls	r0, r1, #5
 8005d9e:	69f9      	ldr	r1, [r7, #28]
 8005da0:	4401      	add	r1, r0
 8005da2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005da6:	4313      	orrs	r3, r2
 8005da8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	791b      	ldrb	r3, [r3, #4]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d11f      	bne.n	8005df2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dcc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005dd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005df0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d14b      	bne.n	8005e90 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	791b      	ldrb	r3, [r3, #4]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d128      	bne.n	8005e6e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d110      	bne.n	8005e4e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	e00f      	b.n	8005e6e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e88:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	e165      	b.n	800615c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eaa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005eae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	791b      	ldrb	r3, [r3, #4]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d015      	beq.n	8005ee4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 814d 	beq.w	800615c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed8:	69f9      	ldr	r1, [r7, #28]
 8005eda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	634b      	str	r3, [r1, #52]	@ 0x34
 8005ee2:	e13b      	b.n	800615c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d110      	bne.n	8005f16 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	e00f      	b.n	8005f36 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	68d9      	ldr	r1, [r3, #12]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	781a      	ldrb	r2, [r3, #0]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	b298      	uxth	r0, r3
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	4603      	mov	r3, r0
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f9b7 	bl	80062be <USB_WritePacket>
 8005f50:	e104      	b.n	800615c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f6c:	0cdb      	lsrs	r3, r3, #19
 8005f6e:	04db      	lsls	r3, r3, #19
 8005f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f8c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f90:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f94:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d131      	bne.n	8006000 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fca:	69b9      	ldr	r1, [r7, #24]
 8005fcc:	0148      	lsls	r0, r1, #5
 8005fce:	69f9      	ldr	r1, [r7, #28]
 8005fd0:	4401      	add	r1, r0
 8005fd2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ff4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ff8:	6113      	str	r3, [r2, #16]
 8005ffa:	e061      	b.n	80060c0 <USB_EPStartXfer+0x484>
 8005ffc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d123      	bne.n	8006050 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800601e:	69b9      	ldr	r1, [r7, #24]
 8006020:	0148      	lsls	r0, r1, #5
 8006022:	69f9      	ldr	r1, [r7, #28]
 8006024:	4401      	add	r1, r0
 8006026:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800602a:	4313      	orrs	r3, r2
 800602c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	440a      	add	r2, r1
 8006044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006048:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800604c:	6113      	str	r3, [r2, #16]
 800604e:	e037      	b.n	80060c0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4413      	add	r3, r2
 800605a:	1e5a      	subs	r2, r3, #1
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	8afa      	ldrh	r2, [r7, #22]
 800606c:	fb03 f202 	mul.w	r2, r3, r2
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	8afb      	ldrh	r3, [r7, #22]
 8006084:	04d9      	lsls	r1, r3, #19
 8006086:	4b38      	ldr	r3, [pc, #224]	@ (8006168 <USB_EPStartXfer+0x52c>)
 8006088:	400b      	ands	r3, r1
 800608a:	69b9      	ldr	r1, [r7, #24]
 800608c:	0148      	lsls	r0, r1, #5
 800608e:	69f9      	ldr	r1, [r7, #28]
 8006090:	4401      	add	r1, r0
 8006092:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006096:	4313      	orrs	r3, r2
 8006098:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b0:	69b9      	ldr	r1, [r7, #24]
 80060b2:	0148      	lsls	r0, r1, #5
 80060b4:	69f9      	ldr	r1, [r7, #28]
 80060b6:	4401      	add	r1, r0
 80060b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060bc:	4313      	orrs	r3, r2
 80060be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10d      	bne.n	80060e2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	68d9      	ldr	r1, [r3, #12]
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060de:	460a      	mov	r2, r1
 80060e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	791b      	ldrb	r3, [r3, #4]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d128      	bne.n	800613c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d110      	bne.n	800611c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	0151      	lsls	r1, r2, #5
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	440a      	add	r2, r1
 8006110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006114:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	e00f      	b.n	800613c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	440a      	add	r2, r1
 8006132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800613a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006156:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800615a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	1ff80000 	.word	0x1ff80000

0800616c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d14a      	bne.n	8006220 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800619e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061a2:	f040 8086 	bne.w	80062b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	7812      	ldrb	r2, [r2, #0]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d902      	bls.n	8006204 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]
          break;
 8006202:	e056      	b.n	80062b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800621c:	d0e7      	beq.n	80061ee <USB_EPStopXfer+0x82>
 800621e:	e048      	b.n	80062b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006238:	d13b      	bne.n	80062b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	7812      	ldrb	r2, [r2, #0]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	440a      	add	r2, r1
 8006254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006258:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800625c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	7812      	ldrb	r2, [r2, #0]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	440a      	add	r2, r1
 8006278:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800627c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006280:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3301      	adds	r3, #1
 8006286:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800628e:	4293      	cmp	r3, r2
 8006290:	d902      	bls.n	8006298 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
          break;
 8006296:	e00c      	b.n	80062b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062b0:	d0e7      	beq.n	8006282 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr

080062be <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062be:	b480      	push	{r7}
 80062c0:	b089      	sub	sp, #36	@ 0x24
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	4611      	mov	r1, r2
 80062ca:	461a      	mov	r2, r3
 80062cc:	460b      	mov	r3, r1
 80062ce:	71fb      	strb	r3, [r7, #7]
 80062d0:	4613      	mov	r3, r2
 80062d2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d123      	bne.n	800632c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062e4:	88bb      	ldrh	r3, [r7, #4]
 80062e6:	3303      	adds	r3, #3
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062ec:	2300      	movs	r3, #0
 80062ee:	61bb      	str	r3, [r7, #24]
 80062f0:	e018      	b.n	8006324 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	031a      	lsls	r2, r3, #12
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062fe:	461a      	mov	r2, r3
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	3301      	adds	r3, #1
 800630a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	3301      	adds	r3, #1
 8006310:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	3301      	adds	r3, #1
 8006316:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	3301      	adds	r3, #1
 800631c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	3301      	adds	r3, #1
 8006322:	61bb      	str	r3, [r7, #24]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	429a      	cmp	r2, r3
 800632a:	d3e2      	bcc.n	80062f2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3724      	adds	r7, #36	@ 0x24
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr

08006338 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006338:	b480      	push	{r7}
 800633a:	b08b      	sub	sp, #44	@ 0x2c
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	4613      	mov	r3, r2
 8006344:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800634e:	88fb      	ldrh	r3, [r7, #6]
 8006350:	089b      	lsrs	r3, r3, #2
 8006352:	b29b      	uxth	r3, r3
 8006354:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800635e:	2300      	movs	r3, #0
 8006360:	623b      	str	r3, [r7, #32]
 8006362:	e014      	b.n	800638e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	3301      	adds	r3, #1
 8006374:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	3301      	adds	r3, #1
 800637a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637e:	3301      	adds	r3, #1
 8006380:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	3301      	adds	r3, #1
 8006386:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	3301      	adds	r3, #1
 800638c:	623b      	str	r3, [r7, #32]
 800638e:	6a3a      	ldr	r2, [r7, #32]
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	429a      	cmp	r2, r3
 8006394:	d3e6      	bcc.n	8006364 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006396:	8bfb      	ldrh	r3, [r7, #30]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01e      	beq.n	80063da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063a6:	461a      	mov	r2, r3
 80063a8:	f107 0310 	add.w	r3, r7, #16
 80063ac:	6812      	ldr	r2, [r2, #0]
 80063ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	fa22 f303 	lsr.w	r3, r2, r3
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	701a      	strb	r2, [r3, #0]
      i++;
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	3301      	adds	r3, #1
 80063c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	3301      	adds	r3, #1
 80063cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80063ce:	8bfb      	ldrh	r3, [r7, #30]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063d4:	8bfb      	ldrh	r3, [r7, #30]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1ea      	bne.n	80063b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063dc:	4618      	mov	r0, r3
 80063de:	372c      	adds	r7, #44	@ 0x2c
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bc80      	pop	{r7}
 80063e4:	4770      	bx	lr

080063e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	785b      	ldrb	r3, [r3, #1]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d12c      	bne.n	800645c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	db12      	blt.n	800643a <USB_EPSetStall+0x54>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00f      	beq.n	800643a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	440a      	add	r2, r1
 8006430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006434:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006438:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	0151      	lsls	r1, r2, #5
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	440a      	add	r2, r1
 8006450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006454:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	e02b      	b.n	80064b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	db12      	blt.n	8006494 <USB_EPSetStall+0xae>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00f      	beq.n	8006494 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800648e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006492:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr

080064c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d128      	bne.n	800652e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	791b      	ldrb	r3, [r3, #4]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d003      	beq.n	800650c <USB_EPClearStall+0x4c>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	791b      	ldrb	r3, [r3, #4]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d138      	bne.n	800657e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	e027      	b.n	800657e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	440a      	add	r2, r1
 8006544:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006548:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800654c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	791b      	ldrb	r3, [r3, #4]
 8006552:	2b03      	cmp	r3, #3
 8006554:	d003      	beq.n	800655e <USB_EPClearStall+0x9e>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	791b      	ldrb	r3, [r3, #4]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d10f      	bne.n	800657e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	440a      	add	r2, r1
 8006574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800657c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr

0800658a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800658a:	b480      	push	{r7}
 800658c:	b085      	sub	sp, #20
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	460b      	mov	r3, r1
 8006594:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065a8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80065ac:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80065be:	68f9      	ldr	r1, [r7, #12]
 80065c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065c4:	4313      	orrs	r3, r2
 80065c6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr

080065d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065ee:	f023 0303 	bic.w	r3, r3, #3
 80065f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006602:	f023 0302 	bic.w	r3, r3, #2
 8006606:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	bc80      	pop	{r7}
 8006612:	4770      	bx	lr

08006614 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006642:	f043 0302 	orr.w	r3, r3, #2
 8006646:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	bc80      	pop	{r7}
 8006652:	4770      	bx	lr

08006654 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4013      	ands	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800666c:	68fb      	ldr	r3, [r7, #12]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr

08006678 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	4013      	ands	r3, r2
 800669a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	0c1b      	lsrs	r3, r3, #16
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr

080066aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	4013      	ands	r3, r2
 80066cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	b29b      	uxth	r3, r3
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr

080066dc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	4013      	ands	r3, r2
 8006708:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800670a:	68bb      	ldr	r3, [r7, #8]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr

08006716 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006716:	b480      	push	{r7}
 8006718:	b087      	sub	sp, #28
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	460b      	mov	r3, r1
 8006720:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006738:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	fa22 f303 	lsr.w	r3, r2, r3
 8006746:	01db      	lsls	r3, r3, #7
 8006748:	b2db      	uxtb	r3, r3
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4013      	ands	r3, r2
 8006762:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006764:	68bb      	ldr	r3, [r7, #8]
}
 8006766:	4618      	mov	r0, r3
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	f003 0301 	and.w	r3, r3, #1
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr

0800678a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80067a8:	f023 0307 	bic.w	r3, r3, #7
 80067ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr
	...

080067d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	460b      	mov	r3, r1
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	333c      	adds	r3, #60	@ 0x3c
 80067e6:	3304      	adds	r3, #4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4a25      	ldr	r2, [pc, #148]	@ (8006884 <USB_EP0_OutStart+0xb4>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d90a      	bls.n	800680a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006800:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006804:	d101      	bne.n	800680a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	e037      	b.n	800687a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006810:	461a      	mov	r2, r3
 8006812:	2300      	movs	r3, #0
 8006814:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006824:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006828:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006838:	f043 0318 	orr.w	r3, r3, #24
 800683c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800684c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006850:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d10f      	bne.n	8006878 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006872:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006876:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	371c      	adds	r7, #28
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr
 8006884:	4f54300a 	.word	0x4f54300a

08006888 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068a0:	d901      	bls.n	80068a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e01b      	b.n	80068de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	daf2      	bge.n	8006894 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f043 0201 	orr.w	r2, r3, #1
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3301      	adds	r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068ca:	d901      	bls.n	80068d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e006      	b.n	80068de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d0f0      	beq.n	80068be <USB_CoreReset+0x36>

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr

080068e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	7c1b      	ldrb	r3, [r3, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d115      	bne.n	800692c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006900:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006904:	2202      	movs	r2, #2
 8006906:	2181      	movs	r1, #129	@ 0x81
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 fed8 	bl	80086be <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006914:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006918:	2202      	movs	r2, #2
 800691a:	2101      	movs	r1, #1
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 fece 	bl	80086be <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800692a:	e012      	b.n	8006952 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800692c:	2340      	movs	r3, #64	@ 0x40
 800692e:	2202      	movs	r2, #2
 8006930:	2181      	movs	r1, #129	@ 0x81
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 fec3 	bl	80086be <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800693e:	2340      	movs	r3, #64	@ 0x40
 8006940:	2202      	movs	r2, #2
 8006942:	2101      	movs	r1, #1
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 feba 	bl	80086be <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006952:	2308      	movs	r3, #8
 8006954:	2203      	movs	r2, #3
 8006956:	2182      	movs	r1, #130	@ 0x82
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 feb0 	bl	80086be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006964:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006968:	f001 fffc 	bl	8008964 <malloc>
 800696c:	4603      	mov	r3, r0
 800696e:	461a      	mov	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
 8006984:	e026      	b.n	80069d4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800698c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	7c1b      	ldrb	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d109      	bne.n	80069c4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069ba:	2101      	movs	r1, #1
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 ff6e 	bl	800889e <USBD_LL_PrepareReceive>
 80069c2:	e007      	b.n	80069d4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069ca:	2340      	movs	r3, #64	@ 0x40
 80069cc:	2101      	movs	r1, #1
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 ff65 	bl	800889e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	460b      	mov	r3, r1
 80069e8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80069ee:	2181      	movs	r1, #129	@ 0x81
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fe8a 	bl	800870a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80069fc:	2101      	movs	r1, #1
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f001 fe83 	bl	800870a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a0c:	2182      	movs	r1, #130	@ 0x82
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 fe7b 	bl	800870a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00e      	beq.n	8006a42 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 ff9d 	bl	8008974 <free>
    pdev->pClassData = NULL;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a5c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d039      	beq.n	8006aea <USBD_CDC_Setup+0x9e>
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d17f      	bne.n	8006b7a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	88db      	ldrh	r3, [r3, #6]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d029      	beq.n	8006ad6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	b25b      	sxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	da11      	bge.n	8006ab0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006a98:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	88d2      	ldrh	r2, [r2, #6]
 8006a9e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006aa0:	6939      	ldr	r1, [r7, #16]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	88db      	ldrh	r3, [r3, #6]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 fa0f 	bl	8007ecc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006aae:	e06b      	b.n	8006b88 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	785a      	ldrb	r2, [r3, #1]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	88db      	ldrh	r3, [r3, #6]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ac6:	6939      	ldr	r1, [r7, #16]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	88db      	ldrh	r3, [r3, #6]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fa2a 	bl	8007f28 <USBD_CtlPrepareRx>
      break;
 8006ad4:	e058      	b.n	8006b88 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	7850      	ldrb	r0, [r2, #1]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	4798      	blx	r3
      break;
 8006ae8:	e04e      	b.n	8006b88 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	2b0b      	cmp	r3, #11
 8006af0:	d02e      	beq.n	8006b50 <USBD_CDC_Setup+0x104>
 8006af2:	2b0b      	cmp	r3, #11
 8006af4:	dc38      	bgt.n	8006b68 <USBD_CDC_Setup+0x11c>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <USBD_CDC_Setup+0xb4>
 8006afa:	2b0a      	cmp	r3, #10
 8006afc:	d014      	beq.n	8006b28 <USBD_CDC_Setup+0xdc>
 8006afe:	e033      	b.n	8006b68 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d107      	bne.n	8006b1a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b0a:	f107 030c 	add.w	r3, r7, #12
 8006b0e:	2202      	movs	r2, #2
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 f9da 	bl	8007ecc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b18:	e02e      	b.n	8006b78 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 f96b 	bl	8007df8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b22:	2302      	movs	r3, #2
 8006b24:	75fb      	strb	r3, [r7, #23]
          break;
 8006b26:	e027      	b.n	8006b78 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d107      	bne.n	8006b42 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b32:	f107 030f 	add.w	r3, r7, #15
 8006b36:	2201      	movs	r2, #1
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f001 f9c6 	bl	8007ecc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b40:	e01a      	b.n	8006b78 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 f957 	bl	8007df8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4e:	e013      	b.n	8006b78 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d00d      	beq.n	8006b76 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 f94b 	bl	8007df8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b62:	2302      	movs	r3, #2
 8006b64:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b66:	e006      	b.n	8006b76 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 f944 	bl	8007df8 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b70:	2302      	movs	r3, #2
 8006b72:	75fb      	strb	r3, [r7, #23]
          break;
 8006b74:	e000      	b.n	8006b78 <USBD_CDC_Setup+0x12c>
          break;
 8006b76:	bf00      	nop
      }
      break;
 8006b78:	e006      	b.n	8006b88 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f93b 	bl	8007df8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b82:	2302      	movs	r3, #2
 8006b84:	75fb      	strb	r3, [r7, #23]
      break;
 8006b86:	bf00      	nop
  }

  return ret;
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ba4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006bac:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d03a      	beq.n	8006c2e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006bb8:	78fa      	ldrb	r2, [r7, #3]
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	331c      	adds	r3, #28
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d029      	beq.n	8006c22 <USBD_CDC_DataIn+0x90>
 8006bce:	78fa      	ldrb	r2, [r7, #3]
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	331c      	adds	r3, #28
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	78f9      	ldrb	r1, [r7, #3]
 8006be2:	68b8      	ldr	r0, [r7, #8]
 8006be4:	460b      	mov	r3, r1
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	440b      	add	r3, r1
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4403      	add	r3, r0
 8006bee:	331c      	adds	r3, #28
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	fbb2 f1f3 	udiv	r1, r2, r3
 8006bf6:	fb01 f303 	mul.w	r3, r1, r3
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d110      	bne.n	8006c22 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006c00:	78fa      	ldrb	r2, [r7, #3]
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	331c      	adds	r3, #28
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c14:	78f9      	ldrb	r1, [r7, #3]
 8006c16:	2300      	movs	r3, #0
 8006c18:	2200      	movs	r2, #0
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 fe1c 	bl	8008858 <USBD_LL_Transmit>
 8006c20:	e003      	b.n	8006c2a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e000      	b.n	8006c30 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006c2e:	2302      	movs	r3, #2
  }
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 fe47 	bl	80088e4 <USBD_LL_GetRxDataSize>
 8006c56:	4602      	mov	r2, r0
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00d      	beq.n	8006c84 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	4798      	blx	r3

    return USBD_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	e000      	b.n	8006c86 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006c84:	2302      	movs	r3, #2
  }
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c9c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d014      	beq.n	8006cd2 <USBD_CDC_EP0_RxReady+0x44>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006cae:	2bff      	cmp	r3, #255	@ 0xff
 8006cb0:	d00f      	beq.n	8006cd2 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006cc0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006cc8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	22ff      	movs	r2, #255	@ 0xff
 8006cce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2243      	movs	r2, #67	@ 0x43
 8006ce8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006cea:	4b03      	ldr	r3, [pc, #12]	@ (8006cf8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bc80      	pop	{r7}
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	200000ac 	.word	0x200000ac

08006cfc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2243      	movs	r2, #67	@ 0x43
 8006d08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006d0a:	4b03      	ldr	r3, [pc, #12]	@ (8006d18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	20000068 	.word	0x20000068

08006d1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2243      	movs	r2, #67	@ 0x43
 8006d28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006d2a:	4b03      	ldr	r3, [pc, #12]	@ (8006d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	200000f0 	.word	0x200000f0

08006d3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	220a      	movs	r2, #10
 8006d48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006d4a:	4b03      	ldr	r3, [pc, #12]	@ (8006d58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	20000024 	.word	0x20000024

08006d5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006d66:	2302      	movs	r3, #2
 8006d68:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bc80      	pop	{r7}
 8006d86:	4770      	bx	lr

08006d88 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	4613      	mov	r3, r2
 8006d94:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d9c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006da6:	88fa      	ldrh	r2, [r7, #6]
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b085      	sub	sp, #20
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bc80      	pop	{r7}
 8006dde:	4770      	bx	lr

08006de0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d017      	beq.n	8006e2a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	7c1b      	ldrb	r3, [r3, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f001 fd45 	bl	800889e <USBD_LL_PrepareReceive>
 8006e14:	e007      	b.n	8006e26 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e1c:	2340      	movs	r3, #64	@ 0x40
 8006e1e:	2101      	movs	r1, #1
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 fd3c 	bl	800889e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e000      	b.n	8006e2c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006e2a:	2302      	movs	r3, #2
  }
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e01a      	b.n	8006e82 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	79fa      	ldrb	r2, [r7, #7]
 8006e78:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f001 fbba 	bl	80085f4 <USBD_LL_Init>

  return USBD_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d006      	beq.n	8006eac <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
 8006eaa:	e001      	b.n	8006eb0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006eac:	2302      	movs	r3, #2
 8006eae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fbdf 	bl	8008688 <USBD_LL_Start>

  return USBD_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr

08006ee8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00c      	beq.n	8006f1c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	78fa      	ldrb	r2, [r7, #3]
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	4798      	blx	r3

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 ff11 	bl	8007d86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f72:	461a      	mov	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006f80:	f003 031f 	and.w	r3, r3, #31
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d016      	beq.n	8006fb6 <USBD_LL_SetupStage+0x6a>
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d81c      	bhi.n	8006fc6 <USBD_LL_SetupStage+0x7a>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <USBD_LL_SetupStage+0x4a>
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d008      	beq.n	8006fa6 <USBD_LL_SetupStage+0x5a>
 8006f94:	e017      	b.n	8006fc6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fa04 	bl	80073ac <USBD_StdDevReq>
      break;
 8006fa4:	e01a      	b.n	8006fdc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa66 	bl	8007480 <USBD_StdItfReq>
      break;
 8006fb4:	e012      	b.n	8006fdc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 faa6 	bl	8007510 <USBD_StdEPReq>
      break;
 8006fc4:	e00a      	b.n	8006fdc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006fcc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 fbb7 	bl	8008748 <USBD_LL_StallEP>
      break;
 8006fda:	bf00      	nop
  }

  return USBD_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b086      	sub	sp, #24
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	607a      	str	r2, [r7, #4]
 8006ff2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d14b      	bne.n	8007092 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007000:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007008:	2b03      	cmp	r3, #3
 800700a:	d134      	bne.n	8007076 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	429a      	cmp	r2, r3
 8007016:	d919      	bls.n	800704c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	1ad2      	subs	r2, r2, r3
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800702e:	429a      	cmp	r2, r3
 8007030:	d203      	bcs.n	800703a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007036:	b29b      	uxth	r3, r3
 8007038:	e002      	b.n	8007040 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800703e:	b29b      	uxth	r3, r3
 8007040:	461a      	mov	r2, r3
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 ff8d 	bl	8007f64 <USBD_CtlContinueRx>
 800704a:	e038      	b.n	80070be <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800705e:	2b03      	cmp	r3, #3
 8007060:	d105      	bne.n	800706e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 ff8a 	bl	8007f88 <USBD_CtlSendStatus>
 8007074:	e023      	b.n	80070be <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800707c:	2b05      	cmp	r3, #5
 800707e:	d11e      	bne.n	80070be <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007088:	2100      	movs	r1, #0
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f001 fb5c 	bl	8008748 <USBD_LL_StallEP>
 8007090:	e015      	b.n	80070be <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00d      	beq.n	80070ba <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d108      	bne.n	80070ba <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	7afa      	ldrb	r2, [r7, #11]
 80070b2:	4611      	mov	r1, r2
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	4798      	blx	r3
 80070b8:	e001      	b.n	80070be <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070ba:	2302      	movs	r3, #2
 80070bc:	e000      	b.n	80070c0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	460b      	mov	r3, r1
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070d6:	7afb      	ldrb	r3, [r7, #11]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d17f      	bne.n	80071dc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3314      	adds	r3, #20
 80070e0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d15c      	bne.n	80071a6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d915      	bls.n	8007124 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	1ad2      	subs	r2, r2, r3
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	b29b      	uxth	r3, r3
 800710c:	461a      	mov	r2, r3
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fef7 	bl	8007f04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007116:	2300      	movs	r3, #0
 8007118:	2200      	movs	r2, #0
 800711a:	2100      	movs	r1, #0
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f001 fbbe 	bl	800889e <USBD_LL_PrepareReceive>
 8007122:	e04e      	b.n	80071c2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	6912      	ldr	r2, [r2, #16]
 800712c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007130:	fb01 f202 	mul.w	r2, r1, r2
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d11c      	bne.n	8007174 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007142:	429a      	cmp	r2, r3
 8007144:	d316      	bcc.n	8007174 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007150:	429a      	cmp	r2, r3
 8007152:	d20f      	bcs.n	8007174 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007154:	2200      	movs	r2, #0
 8007156:	2100      	movs	r1, #0
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fed3 	bl	8007f04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007166:	2300      	movs	r3, #0
 8007168:	2200      	movs	r2, #0
 800716a:	2100      	movs	r1, #0
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f001 fb96 	bl	800889e <USBD_LL_PrepareReceive>
 8007172:	e026      	b.n	80071c2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007186:	2b03      	cmp	r3, #3
 8007188:	d105      	bne.n	8007196 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007196:	2180      	movs	r1, #128	@ 0x80
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f001 fad5 	bl	8008748 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 ff05 	bl	8007fae <USBD_CtlReceiveStatus>
 80071a4:	e00d      	b.n	80071c2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	d004      	beq.n	80071ba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80071ba:	2180      	movs	r1, #128	@ 0x80
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f001 fac3 	bl	8008748 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d11d      	bne.n	8007208 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7ff fe81 	bl	8006ed4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80071da:	e015      	b.n	8007208 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00d      	beq.n	8007204 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d108      	bne.n	8007204 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	7afa      	ldrb	r2, [r7, #11]
 80071fc:	4611      	mov	r1, r2
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	4798      	blx	r3
 8007202:	e001      	b.n	8007208 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007204:	2302      	movs	r3, #2
 8007206:	e000      	b.n	800720a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800721a:	2340      	movs	r3, #64	@ 0x40
 800721c:	2200      	movs	r2, #0
 800721e:	2100      	movs	r1, #0
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 fa4c 	bl	80086be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2240      	movs	r2, #64	@ 0x40
 8007232:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007236:	2340      	movs	r3, #64	@ 0x40
 8007238:	2200      	movs	r2, #0
 800723a:	2180      	movs	r1, #128	@ 0x80
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 fa3e 	bl	80086be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2240      	movs	r2, #64	@ 0x40
 800724c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d009      	beq.n	800728a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6852      	ldr	r2, [r2, #4]
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	4611      	mov	r1, r2
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
  }

  return USBD_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bc80      	pop	{r7}
 80072b0:	4770      	bx	lr

080072b2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2204      	movs	r2, #4
 80072ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr

080072da <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072da:	b480      	push	{r7}
 80072dc:	b083      	sub	sp, #12
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d105      	bne.n	80072f8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr

08007304 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007312:	2b03      	cmp	r3, #3
 8007314:	d10b      	bne.n	800732e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d005      	beq.n	800732e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	bc80      	pop	{r7}
 800734e:	4770      	bx	lr

08007350 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	bc80      	pop	{r7}
 8007366:	4770      	bx	lr

08007368 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr

0800737c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	6852      	ldr	r2, [r2, #4]
 8007398:	b2d2      	uxtb	r2, r2
 800739a:	4611      	mov	r1, r2
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3

  return USBD_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073c2:	2b40      	cmp	r3, #64	@ 0x40
 80073c4:	d005      	beq.n	80073d2 <USBD_StdDevReq+0x26>
 80073c6:	2b40      	cmp	r3, #64	@ 0x40
 80073c8:	d84f      	bhi.n	800746a <USBD_StdDevReq+0xbe>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d009      	beq.n	80073e2 <USBD_StdDevReq+0x36>
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d14b      	bne.n	800746a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
      break;
 80073e0:	e048      	b.n	8007474 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	785b      	ldrb	r3, [r3, #1]
 80073e6:	2b09      	cmp	r3, #9
 80073e8:	d839      	bhi.n	800745e <USBD_StdDevReq+0xb2>
 80073ea:	a201      	add	r2, pc, #4	@ (adr r2, 80073f0 <USBD_StdDevReq+0x44>)
 80073ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f0:	08007441 	.word	0x08007441
 80073f4:	08007455 	.word	0x08007455
 80073f8:	0800745f 	.word	0x0800745f
 80073fc:	0800744b 	.word	0x0800744b
 8007400:	0800745f 	.word	0x0800745f
 8007404:	08007423 	.word	0x08007423
 8007408:	08007419 	.word	0x08007419
 800740c:	0800745f 	.word	0x0800745f
 8007410:	08007437 	.word	0x08007437
 8007414:	0800742d 	.word	0x0800742d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f9dc 	bl	80077d8 <USBD_GetDescriptor>
          break;
 8007420:	e022      	b.n	8007468 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb3f 	bl	8007aa8 <USBD_SetAddress>
          break;
 800742a:	e01d      	b.n	8007468 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fb7e 	bl	8007b30 <USBD_SetConfig>
          break;
 8007434:	e018      	b.n	8007468 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fc07 	bl	8007c4c <USBD_GetConfig>
          break;
 800743e:	e013      	b.n	8007468 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fc37 	bl	8007cb6 <USBD_GetStatus>
          break;
 8007448:	e00e      	b.n	8007468 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fc65 	bl	8007d1c <USBD_SetFeature>
          break;
 8007452:	e009      	b.n	8007468 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fc74 	bl	8007d44 <USBD_ClrFeature>
          break;
 800745c:	e004      	b.n	8007468 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fcc9 	bl	8007df8 <USBD_CtlError>
          break;
 8007466:	bf00      	nop
      }
      break;
 8007468:	e004      	b.n	8007474 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fcc3 	bl	8007df8 <USBD_CtlError>
      break;
 8007472:	bf00      	nop
  }

  return ret;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop

08007480 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007496:	2b40      	cmp	r3, #64	@ 0x40
 8007498:	d005      	beq.n	80074a6 <USBD_StdItfReq+0x26>
 800749a:	2b40      	cmp	r3, #64	@ 0x40
 800749c:	d82e      	bhi.n	80074fc <USBD_StdItfReq+0x7c>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <USBD_StdItfReq+0x26>
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d12a      	bne.n	80074fc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ac:	3b01      	subs	r3, #1
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d81d      	bhi.n	80074ee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	889b      	ldrh	r3, [r3, #4]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d813      	bhi.n	80074e4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
 80074ca:	4603      	mov	r3, r0
 80074cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	88db      	ldrh	r3, [r3, #6]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d110      	bne.n	80074f8 <USBD_StdItfReq+0x78>
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10d      	bne.n	80074f8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fd53 	bl	8007f88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074e2:	e009      	b.n	80074f8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fc86 	bl	8007df8 <USBD_CtlError>
          break;
 80074ec:	e004      	b.n	80074f8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fc81 	bl	8007df8 <USBD_CtlError>
          break;
 80074f6:	e000      	b.n	80074fa <USBD_StdItfReq+0x7a>
          break;
 80074f8:	bf00      	nop
      }
      break;
 80074fa:	e004      	b.n	8007506 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fc7a 	bl	8007df8 <USBD_CtlError>
      break;
 8007504:	bf00      	nop
  }

  return USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	889b      	ldrh	r3, [r3, #4]
 8007522:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800752c:	2b40      	cmp	r3, #64	@ 0x40
 800752e:	d007      	beq.n	8007540 <USBD_StdEPReq+0x30>
 8007530:	2b40      	cmp	r3, #64	@ 0x40
 8007532:	f200 8146 	bhi.w	80077c2 <USBD_StdEPReq+0x2b2>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <USBD_StdEPReq+0x40>
 800753a:	2b20      	cmp	r3, #32
 800753c:	f040 8141 	bne.w	80077c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
      break;
 800754e:	e13d      	b.n	80077cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007558:	2b20      	cmp	r3, #32
 800755a:	d10a      	bne.n	8007572 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
 800756a:	4603      	mov	r3, r0
 800756c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	e12d      	b.n	80077ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	785b      	ldrb	r3, [r3, #1]
 8007576:	2b03      	cmp	r3, #3
 8007578:	d007      	beq.n	800758a <USBD_StdEPReq+0x7a>
 800757a:	2b03      	cmp	r3, #3
 800757c:	f300 811b 	bgt.w	80077b6 <USBD_StdEPReq+0x2a6>
 8007580:	2b00      	cmp	r3, #0
 8007582:	d072      	beq.n	800766a <USBD_StdEPReq+0x15a>
 8007584:	2b01      	cmp	r3, #1
 8007586:	d03a      	beq.n	80075fe <USBD_StdEPReq+0xee>
 8007588:	e115      	b.n	80077b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007590:	2b02      	cmp	r3, #2
 8007592:	d002      	beq.n	800759a <USBD_StdEPReq+0x8a>
 8007594:	2b03      	cmp	r3, #3
 8007596:	d015      	beq.n	80075c4 <USBD_StdEPReq+0xb4>
 8007598:	e02b      	b.n	80075f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00c      	beq.n	80075ba <USBD_StdEPReq+0xaa>
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	2b80      	cmp	r3, #128	@ 0x80
 80075a4:	d009      	beq.n	80075ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 f8cc 	bl	8008748 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075b0:	2180      	movs	r1, #128	@ 0x80
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f001 f8c8 	bl	8008748 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075b8:	e020      	b.n	80075fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fc1b 	bl	8007df8 <USBD_CtlError>
              break;
 80075c2:	e01b      	b.n	80075fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	885b      	ldrh	r3, [r3, #2]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10e      	bne.n	80075ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00b      	beq.n	80075ea <USBD_StdEPReq+0xda>
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	2b80      	cmp	r3, #128	@ 0x80
 80075d6:	d008      	beq.n	80075ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	88db      	ldrh	r3, [r3, #6]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d104      	bne.n	80075ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 f8af 	bl	8008748 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fccc 	bl	8007f88 <USBD_CtlSendStatus>

              break;
 80075f0:	e004      	b.n	80075fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fbff 	bl	8007df8 <USBD_CtlError>
              break;
 80075fa:	bf00      	nop
          }
          break;
 80075fc:	e0e0      	b.n	80077c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007604:	2b02      	cmp	r3, #2
 8007606:	d002      	beq.n	800760e <USBD_StdEPReq+0xfe>
 8007608:	2b03      	cmp	r3, #3
 800760a:	d015      	beq.n	8007638 <USBD_StdEPReq+0x128>
 800760c:	e026      	b.n	800765c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00c      	beq.n	800762e <USBD_StdEPReq+0x11e>
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	2b80      	cmp	r3, #128	@ 0x80
 8007618:	d009      	beq.n	800762e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	4619      	mov	r1, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f001 f892 	bl	8008748 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007624:	2180      	movs	r1, #128	@ 0x80
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 f88e 	bl	8008748 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800762c:	e01c      	b.n	8007668 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fbe1 	bl	8007df8 <USBD_CtlError>
              break;
 8007636:	e017      	b.n	8007668 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	885b      	ldrh	r3, [r3, #2]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d112      	bne.n	8007666 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007646:	2b00      	cmp	r3, #0
 8007648:	d004      	beq.n	8007654 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 f899 	bl	8008786 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fc97 	bl	8007f88 <USBD_CtlSendStatus>
              }
              break;
 800765a:	e004      	b.n	8007666 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fbca 	bl	8007df8 <USBD_CtlError>
              break;
 8007664:	e000      	b.n	8007668 <USBD_StdEPReq+0x158>
              break;
 8007666:	bf00      	nop
          }
          break;
 8007668:	e0aa      	b.n	80077c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007670:	2b02      	cmp	r3, #2
 8007672:	d002      	beq.n	800767a <USBD_StdEPReq+0x16a>
 8007674:	2b03      	cmp	r3, #3
 8007676:	d032      	beq.n	80076de <USBD_StdEPReq+0x1ce>
 8007678:	e097      	b.n	80077aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d007      	beq.n	8007690 <USBD_StdEPReq+0x180>
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	2b80      	cmp	r3, #128	@ 0x80
 8007684:	d004      	beq.n	8007690 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fbb5 	bl	8007df8 <USBD_CtlError>
                break;
 800768e:	e091      	b.n	80077b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007694:	2b00      	cmp	r3, #0
 8007696:	da0b      	bge.n	80076b0 <USBD_StdEPReq+0x1a0>
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	3310      	adds	r3, #16
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	4413      	add	r3, r2
 80076ac:	3304      	adds	r3, #4
 80076ae:	e00b      	b.n	80076c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	4413      	add	r3, r2
 80076c6:	3304      	adds	r3, #4
 80076c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2202      	movs	r2, #2
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fbf8 	bl	8007ecc <USBD_CtlSendData>
              break;
 80076dc:	e06a      	b.n	80077b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80076de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	da11      	bge.n	800770a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	f003 020f 	and.w	r2, r3, #15
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	3318      	adds	r3, #24
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d117      	bne.n	8007730 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fb78 	bl	8007df8 <USBD_CtlError>
                  break;
 8007708:	e054      	b.n	80077b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	f003 020f 	and.w	r2, r3, #15
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	440b      	add	r3, r1
 800771c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d104      	bne.n	8007730 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fb65 	bl	8007df8 <USBD_CtlError>
                  break;
 800772e:	e041      	b.n	80077b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007734:	2b00      	cmp	r3, #0
 8007736:	da0b      	bge.n	8007750 <USBD_StdEPReq+0x240>
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	3310      	adds	r3, #16
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	4413      	add	r3, r2
 800774c:	3304      	adds	r3, #4
 800774e:	e00b      	b.n	8007768 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	4413      	add	r3, r2
 8007766:	3304      	adds	r3, #4
 8007768:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800776a:	7bbb      	ldrb	r3, [r7, #14]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <USBD_StdEPReq+0x266>
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	2b80      	cmp	r3, #128	@ 0x80
 8007774:	d103      	bne.n	800777e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	e00e      	b.n	800779c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 f81e 	bl	80087c4 <USBD_LL_IsStallEP>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2201      	movs	r2, #1
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	e002      	b.n	800779c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2202      	movs	r2, #2
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fb92 	bl	8007ecc <USBD_CtlSendData>
              break;
 80077a8:	e004      	b.n	80077b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fb23 	bl	8007df8 <USBD_CtlError>
              break;
 80077b2:	bf00      	nop
          }
          break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fb1d 	bl	8007df8 <USBD_CtlError>
          break;
 80077be:	bf00      	nop
      }
      break;
 80077c0:	e004      	b.n	80077cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fb17 	bl	8007df8 <USBD_CtlError>
      break;
 80077ca:	bf00      	nop
  }

  return ret;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	885b      	ldrh	r3, [r3, #2]
 80077f2:	0a1b      	lsrs	r3, r3, #8
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	2b06      	cmp	r3, #6
 80077fa:	f200 8128 	bhi.w	8007a4e <USBD_GetDescriptor+0x276>
 80077fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007804 <USBD_GetDescriptor+0x2c>)
 8007800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007804:	08007821 	.word	0x08007821
 8007808:	08007839 	.word	0x08007839
 800780c:	08007879 	.word	0x08007879
 8007810:	08007a4f 	.word	0x08007a4f
 8007814:	08007a4f 	.word	0x08007a4f
 8007818:	080079ef 	.word	0x080079ef
 800781c:	08007a1b 	.word	0x08007a1b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	7c12      	ldrb	r2, [r2, #16]
 800782c:	f107 0108 	add.w	r1, r7, #8
 8007830:	4610      	mov	r0, r2
 8007832:	4798      	blx	r3
 8007834:	60f8      	str	r0, [r7, #12]
      break;
 8007836:	e112      	b.n	8007a5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	7c1b      	ldrb	r3, [r3, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10d      	bne.n	800785c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007848:	f107 0208 	add.w	r2, r7, #8
 800784c:	4610      	mov	r0, r2
 800784e:	4798      	blx	r3
 8007850:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3301      	adds	r3, #1
 8007856:	2202      	movs	r2, #2
 8007858:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800785a:	e100      	b.n	8007a5e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007864:	f107 0208 	add.w	r2, r7, #8
 8007868:	4610      	mov	r0, r2
 800786a:	4798      	blx	r3
 800786c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3301      	adds	r3, #1
 8007872:	2202      	movs	r2, #2
 8007874:	701a      	strb	r2, [r3, #0]
      break;
 8007876:	e0f2      	b.n	8007a5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	885b      	ldrh	r3, [r3, #2]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b05      	cmp	r3, #5
 8007880:	f200 80ac 	bhi.w	80079dc <USBD_GetDescriptor+0x204>
 8007884:	a201      	add	r2, pc, #4	@ (adr r2, 800788c <USBD_GetDescriptor+0xb4>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	080078a5 	.word	0x080078a5
 8007890:	080078d9 	.word	0x080078d9
 8007894:	0800790d 	.word	0x0800790d
 8007898:	08007941 	.word	0x08007941
 800789c:	08007975 	.word	0x08007975
 80078a0:	080079a9 	.word	0x080079a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	7c12      	ldrb	r2, [r2, #16]
 80078bc:	f107 0108 	add.w	r1, r7, #8
 80078c0:	4610      	mov	r0, r2
 80078c2:	4798      	blx	r3
 80078c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c6:	e091      	b.n	80079ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa94 	bl	8007df8 <USBD_CtlError>
            err++;
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	3301      	adds	r3, #1
 80078d4:	72fb      	strb	r3, [r7, #11]
          break;
 80078d6:	e089      	b.n	80079ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00b      	beq.n	80078fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	7c12      	ldrb	r2, [r2, #16]
 80078f0:	f107 0108 	add.w	r1, r7, #8
 80078f4:	4610      	mov	r0, r2
 80078f6:	4798      	blx	r3
 80078f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fa:	e077      	b.n	80079ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa7a 	bl	8007df8 <USBD_CtlError>
            err++;
 8007904:	7afb      	ldrb	r3, [r7, #11]
 8007906:	3301      	adds	r3, #1
 8007908:	72fb      	strb	r3, [r7, #11]
          break;
 800790a:	e06f      	b.n	80079ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	7c12      	ldrb	r2, [r2, #16]
 8007924:	f107 0108 	add.w	r1, r7, #8
 8007928:	4610      	mov	r0, r2
 800792a:	4798      	blx	r3
 800792c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792e:	e05d      	b.n	80079ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fa60 	bl	8007df8 <USBD_CtlError>
            err++;
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	3301      	adds	r3, #1
 800793c:	72fb      	strb	r3, [r7, #11]
          break;
 800793e:	e055      	b.n	80079ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	7c12      	ldrb	r2, [r2, #16]
 8007958:	f107 0108 	add.w	r1, r7, #8
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
 8007960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007962:	e043      	b.n	80079ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa46 	bl	8007df8 <USBD_CtlError>
            err++;
 800796c:	7afb      	ldrb	r3, [r7, #11]
 800796e:	3301      	adds	r3, #1
 8007970:	72fb      	strb	r3, [r7, #11]
          break;
 8007972:	e03b      	b.n	80079ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	7c12      	ldrb	r2, [r2, #16]
 800798c:	f107 0108 	add.w	r1, r7, #8
 8007990:	4610      	mov	r0, r2
 8007992:	4798      	blx	r3
 8007994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007996:	e029      	b.n	80079ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fa2c 	bl	8007df8 <USBD_CtlError>
            err++;
 80079a0:	7afb      	ldrb	r3, [r7, #11]
 80079a2:	3301      	adds	r3, #1
 80079a4:	72fb      	strb	r3, [r7, #11]
          break;
 80079a6:	e021      	b.n	80079ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00b      	beq.n	80079cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	7c12      	ldrb	r2, [r2, #16]
 80079c0:	f107 0108 	add.w	r1, r7, #8
 80079c4:	4610      	mov	r0, r2
 80079c6:	4798      	blx	r3
 80079c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ca:	e00f      	b.n	80079ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa12 	bl	8007df8 <USBD_CtlError>
            err++;
 80079d4:	7afb      	ldrb	r3, [r7, #11]
 80079d6:	3301      	adds	r3, #1
 80079d8:	72fb      	strb	r3, [r7, #11]
          break;
 80079da:	e007      	b.n	80079ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fa0a 	bl	8007df8 <USBD_CtlError>
          err++;
 80079e4:	7afb      	ldrb	r3, [r7, #11]
 80079e6:	3301      	adds	r3, #1
 80079e8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80079ea:	e038      	b.n	8007a5e <USBD_GetDescriptor+0x286>
 80079ec:	e037      	b.n	8007a5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7c1b      	ldrb	r3, [r3, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079fe:	f107 0208 	add.w	r2, r7, #8
 8007a02:	4610      	mov	r0, r2
 8007a04:	4798      	blx	r3
 8007a06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a08:	e029      	b.n	8007a5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f9f3 	bl	8007df8 <USBD_CtlError>
        err++;
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	3301      	adds	r3, #1
 8007a16:	72fb      	strb	r3, [r7, #11]
      break;
 8007a18:	e021      	b.n	8007a5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7c1b      	ldrb	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10d      	bne.n	8007a3e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2a:	f107 0208 	add.w	r2, r7, #8
 8007a2e:	4610      	mov	r0, r2
 8007a30:	4798      	blx	r3
 8007a32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3301      	adds	r3, #1
 8007a38:	2207      	movs	r2, #7
 8007a3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a3c:	e00f      	b.n	8007a5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f9d9 	bl	8007df8 <USBD_CtlError>
        err++;
 8007a46:	7afb      	ldrb	r3, [r7, #11]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a4c:	e007      	b.n	8007a5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f9d1 	bl	8007df8 <USBD_CtlError>
      err++;
 8007a56:	7afb      	ldrb	r3, [r7, #11]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a5c:	bf00      	nop
  }

  if (err != 0U)
 8007a5e:	7afb      	ldrb	r3, [r7, #11]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d11c      	bne.n	8007a9e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007a64:	893b      	ldrh	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d011      	beq.n	8007a8e <USBD_GetDescriptor+0x2b6>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	88db      	ldrh	r3, [r3, #6]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00d      	beq.n	8007a8e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	88da      	ldrh	r2, [r3, #6]
 8007a76:	893b      	ldrh	r3, [r7, #8]
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	bf28      	it	cs
 8007a7c:	4613      	movcs	r3, r2
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a82:	893b      	ldrh	r3, [r7, #8]
 8007a84:	461a      	mov	r2, r3
 8007a86:	68f9      	ldr	r1, [r7, #12]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fa1f 	bl	8007ecc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	88db      	ldrh	r3, [r3, #6]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d104      	bne.n	8007aa0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa76 	bl	8007f88 <USBD_CtlSendStatus>
 8007a9c:	e000      	b.n	8007aa0 <USBD_GetDescriptor+0x2c8>
    return;
 8007a9e:	bf00      	nop
    }
  }
}
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop

08007aa8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	889b      	ldrh	r3, [r3, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d130      	bne.n	8007b1c <USBD_SetAddress+0x74>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	88db      	ldrh	r3, [r3, #6]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d12c      	bne.n	8007b1c <USBD_SetAddress+0x74>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	885b      	ldrh	r3, [r3, #2]
 8007ac6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ac8:	d828      	bhi.n	8007b1c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	885b      	ldrh	r3, [r3, #2]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ad4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007adc:	2b03      	cmp	r3, #3
 8007ade:	d104      	bne.n	8007aea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f988 	bl	8007df8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae8:	e01d      	b.n	8007b26 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	7bfa      	ldrb	r2, [r7, #15]
 8007aee:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fe8f 	bl	800881a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fa43 	bl	8007f88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d004      	beq.n	8007b12 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b10:	e009      	b.n	8007b26 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1a:	e004      	b.n	8007b26 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f96a 	bl	8007df8 <USBD_CtlError>
  }
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	885b      	ldrh	r3, [r3, #2]
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	4b41      	ldr	r3, [pc, #260]	@ (8007c48 <USBD_SetConfig+0x118>)
 8007b42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b44:	4b40      	ldr	r3, [pc, #256]	@ (8007c48 <USBD_SetConfig+0x118>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d904      	bls.n	8007b56 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f952 	bl	8007df8 <USBD_CtlError>
 8007b54:	e075      	b.n	8007c42 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d002      	beq.n	8007b66 <USBD_SetConfig+0x36>
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d023      	beq.n	8007bac <USBD_SetConfig+0x7c>
 8007b64:	e062      	b.n	8007c2c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007b66:	4b38      	ldr	r3, [pc, #224]	@ (8007c48 <USBD_SetConfig+0x118>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d01a      	beq.n	8007ba4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b6e:	4b36      	ldr	r3, [pc, #216]	@ (8007c48 <USBD_SetConfig+0x118>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2203      	movs	r2, #3
 8007b7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b80:	4b31      	ldr	r3, [pc, #196]	@ (8007c48 <USBD_SetConfig+0x118>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff f9ae 	bl	8006ee8 <USBD_SetClassConfig>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d104      	bne.n	8007b9c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f92f 	bl	8007df8 <USBD_CtlError>
            return;
 8007b9a:	e052      	b.n	8007c42 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f9f3 	bl	8007f88 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ba2:	e04e      	b.n	8007c42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f9ef 	bl	8007f88 <USBD_CtlSendStatus>
        break;
 8007baa:	e04a      	b.n	8007c42 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007bac:	4b26      	ldr	r3, [pc, #152]	@ (8007c48 <USBD_SetConfig+0x118>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d112      	bne.n	8007bda <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007bbc:	4b22      	ldr	r3, [pc, #136]	@ (8007c48 <USBD_SetConfig+0x118>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007bc6:	4b20      	ldr	r3, [pc, #128]	@ (8007c48 <USBD_SetConfig+0x118>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff f9aa 	bl	8006f26 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f9d8 	bl	8007f88 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007bd8:	e033      	b.n	8007c42 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007bda:	4b1b      	ldr	r3, [pc, #108]	@ (8007c48 <USBD_SetConfig+0x118>)
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d01d      	beq.n	8007c24 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7ff f998 	bl	8006f26 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007bf6:	4b14      	ldr	r3, [pc, #80]	@ (8007c48 <USBD_SetConfig+0x118>)
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c00:	4b11      	ldr	r3, [pc, #68]	@ (8007c48 <USBD_SetConfig+0x118>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff f96e 	bl	8006ee8 <USBD_SetClassConfig>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d104      	bne.n	8007c1c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f8ef 	bl	8007df8 <USBD_CtlError>
            return;
 8007c1a:	e012      	b.n	8007c42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f9b3 	bl	8007f88 <USBD_CtlSendStatus>
        break;
 8007c22:	e00e      	b.n	8007c42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f9af 	bl	8007f88 <USBD_CtlSendStatus>
        break;
 8007c2a:	e00a      	b.n	8007c42 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f8e2 	bl	8007df8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c34:	4b04      	ldr	r3, [pc, #16]	@ (8007c48 <USBD_SetConfig+0x118>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff f973 	bl	8006f26 <USBD_ClrClassConfig>
        break;
 8007c40:	bf00      	nop
    }
  }
}
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	2000039c 	.word	0x2000039c

08007c4c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	88db      	ldrh	r3, [r3, #6]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d004      	beq.n	8007c68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f8c9 	bl	8007df8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c66:	e022      	b.n	8007cae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	dc02      	bgt.n	8007c78 <USBD_GetConfig+0x2c>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	dc03      	bgt.n	8007c7e <USBD_GetConfig+0x32>
 8007c76:	e015      	b.n	8007ca4 <USBD_GetConfig+0x58>
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d00b      	beq.n	8007c94 <USBD_GetConfig+0x48>
 8007c7c:	e012      	b.n	8007ca4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3308      	adds	r3, #8
 8007c88:	2201      	movs	r2, #1
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f91d 	bl	8007ecc <USBD_CtlSendData>
        break;
 8007c92:	e00c      	b.n	8007cae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3304      	adds	r3, #4
 8007c98:	2201      	movs	r2, #1
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f915 	bl	8007ecc <USBD_CtlSendData>
        break;
 8007ca2:	e004      	b.n	8007cae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f8a6 	bl	8007df8 <USBD_CtlError>
        break;
 8007cac:	bf00      	nop
}
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d81e      	bhi.n	8007d0a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	88db      	ldrh	r3, [r3, #6]
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d004      	beq.n	8007cde <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f88e 	bl	8007df8 <USBD_CtlError>
        break;
 8007cdc:	e01a      	b.n	8007d14 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d005      	beq.n	8007cfa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f043 0202 	orr.w	r2, r3, #2
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	330c      	adds	r3, #12
 8007cfe:	2202      	movs	r2, #2
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f8e2 	bl	8007ecc <USBD_CtlSendData>
      break;
 8007d08:	e004      	b.n	8007d14 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f873 	bl	8007df8 <USBD_CtlError>
      break;
 8007d12:	bf00      	nop
  }
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	885b      	ldrh	r3, [r3, #2]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d106      	bne.n	8007d3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f926 	bl	8007f88 <USBD_CtlSendStatus>
  }
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d54:	3b01      	subs	r3, #1
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d80b      	bhi.n	8007d72 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	885b      	ldrh	r3, [r3, #2]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d10c      	bne.n	8007d7c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f90c 	bl	8007f88 <USBD_CtlSendStatus>
      }
      break;
 8007d70:	e004      	b.n	8007d7c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f83f 	bl	8007df8 <USBD_CtlError>
      break;
 8007d7a:	e000      	b.n	8007d7e <USBD_ClrFeature+0x3a>
      break;
 8007d7c:	bf00      	nop
  }
}
 8007d7e:	bf00      	nop
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	785a      	ldrb	r2, [r3, #1]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	3302      	adds	r3, #2
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	3303      	adds	r3, #3
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	021b      	lsls	r3, r3, #8
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	4413      	add	r3, r2
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	3305      	adds	r3, #5
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	4413      	add	r3, r2
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	3306      	adds	r3, #6
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	3307      	adds	r3, #7
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	4413      	add	r3, r2
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	80da      	strh	r2, [r3, #6]

}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bc80      	pop	{r7}
 8007df6:	4770      	bx	lr

08007df8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007e02:	2180      	movs	r1, #128	@ 0x80
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc9f 	bl	8008748 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fc9b 	bl	8008748 <USBD_LL_StallEP>
}
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b086      	sub	sp, #24
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d032      	beq.n	8007e96 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 f834 	bl	8007e9e <USBD_GetLen>
 8007e36:	4603      	mov	r3, r0
 8007e38:	3301      	adds	r3, #1
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	75fa      	strb	r2, [r7, #23]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4413      	add	r3, r2
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	7812      	ldrb	r2, [r2, #0]
 8007e54:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	75fa      	strb	r2, [r7, #23]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	4413      	add	r3, r2
 8007e62:	2203      	movs	r2, #3
 8007e64:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e66:	e012      	b.n	8007e8e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	60fa      	str	r2, [r7, #12]
 8007e6e:	7dfa      	ldrb	r2, [r7, #23]
 8007e70:	1c51      	adds	r1, r2, #1
 8007e72:	75f9      	strb	r1, [r7, #23]
 8007e74:	4611      	mov	r1, r2
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	440a      	add	r2, r1
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e7e:	7dfb      	ldrb	r3, [r7, #23]
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	75fa      	strb	r2, [r7, #23]
 8007e84:	461a      	mov	r2, r3
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	4413      	add	r3, r2
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e8      	bne.n	8007e68 <USBD_GetString+0x4e>
    }
  }
}
 8007e96:	bf00      	nop
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007eaa:	e005      	b.n	8007eb8 <USBD_GetLen+0x1a>
  {
    len++;
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1f5      	bne.n	8007eac <USBD_GetLen+0xe>
  }

  return len;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr

08007ecc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2202      	movs	r2, #2
 8007ede:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007ee2:	88fa      	ldrh	r2, [r7, #6]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ee8:	88fa      	ldrh	r2, [r7, #6]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eee:	88fb      	ldrh	r3, [r7, #6]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 fcaf 	bl	8008858 <USBD_LL_Transmit>

  return USBD_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f12:	88fb      	ldrh	r3, [r7, #6]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	2100      	movs	r1, #0
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 fc9d 	bl	8008858 <USBD_LL_Transmit>

  return USBD_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4613      	mov	r3, r2
 8007f34:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2203      	movs	r2, #3
 8007f3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007f3e:	88fa      	ldrh	r2, [r7, #6]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007f46:	88fa      	ldrh	r2, [r7, #6]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	2100      	movs	r1, #0
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 fca2 	bl	800889e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f72:	88fb      	ldrh	r3, [r7, #6]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	2100      	movs	r1, #0
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fc90 	bl	800889e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2204      	movs	r2, #4
 8007f94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fc5a 	bl	8008858 <USBD_LL_Transmit>

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2205      	movs	r2, #5
 8007fba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fc6a 	bl	800889e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4912      	ldr	r1, [pc, #72]	@ (8008024 <MX_USB_DEVICE_Init+0x50>)
 8007fdc:	4812      	ldr	r0, [pc, #72]	@ (8008028 <MX_USB_DEVICE_Init+0x54>)
 8007fde:	f7fe ff29 	bl	8006e34 <USBD_Init>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fe8:	f7f8 feba 	bl	8000d60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fec:	490f      	ldr	r1, [pc, #60]	@ (800802c <MX_USB_DEVICE_Init+0x58>)
 8007fee:	480e      	ldr	r0, [pc, #56]	@ (8008028 <MX_USB_DEVICE_Init+0x54>)
 8007ff0:	f7fe ff4b 	bl	8006e8a <USBD_RegisterClass>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ffa:	f7f8 feb1 	bl	8000d60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007ffe:	490c      	ldr	r1, [pc, #48]	@ (8008030 <MX_USB_DEVICE_Init+0x5c>)
 8008000:	4809      	ldr	r0, [pc, #36]	@ (8008028 <MX_USB_DEVICE_Init+0x54>)
 8008002:	f7fe feab 	bl	8006d5c <USBD_CDC_RegisterInterface>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800800c:	f7f8 fea8 	bl	8000d60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008010:	4805      	ldr	r0, [pc, #20]	@ (8008028 <MX_USB_DEVICE_Init+0x54>)
 8008012:	f7fe ff53 	bl	8006ebc <USBD_Start>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800801c:	f7f8 fea0 	bl	8000d60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008020:	bf00      	nop
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20000144 	.word	0x20000144
 8008028:	200003a0 	.word	0x200003a0
 800802c:	20000030 	.word	0x20000030
 8008030:	20000134 	.word	0x20000134

08008034 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008038:	2200      	movs	r2, #0
 800803a:	4905      	ldr	r1, [pc, #20]	@ (8008050 <CDC_Init_FS+0x1c>)
 800803c:	4805      	ldr	r0, [pc, #20]	@ (8008054 <CDC_Init_FS+0x20>)
 800803e:	f7fe fea3 	bl	8006d88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008042:	4905      	ldr	r1, [pc, #20]	@ (8008058 <CDC_Init_FS+0x24>)
 8008044:	4803      	ldr	r0, [pc, #12]	@ (8008054 <CDC_Init_FS+0x20>)
 8008046:	f7fe feb8 	bl	8006dba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800804a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800804c:	4618      	mov	r0, r3
 800804e:	bd80      	pop	{r7, pc}
 8008050:	20000a64 	.word	0x20000a64
 8008054:	200003a0 	.word	0x200003a0
 8008058:	20000664 	.word	0x20000664

0800805c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008060:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008062:	4618      	mov	r0, r3
 8008064:	46bd      	mov	sp, r7
 8008066:	bc80      	pop	{r7}
 8008068:	4770      	bx	lr
	...

0800806c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	6039      	str	r1, [r7, #0]
 8008076:	71fb      	strb	r3, [r7, #7]
 8008078:	4613      	mov	r3, r2
 800807a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	2b23      	cmp	r3, #35	@ 0x23
 8008080:	d84a      	bhi.n	8008118 <CDC_Control_FS+0xac>
 8008082:	a201      	add	r2, pc, #4	@ (adr r2, 8008088 <CDC_Control_FS+0x1c>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	08008119 	.word	0x08008119
 800808c:	08008119 	.word	0x08008119
 8008090:	08008119 	.word	0x08008119
 8008094:	08008119 	.word	0x08008119
 8008098:	08008119 	.word	0x08008119
 800809c:	08008119 	.word	0x08008119
 80080a0:	08008119 	.word	0x08008119
 80080a4:	08008119 	.word	0x08008119
 80080a8:	08008119 	.word	0x08008119
 80080ac:	08008119 	.word	0x08008119
 80080b0:	08008119 	.word	0x08008119
 80080b4:	08008119 	.word	0x08008119
 80080b8:	08008119 	.word	0x08008119
 80080bc:	08008119 	.word	0x08008119
 80080c0:	08008119 	.word	0x08008119
 80080c4:	08008119 	.word	0x08008119
 80080c8:	08008119 	.word	0x08008119
 80080cc:	08008119 	.word	0x08008119
 80080d0:	08008119 	.word	0x08008119
 80080d4:	08008119 	.word	0x08008119
 80080d8:	08008119 	.word	0x08008119
 80080dc:	08008119 	.word	0x08008119
 80080e0:	08008119 	.word	0x08008119
 80080e4:	08008119 	.word	0x08008119
 80080e8:	08008119 	.word	0x08008119
 80080ec:	08008119 	.word	0x08008119
 80080f0:	08008119 	.word	0x08008119
 80080f4:	08008119 	.word	0x08008119
 80080f8:	08008119 	.word	0x08008119
 80080fc:	08008119 	.word	0x08008119
 8008100:	08008119 	.word	0x08008119
 8008104:	08008119 	.word	0x08008119
 8008108:	08008119 	.word	0x08008119
 800810c:	08008119 	.word	0x08008119
 8008110:	08008119 	.word	0x08008119
 8008114:	08008119 	.word	0x08008119
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008118:	bf00      	nop
  }

  return (USBD_OK);
 800811a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	bc80      	pop	{r7}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop

08008128 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	4805      	ldr	r0, [pc, #20]	@ (800814c <CDC_Receive_FS+0x24>)
 8008136:	f7fe fe40 	bl	8006dba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800813a:	4804      	ldr	r0, [pc, #16]	@ (800814c <CDC_Receive_FS+0x24>)
 800813c:	f7fe fe50 	bl	8006de0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008140:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	200003a0 	.word	0x200003a0

08008150 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	4603      	mov	r3, r0
 8008158:	6039      	str	r1, [r7, #0]
 800815a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2212      	movs	r2, #18
 8008160:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008162:	4b03      	ldr	r3, [pc, #12]	@ (8008170 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20000160 	.word	0x20000160

08008174 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	4603      	mov	r3, r0
 800817c:	6039      	str	r1, [r7, #0]
 800817e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2204      	movs	r2, #4
 8008184:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008186:	4b03      	ldr	r3, [pc, #12]	@ (8008194 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	20000174 	.word	0x20000174

08008198 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	6039      	str	r1, [r7, #0]
 80081a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d105      	bne.n	80081b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	4907      	ldr	r1, [pc, #28]	@ (80081cc <USBD_FS_ProductStrDescriptor+0x34>)
 80081ae:	4808      	ldr	r0, [pc, #32]	@ (80081d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80081b0:	f7ff fe33 	bl	8007e1a <USBD_GetString>
 80081b4:	e004      	b.n	80081c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	4904      	ldr	r1, [pc, #16]	@ (80081cc <USBD_FS_ProductStrDescriptor+0x34>)
 80081ba:	4805      	ldr	r0, [pc, #20]	@ (80081d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80081bc:	f7ff fe2d 	bl	8007e1a <USBD_GetString>
  }
  return USBD_StrDesc;
 80081c0:	4b02      	ldr	r3, [pc, #8]	@ (80081cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20000e64 	.word	0x20000e64
 80081d0:	08008c10 	.word	0x08008c10

080081d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	4904      	ldr	r1, [pc, #16]	@ (80081f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081e4:	4804      	ldr	r0, [pc, #16]	@ (80081f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081e6:	f7ff fe18 	bl	8007e1a <USBD_GetString>
  return USBD_StrDesc;
 80081ea:	4b02      	ldr	r3, [pc, #8]	@ (80081f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	20000e64 	.word	0x20000e64
 80081f8:	08008c28 	.word	0x08008c28

080081fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	4603      	mov	r3, r0
 8008204:	6039      	str	r1, [r7, #0]
 8008206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	221a      	movs	r2, #26
 800820c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800820e:	f000 f843 	bl	8008298 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008212:	4b02      	ldr	r3, [pc, #8]	@ (800821c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008214:	4618      	mov	r0, r3
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	20000178 	.word	0x20000178

08008220 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	6039      	str	r1, [r7, #0]
 800822a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d105      	bne.n	800823e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	4907      	ldr	r1, [pc, #28]	@ (8008254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008236:	4808      	ldr	r0, [pc, #32]	@ (8008258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008238:	f7ff fdef 	bl	8007e1a <USBD_GetString>
 800823c:	e004      	b.n	8008248 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	4904      	ldr	r1, [pc, #16]	@ (8008254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008242:	4805      	ldr	r0, [pc, #20]	@ (8008258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008244:	f7ff fde9 	bl	8007e1a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008248:	4b02      	ldr	r3, [pc, #8]	@ (8008254 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800824a:	4618      	mov	r0, r3
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000e64 	.word	0x20000e64
 8008258:	08008c3c 	.word	0x08008c3c

0800825c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	6039      	str	r1, [r7, #0]
 8008266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008268:	79fb      	ldrb	r3, [r7, #7]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d105      	bne.n	800827a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	4907      	ldr	r1, [pc, #28]	@ (8008290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008272:	4808      	ldr	r0, [pc, #32]	@ (8008294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008274:	f7ff fdd1 	bl	8007e1a <USBD_GetString>
 8008278:	e004      	b.n	8008284 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	4904      	ldr	r1, [pc, #16]	@ (8008290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800827e:	4805      	ldr	r0, [pc, #20]	@ (8008294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008280:	f7ff fdcb 	bl	8007e1a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008284:	4b02      	ldr	r3, [pc, #8]	@ (8008290 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000e64 	.word	0x20000e64
 8008294:	08008c48 	.word	0x08008c48

08008298 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	4413      	add	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d009      	beq.n	80082c0 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082ac:	2208      	movs	r2, #8
 80082ae:	4906      	ldr	r1, [pc, #24]	@ (80082c8 <Get_SerialNum+0x30>)
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 f80d 	bl	80082d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80082b6:	2204      	movs	r2, #4
 80082b8:	4904      	ldr	r1, [pc, #16]	@ (80082cc <Get_SerialNum+0x34>)
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f808 	bl	80082d0 <IntToUnicode>
  }
}
 80082c0:	bf00      	nop
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	2000017a 	.word	0x2000017a
 80082cc:	2000018a 	.word	0x2000018a

080082d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	4613      	mov	r3, r2
 80082dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082e2:	2300      	movs	r3, #0
 80082e4:	75fb      	strb	r3, [r7, #23]
 80082e6:	e027      	b.n	8008338 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	0f1b      	lsrs	r3, r3, #28
 80082ec:	2b09      	cmp	r3, #9
 80082ee:	d80b      	bhi.n	8008308 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	0f1b      	lsrs	r3, r3, #28
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	4619      	mov	r1, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	440b      	add	r3, r1
 8008300:	3230      	adds	r2, #48	@ 0x30
 8008302:	b2d2      	uxtb	r2, r2
 8008304:	701a      	strb	r2, [r3, #0]
 8008306:	e00a      	b.n	800831e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	0f1b      	lsrs	r3, r3, #28
 800830c:	b2da      	uxtb	r2, r3
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	4619      	mov	r1, r3
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	440b      	add	r3, r1
 8008318:	3237      	adds	r2, #55	@ 0x37
 800831a:	b2d2      	uxtb	r2, r2
 800831c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	011b      	lsls	r3, r3, #4
 8008322:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008324:	7dfb      	ldrb	r3, [r7, #23]
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	3301      	adds	r3, #1
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	4413      	add	r3, r2
 800832e:	2200      	movs	r2, #0
 8008330:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008332:	7dfb      	ldrb	r3, [r7, #23]
 8008334:	3301      	adds	r3, #1
 8008336:	75fb      	strb	r3, [r7, #23]
 8008338:	7dfa      	ldrb	r2, [r7, #23]
 800833a:	79fb      	ldrb	r3, [r7, #7]
 800833c:	429a      	cmp	r2, r3
 800833e:	d3d3      	bcc.n	80082e8 <IntToUnicode+0x18>
  }
}
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	bc80      	pop	{r7}
 800834a:	4770      	bx	lr

0800834c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08a      	sub	sp, #40	@ 0x28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008354:	f107 0314 	add.w	r3, r7, #20
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	605a      	str	r2, [r3, #4]
 800835e:	609a      	str	r2, [r3, #8]
 8008360:	60da      	str	r2, [r3, #12]
 8008362:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800836c:	d147      	bne.n	80083fe <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800836e:	2300      	movs	r3, #0
 8008370:	613b      	str	r3, [r7, #16]
 8008372:	4b25      	ldr	r3, [pc, #148]	@ (8008408 <HAL_PCD_MspInit+0xbc>)
 8008374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008376:	4a24      	ldr	r2, [pc, #144]	@ (8008408 <HAL_PCD_MspInit+0xbc>)
 8008378:	f043 0301 	orr.w	r3, r3, #1
 800837c:	6313      	str	r3, [r2, #48]	@ 0x30
 800837e:	4b22      	ldr	r3, [pc, #136]	@ (8008408 <HAL_PCD_MspInit+0xbc>)
 8008380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	613b      	str	r3, [r7, #16]
 8008388:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800838a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800838e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008390:	2300      	movs	r3, #0
 8008392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008394:	2300      	movs	r3, #0
 8008396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008398:	f107 0314 	add.w	r3, r7, #20
 800839c:	4619      	mov	r1, r3
 800839e:	481b      	ldr	r0, [pc, #108]	@ (800840c <HAL_PCD_MspInit+0xc0>)
 80083a0:	f7fa f8a0 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80083a4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80083a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083aa:	2302      	movs	r3, #2
 80083ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083b2:	2303      	movs	r3, #3
 80083b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80083b6:	230a      	movs	r3, #10
 80083b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ba:	f107 0314 	add.w	r3, r7, #20
 80083be:	4619      	mov	r1, r3
 80083c0:	4812      	ldr	r0, [pc, #72]	@ (800840c <HAL_PCD_MspInit+0xc0>)
 80083c2:	f7fa f88f 	bl	80024e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083c6:	4b10      	ldr	r3, [pc, #64]	@ (8008408 <HAL_PCD_MspInit+0xbc>)
 80083c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ca:	4a0f      	ldr	r2, [pc, #60]	@ (8008408 <HAL_PCD_MspInit+0xbc>)
 80083cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083d0:	6353      	str	r3, [r2, #52]	@ 0x34
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008408 <HAL_PCD_MspInit+0xbc>)
 80083d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083da:	4a0b      	ldr	r2, [pc, #44]	@ (8008408 <HAL_PCD_MspInit+0xbc>)
 80083dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80083e2:	4b09      	ldr	r3, [pc, #36]	@ (8008408 <HAL_PCD_MspInit+0xbc>)
 80083e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083ee:	2200      	movs	r2, #0
 80083f0:	2100      	movs	r1, #0
 80083f2:	2043      	movs	r0, #67	@ 0x43
 80083f4:	f7fa f83f 	bl	8002476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083f8:	2043      	movs	r0, #67	@ 0x43
 80083fa:	f7fa f858 	bl	80024ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083fe:	bf00      	nop
 8008400:	3728      	adds	r7, #40	@ 0x28
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	40023800 	.word	0x40023800
 800840c:	40020000 	.word	0x40020000

08008410 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	@ 0x4d8
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008424:	4619      	mov	r1, r3
 8008426:	4610      	mov	r0, r2
 8008428:	f7fe fd90 	bl	8006f4c <USBD_LL_SetupStage>
}
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	@ 0x4d8
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	4613      	mov	r3, r2
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	440b      	add	r3, r1
 8008454:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	4619      	mov	r1, r3
 800845e:	f7fe fdc2 	bl	8006fe6 <USBD_LL_DataOutStage>
}
 8008462:	bf00      	nop
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	@ 0x4d8
 800847c:	78fa      	ldrb	r2, [r7, #3]
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	4613      	mov	r3, r2
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	4413      	add	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	440b      	add	r3, r1
 800848a:	3320      	adds	r3, #32
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	78fb      	ldrb	r3, [r7, #3]
 8008490:	4619      	mov	r1, r3
 8008492:	f7fe fe19 	bl	80070c8 <USBD_LL_DataInStage>
}
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b082      	sub	sp, #8
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fe ff29 	bl	8007304 <USBD_LL_SOF>
}
 80084b2:	bf00      	nop
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084c2:	2301      	movs	r3, #1
 80084c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	79db      	ldrb	r3, [r3, #7]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d102      	bne.n	80084d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80084ce:	2300      	movs	r3, #0
 80084d0:	73fb      	strb	r3, [r7, #15]
 80084d2:	e008      	b.n	80084e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	79db      	ldrb	r3, [r3, #7]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d102      	bne.n	80084e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80084dc:	2301      	movs	r3, #1
 80084de:	73fb      	strb	r3, [r7, #15]
 80084e0:	e001      	b.n	80084e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80084e2:	f7f8 fc3d 	bl	8000d60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 80084ec:	7bfa      	ldrb	r2, [r7, #15]
 80084ee:	4611      	mov	r1, r2
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fe fecf 	bl	8007294 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fe fe88 	bl	8007212 <USBD_LL_Reset>
}
 8008502:	bf00      	nop
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fec9 	bl	80072b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6812      	ldr	r2, [r2, #0]
 800852e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008532:	f043 0301 	orr.w	r3, r3, #1
 8008536:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	7adb      	ldrb	r3, [r3, #11]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008540:	4b04      	ldr	r3, [pc, #16]	@ (8008554 <HAL_PCD_SuspendCallback+0x48>)
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	4a03      	ldr	r2, [pc, #12]	@ (8008554 <HAL_PCD_SuspendCallback+0x48>)
 8008546:	f043 0306 	orr.w	r3, r3, #6
 800854a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	e000ed00 	.word	0xe000ed00

08008558 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe feb7 	bl	80072da <USBD_LL_Resume>
}
 800856c:	bf00      	nop
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	4611      	mov	r1, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe fee0 	bl	8007350 <USBD_LL_IsoOUTIncomplete>
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 80085aa:	78fa      	ldrb	r2, [r7, #3]
 80085ac:	4611      	mov	r1, r2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe fec2 	bl	8007338 <USBD_LL_IsoINIncomplete>
}
 80085b4:	bf00      	nop
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fecc 	bl	8007368 <USBD_LL_DevConnected>
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe fec8 	bl	800737c <USBD_LL_DevDisconnected>
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d139      	bne.n	8008678 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008604:	4a1f      	ldr	r2, [pc, #124]	@ (8008684 <USBD_LL_Init+0x90>)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8c2 34d8 	str.w	r3, [r2, #1240]	@ 0x4d8
  pdev->pData = &hpcd_USB_OTG_FS;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a1d      	ldr	r2, [pc, #116]	@ (8008684 <USBD_LL_Init+0x90>)
 8008610:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008614:	4b1b      	ldr	r3, [pc, #108]	@ (8008684 <USBD_LL_Init+0x90>)
 8008616:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800861a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800861c:	4b19      	ldr	r3, [pc, #100]	@ (8008684 <USBD_LL_Init+0x90>)
 800861e:	2204      	movs	r2, #4
 8008620:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008622:	4b18      	ldr	r3, [pc, #96]	@ (8008684 <USBD_LL_Init+0x90>)
 8008624:	2202      	movs	r2, #2
 8008626:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008628:	4b16      	ldr	r3, [pc, #88]	@ (8008684 <USBD_LL_Init+0x90>)
 800862a:	2200      	movs	r2, #0
 800862c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800862e:	4b15      	ldr	r3, [pc, #84]	@ (8008684 <USBD_LL_Init+0x90>)
 8008630:	2202      	movs	r2, #2
 8008632:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008634:	4b13      	ldr	r3, [pc, #76]	@ (8008684 <USBD_LL_Init+0x90>)
 8008636:	2200      	movs	r2, #0
 8008638:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800863a:	4b12      	ldr	r3, [pc, #72]	@ (8008684 <USBD_LL_Init+0x90>)
 800863c:	2200      	movs	r2, #0
 800863e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008640:	4b10      	ldr	r3, [pc, #64]	@ (8008684 <USBD_LL_Init+0x90>)
 8008642:	2201      	movs	r2, #1
 8008644:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008646:	4b0f      	ldr	r3, [pc, #60]	@ (8008684 <USBD_LL_Init+0x90>)
 8008648:	2200      	movs	r2, #0
 800864a:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800864c:	480d      	ldr	r0, [pc, #52]	@ (8008684 <USBD_LL_Init+0x90>)
 800864e:	f7fa f918 	bl	8002882 <HAL_PCD_Init>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8008658:	f7f8 fb82 	bl	8000d60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800865c:	2180      	movs	r1, #128	@ 0x80
 800865e:	4809      	ldr	r0, [pc, #36]	@ (8008684 <USBD_LL_Init+0x90>)
 8008660:	f7fb fb20 	bl	8003ca4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008664:	2240      	movs	r2, #64	@ 0x40
 8008666:	2100      	movs	r1, #0
 8008668:	4806      	ldr	r0, [pc, #24]	@ (8008684 <USBD_LL_Init+0x90>)
 800866a:	f7fb fad5 	bl	8003c18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800866e:	2280      	movs	r2, #128	@ 0x80
 8008670:	2101      	movs	r1, #1
 8008672:	4804      	ldr	r0, [pc, #16]	@ (8008684 <USBD_LL_Init+0x90>)
 8008674:	f7fb fad0 	bl	8003c18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20001064 	.word	0x20001064

08008688 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fa f9fe 	bl	8002aa0 <HAL_PCD_Start>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 f92e 	bl	800890c <USBD_Get_USB_Status>
 80086b0:	4603      	mov	r3, r0
 80086b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	4608      	mov	r0, r1
 80086c8:	4611      	mov	r1, r2
 80086ca:	461a      	mov	r2, r3
 80086cc:	4603      	mov	r3, r0
 80086ce:	70fb      	strb	r3, [r7, #3]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70bb      	strb	r3, [r7, #2]
 80086d4:	4613      	mov	r3, r2
 80086d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086e6:	78bb      	ldrb	r3, [r7, #2]
 80086e8:	883a      	ldrh	r2, [r7, #0]
 80086ea:	78f9      	ldrb	r1, [r7, #3]
 80086ec:	f7fa feb1 	bl	8003452 <HAL_PCD_EP_Open>
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 f908 	bl	800890c <USBD_Get_USB_Status>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008700:	7bbb      	ldrb	r3, [r7, #14]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008724:	78fa      	ldrb	r2, [r7, #3]
 8008726:	4611      	mov	r1, r2
 8008728:	4618      	mov	r0, r3
 800872a:	f7fa fefa 	bl	8003522 <HAL_PCD_EP_Close>
 800872e:	4603      	mov	r3, r0
 8008730:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	4618      	mov	r0, r3
 8008736:	f000 f8e9 	bl	800890c <USBD_Get_USB_Status>
 800873a:	4603      	mov	r3, r0
 800873c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800873e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008762:	78fa      	ldrb	r2, [r7, #3]
 8008764:	4611      	mov	r1, r2
 8008766:	4618      	mov	r0, r3
 8008768:	f7fa ffb1 	bl	80036ce <HAL_PCD_EP_SetStall>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	4618      	mov	r0, r3
 8008774:	f000 f8ca 	bl	800890c <USBD_Get_USB_Status>
 8008778:	4603      	mov	r3, r0
 800877a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800877c:	7bbb      	ldrb	r3, [r7, #14]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	460b      	mov	r3, r1
 8008790:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087a0:	78fa      	ldrb	r2, [r7, #3]
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fa fff5 	bl	8003794 <HAL_PCD_EP_ClrStall>
 80087aa:	4603      	mov	r3, r0
 80087ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 f8ab 	bl	800890c <USBD_Get_USB_Status>
 80087b6:	4603      	mov	r3, r0
 80087b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	da0b      	bge.n	80087f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087e6:	68f9      	ldr	r1, [r7, #12]
 80087e8:	4613      	mov	r3, r2
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	440b      	add	r3, r1
 80087f2:	3316      	adds	r3, #22
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	e00b      	b.n	8008810 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087fe:	68f9      	ldr	r1, [r7, #12]
 8008800:	4613      	mov	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	4413      	add	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	440b      	add	r3, r1
 800880a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800880e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	bc80      	pop	{r7}
 8008818:	4770      	bx	lr

0800881a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	460b      	mov	r3, r1
 8008824:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008834:	78fa      	ldrb	r2, [r7, #3]
 8008836:	4611      	mov	r1, r2
 8008838:	4618      	mov	r0, r3
 800883a:	f7fa fde6 	bl	800340a <HAL_PCD_SetAddress>
 800883e:	4603      	mov	r3, r0
 8008840:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	4618      	mov	r0, r3
 8008846:	f000 f861 	bl	800890c <USBD_Get_USB_Status>
 800884a:	4603      	mov	r3, r0
 800884c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800884e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	607a      	str	r2, [r7, #4]
 8008862:	461a      	mov	r2, r3
 8008864:	460b      	mov	r3, r1
 8008866:	72fb      	strb	r3, [r7, #11]
 8008868:	4613      	mov	r3, r2
 800886a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800887a:	893b      	ldrh	r3, [r7, #8]
 800887c:	7af9      	ldrb	r1, [r7, #11]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	f7fa feeb 	bl	800365a <HAL_PCD_EP_Transmit>
 8008884:	4603      	mov	r3, r0
 8008886:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008888:	7dfb      	ldrb	r3, [r7, #23]
 800888a:	4618      	mov	r0, r3
 800888c:	f000 f83e 	bl	800890c <USBD_Get_USB_Status>
 8008890:	4603      	mov	r3, r0
 8008892:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008894:	7dbb      	ldrb	r3, [r7, #22]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b086      	sub	sp, #24
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	461a      	mov	r2, r3
 80088aa:	460b      	mov	r3, r1
 80088ac:	72fb      	strb	r3, [r7, #11]
 80088ae:	4613      	mov	r3, r2
 80088b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80088c0:	893b      	ldrh	r3, [r7, #8]
 80088c2:	7af9      	ldrb	r1, [r7, #11]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	f7fa fe76 	bl	80035b6 <HAL_PCD_EP_Receive>
 80088ca:	4603      	mov	r3, r0
 80088cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 f81b 	bl	800890c <USBD_Get_USB_Status>
 80088d6:	4603      	mov	r3, r0
 80088d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088da:	7dbb      	ldrb	r3, [r7, #22]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80088f6:	78fa      	ldrb	r2, [r7, #3]
 80088f8:	4611      	mov	r1, r2
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fa fe96 	bl	800362c <HAL_PCD_EP_GetRxCount>
 8008900:	4603      	mov	r3, r0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
	...

0800890c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	2b03      	cmp	r3, #3
 800891e:	d817      	bhi.n	8008950 <USBD_Get_USB_Status+0x44>
 8008920:	a201      	add	r2, pc, #4	@ (adr r2, 8008928 <USBD_Get_USB_Status+0x1c>)
 8008922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008926:	bf00      	nop
 8008928:	08008939 	.word	0x08008939
 800892c:	0800893f 	.word	0x0800893f
 8008930:	08008945 	.word	0x08008945
 8008934:	0800894b 	.word	0x0800894b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
    break;
 800893c:	e00b      	b.n	8008956 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800893e:	2302      	movs	r3, #2
 8008940:	73fb      	strb	r3, [r7, #15]
    break;
 8008942:	e008      	b.n	8008956 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008944:	2301      	movs	r3, #1
 8008946:	73fb      	strb	r3, [r7, #15]
    break;
 8008948:	e005      	b.n	8008956 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800894a:	2302      	movs	r3, #2
 800894c:	73fb      	strb	r3, [r7, #15]
    break;
 800894e:	e002      	b.n	8008956 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008950:	2302      	movs	r3, #2
 8008952:	73fb      	strb	r3, [r7, #15]
    break;
 8008954:	bf00      	nop
  }
  return usb_status;
 8008956:	7bfb      	ldrb	r3, [r7, #15]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3714      	adds	r7, #20
 800895c:	46bd      	mov	sp, r7
 800895e:	bc80      	pop	{r7}
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop

08008964 <malloc>:
 8008964:	4b02      	ldr	r3, [pc, #8]	@ (8008970 <malloc+0xc>)
 8008966:	4601      	mov	r1, r0
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f000 b82d 	b.w	80089c8 <_malloc_r>
 800896e:	bf00      	nop
 8008970:	20000194 	.word	0x20000194

08008974 <free>:
 8008974:	4b02      	ldr	r3, [pc, #8]	@ (8008980 <free+0xc>)
 8008976:	4601      	mov	r1, r0
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	f000 b8f5 	b.w	8008b68 <_free_r>
 800897e:	bf00      	nop
 8008980:	20000194 	.word	0x20000194

08008984 <sbrk_aligned>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	4e0f      	ldr	r6, [pc, #60]	@ (80089c4 <sbrk_aligned+0x40>)
 8008988:	460c      	mov	r4, r1
 800898a:	6831      	ldr	r1, [r6, #0]
 800898c:	4605      	mov	r5, r0
 800898e:	b911      	cbnz	r1, 8008996 <sbrk_aligned+0x12>
 8008990:	f000 f8ae 	bl	8008af0 <_sbrk_r>
 8008994:	6030      	str	r0, [r6, #0]
 8008996:	4621      	mov	r1, r4
 8008998:	4628      	mov	r0, r5
 800899a:	f000 f8a9 	bl	8008af0 <_sbrk_r>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d103      	bne.n	80089aa <sbrk_aligned+0x26>
 80089a2:	f04f 34ff 	mov.w	r4, #4294967295
 80089a6:	4620      	mov	r0, r4
 80089a8:	bd70      	pop	{r4, r5, r6, pc}
 80089aa:	1cc4      	adds	r4, r0, #3
 80089ac:	f024 0403 	bic.w	r4, r4, #3
 80089b0:	42a0      	cmp	r0, r4
 80089b2:	d0f8      	beq.n	80089a6 <sbrk_aligned+0x22>
 80089b4:	1a21      	subs	r1, r4, r0
 80089b6:	4628      	mov	r0, r5
 80089b8:	f000 f89a 	bl	8008af0 <_sbrk_r>
 80089bc:	3001      	adds	r0, #1
 80089be:	d1f2      	bne.n	80089a6 <sbrk_aligned+0x22>
 80089c0:	e7ef      	b.n	80089a2 <sbrk_aligned+0x1e>
 80089c2:	bf00      	nop
 80089c4:	20001540 	.word	0x20001540

080089c8 <_malloc_r>:
 80089c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089cc:	1ccd      	adds	r5, r1, #3
 80089ce:	f025 0503 	bic.w	r5, r5, #3
 80089d2:	3508      	adds	r5, #8
 80089d4:	2d0c      	cmp	r5, #12
 80089d6:	bf38      	it	cc
 80089d8:	250c      	movcc	r5, #12
 80089da:	2d00      	cmp	r5, #0
 80089dc:	4606      	mov	r6, r0
 80089de:	db01      	blt.n	80089e4 <_malloc_r+0x1c>
 80089e0:	42a9      	cmp	r1, r5
 80089e2:	d904      	bls.n	80089ee <_malloc_r+0x26>
 80089e4:	230c      	movs	r3, #12
 80089e6:	6033      	str	r3, [r6, #0]
 80089e8:	2000      	movs	r0, #0
 80089ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ac4 <_malloc_r+0xfc>
 80089f2:	f000 f869 	bl	8008ac8 <__malloc_lock>
 80089f6:	f8d8 3000 	ldr.w	r3, [r8]
 80089fa:	461c      	mov	r4, r3
 80089fc:	bb44      	cbnz	r4, 8008a50 <_malloc_r+0x88>
 80089fe:	4629      	mov	r1, r5
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff ffbf 	bl	8008984 <sbrk_aligned>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	4604      	mov	r4, r0
 8008a0a:	d158      	bne.n	8008abe <_malloc_r+0xf6>
 8008a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8008a10:	4627      	mov	r7, r4
 8008a12:	2f00      	cmp	r7, #0
 8008a14:	d143      	bne.n	8008a9e <_malloc_r+0xd6>
 8008a16:	2c00      	cmp	r4, #0
 8008a18:	d04b      	beq.n	8008ab2 <_malloc_r+0xea>
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	4630      	mov	r0, r6
 8008a20:	eb04 0903 	add.w	r9, r4, r3
 8008a24:	f000 f864 	bl	8008af0 <_sbrk_r>
 8008a28:	4581      	cmp	r9, r0
 8008a2a:	d142      	bne.n	8008ab2 <_malloc_r+0xea>
 8008a2c:	6821      	ldr	r1, [r4, #0]
 8008a2e:	4630      	mov	r0, r6
 8008a30:	1a6d      	subs	r5, r5, r1
 8008a32:	4629      	mov	r1, r5
 8008a34:	f7ff ffa6 	bl	8008984 <sbrk_aligned>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d03a      	beq.n	8008ab2 <_malloc_r+0xea>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	442b      	add	r3, r5
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	f8d8 3000 	ldr.w	r3, [r8]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	bb62      	cbnz	r2, 8008aa4 <_malloc_r+0xdc>
 8008a4a:	f8c8 7000 	str.w	r7, [r8]
 8008a4e:	e00f      	b.n	8008a70 <_malloc_r+0xa8>
 8008a50:	6822      	ldr	r2, [r4, #0]
 8008a52:	1b52      	subs	r2, r2, r5
 8008a54:	d420      	bmi.n	8008a98 <_malloc_r+0xd0>
 8008a56:	2a0b      	cmp	r2, #11
 8008a58:	d917      	bls.n	8008a8a <_malloc_r+0xc2>
 8008a5a:	1961      	adds	r1, r4, r5
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	6025      	str	r5, [r4, #0]
 8008a60:	bf18      	it	ne
 8008a62:	6059      	strne	r1, [r3, #4]
 8008a64:	6863      	ldr	r3, [r4, #4]
 8008a66:	bf08      	it	eq
 8008a68:	f8c8 1000 	streq.w	r1, [r8]
 8008a6c:	5162      	str	r2, [r4, r5]
 8008a6e:	604b      	str	r3, [r1, #4]
 8008a70:	4630      	mov	r0, r6
 8008a72:	f000 f82f 	bl	8008ad4 <__malloc_unlock>
 8008a76:	f104 000b 	add.w	r0, r4, #11
 8008a7a:	1d23      	adds	r3, r4, #4
 8008a7c:	f020 0007 	bic.w	r0, r0, #7
 8008a80:	1ac2      	subs	r2, r0, r3
 8008a82:	bf1c      	itt	ne
 8008a84:	1a1b      	subne	r3, r3, r0
 8008a86:	50a3      	strne	r3, [r4, r2]
 8008a88:	e7af      	b.n	80089ea <_malloc_r+0x22>
 8008a8a:	6862      	ldr	r2, [r4, #4]
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	bf0c      	ite	eq
 8008a90:	f8c8 2000 	streq.w	r2, [r8]
 8008a94:	605a      	strne	r2, [r3, #4]
 8008a96:	e7eb      	b.n	8008a70 <_malloc_r+0xa8>
 8008a98:	4623      	mov	r3, r4
 8008a9a:	6864      	ldr	r4, [r4, #4]
 8008a9c:	e7ae      	b.n	80089fc <_malloc_r+0x34>
 8008a9e:	463c      	mov	r4, r7
 8008aa0:	687f      	ldr	r7, [r7, #4]
 8008aa2:	e7b6      	b.n	8008a12 <_malloc_r+0x4a>
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	d1fb      	bne.n	8008aa4 <_malloc_r+0xdc>
 8008aac:	2300      	movs	r3, #0
 8008aae:	6053      	str	r3, [r2, #4]
 8008ab0:	e7de      	b.n	8008a70 <_malloc_r+0xa8>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	6033      	str	r3, [r6, #0]
 8008ab8:	f000 f80c 	bl	8008ad4 <__malloc_unlock>
 8008abc:	e794      	b.n	80089e8 <_malloc_r+0x20>
 8008abe:	6005      	str	r5, [r0, #0]
 8008ac0:	e7d6      	b.n	8008a70 <_malloc_r+0xa8>
 8008ac2:	bf00      	nop
 8008ac4:	20001544 	.word	0x20001544

08008ac8 <__malloc_lock>:
 8008ac8:	4801      	ldr	r0, [pc, #4]	@ (8008ad0 <__malloc_lock+0x8>)
 8008aca:	f000 b84b 	b.w	8008b64 <__retarget_lock_acquire_recursive>
 8008ace:	bf00      	nop
 8008ad0:	20001684 	.word	0x20001684

08008ad4 <__malloc_unlock>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	@ (8008adc <__malloc_unlock+0x8>)
 8008ad6:	f000 b846 	b.w	8008b66 <__retarget_lock_release_recursive>
 8008ada:	bf00      	nop
 8008adc:	20001684 	.word	0x20001684

08008ae0 <memset>:
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	4402      	add	r2, r0
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d100      	bne.n	8008aea <memset+0xa>
 8008ae8:	4770      	bx	lr
 8008aea:	f803 1b01 	strb.w	r1, [r3], #1
 8008aee:	e7f9      	b.n	8008ae4 <memset+0x4>

08008af0 <_sbrk_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	2300      	movs	r3, #0
 8008af4:	4d05      	ldr	r5, [pc, #20]	@ (8008b0c <_sbrk_r+0x1c>)
 8008af6:	4604      	mov	r4, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	602b      	str	r3, [r5, #0]
 8008afc:	f7f8 f9ce 	bl	8000e9c <_sbrk>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_sbrk_r+0x1a>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_sbrk_r+0x1a>
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	20001680 	.word	0x20001680

08008b10 <__errno>:
 8008b10:	4b01      	ldr	r3, [pc, #4]	@ (8008b18 <__errno+0x8>)
 8008b12:	6818      	ldr	r0, [r3, #0]
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	20000194 	.word	0x20000194

08008b1c <__libc_init_array>:
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	2600      	movs	r6, #0
 8008b20:	4d0c      	ldr	r5, [pc, #48]	@ (8008b54 <__libc_init_array+0x38>)
 8008b22:	4c0d      	ldr	r4, [pc, #52]	@ (8008b58 <__libc_init_array+0x3c>)
 8008b24:	1b64      	subs	r4, r4, r5
 8008b26:	10a4      	asrs	r4, r4, #2
 8008b28:	42a6      	cmp	r6, r4
 8008b2a:	d109      	bne.n	8008b40 <__libc_init_array+0x24>
 8008b2c:	f000 f864 	bl	8008bf8 <_init>
 8008b30:	2600      	movs	r6, #0
 8008b32:	4d0a      	ldr	r5, [pc, #40]	@ (8008b5c <__libc_init_array+0x40>)
 8008b34:	4c0a      	ldr	r4, [pc, #40]	@ (8008b60 <__libc_init_array+0x44>)
 8008b36:	1b64      	subs	r4, r4, r5
 8008b38:	10a4      	asrs	r4, r4, #2
 8008b3a:	42a6      	cmp	r6, r4
 8008b3c:	d105      	bne.n	8008b4a <__libc_init_array+0x2e>
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}
 8008b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b44:	4798      	blx	r3
 8008b46:	3601      	adds	r6, #1
 8008b48:	e7ee      	b.n	8008b28 <__libc_init_array+0xc>
 8008b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b4e:	4798      	blx	r3
 8008b50:	3601      	adds	r6, #1
 8008b52:	e7f2      	b.n	8008b3a <__libc_init_array+0x1e>
 8008b54:	08008c70 	.word	0x08008c70
 8008b58:	08008c70 	.word	0x08008c70
 8008b5c:	08008c70 	.word	0x08008c70
 8008b60:	08008c74 	.word	0x08008c74

08008b64 <__retarget_lock_acquire_recursive>:
 8008b64:	4770      	bx	lr

08008b66 <__retarget_lock_release_recursive>:
 8008b66:	4770      	bx	lr

08008b68 <_free_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	d040      	beq.n	8008bf2 <_free_r+0x8a>
 8008b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b74:	1f0c      	subs	r4, r1, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfb8      	it	lt
 8008b7a:	18e4      	addlt	r4, r4, r3
 8008b7c:	f7ff ffa4 	bl	8008ac8 <__malloc_lock>
 8008b80:	4a1c      	ldr	r2, [pc, #112]	@ (8008bf4 <_free_r+0x8c>)
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	b933      	cbnz	r3, 8008b94 <_free_r+0x2c>
 8008b86:	6063      	str	r3, [r4, #4]
 8008b88:	6014      	str	r4, [r2, #0]
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b90:	f7ff bfa0 	b.w	8008ad4 <__malloc_unlock>
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	d908      	bls.n	8008baa <_free_r+0x42>
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	1821      	adds	r1, r4, r0
 8008b9c:	428b      	cmp	r3, r1
 8008b9e:	bf01      	itttt	eq
 8008ba0:	6819      	ldreq	r1, [r3, #0]
 8008ba2:	685b      	ldreq	r3, [r3, #4]
 8008ba4:	1809      	addeq	r1, r1, r0
 8008ba6:	6021      	streq	r1, [r4, #0]
 8008ba8:	e7ed      	b.n	8008b86 <_free_r+0x1e>
 8008baa:	461a      	mov	r2, r3
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	b10b      	cbz	r3, 8008bb4 <_free_r+0x4c>
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	d9fa      	bls.n	8008baa <_free_r+0x42>
 8008bb4:	6811      	ldr	r1, [r2, #0]
 8008bb6:	1850      	adds	r0, r2, r1
 8008bb8:	42a0      	cmp	r0, r4
 8008bba:	d10b      	bne.n	8008bd4 <_free_r+0x6c>
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	4401      	add	r1, r0
 8008bc0:	1850      	adds	r0, r2, r1
 8008bc2:	4283      	cmp	r3, r0
 8008bc4:	6011      	str	r1, [r2, #0]
 8008bc6:	d1e0      	bne.n	8008b8a <_free_r+0x22>
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	4408      	add	r0, r1
 8008bce:	6010      	str	r0, [r2, #0]
 8008bd0:	6053      	str	r3, [r2, #4]
 8008bd2:	e7da      	b.n	8008b8a <_free_r+0x22>
 8008bd4:	d902      	bls.n	8008bdc <_free_r+0x74>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	e7d6      	b.n	8008b8a <_free_r+0x22>
 8008bdc:	6820      	ldr	r0, [r4, #0]
 8008bde:	1821      	adds	r1, r4, r0
 8008be0:	428b      	cmp	r3, r1
 8008be2:	bf01      	itttt	eq
 8008be4:	6819      	ldreq	r1, [r3, #0]
 8008be6:	685b      	ldreq	r3, [r3, #4]
 8008be8:	1809      	addeq	r1, r1, r0
 8008bea:	6021      	streq	r1, [r4, #0]
 8008bec:	6063      	str	r3, [r4, #4]
 8008bee:	6054      	str	r4, [r2, #4]
 8008bf0:	e7cb      	b.n	8008b8a <_free_r+0x22>
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	20001544 	.word	0x20001544

08008bf8 <_init>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	bf00      	nop
 8008bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfe:	bc08      	pop	{r3}
 8008c00:	469e      	mov	lr, r3
 8008c02:	4770      	bx	lr

08008c04 <_fini>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr
